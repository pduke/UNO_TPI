
UNO_TPI.o:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__ctors_end>
       4:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
       8:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
       c:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      10:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      14:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      18:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      1c:	0c 94 07 04 	jmp	0x80e	; 0x80e <__vector_7>
      20:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      24:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      28:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      2c:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      30:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      34:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      38:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      3c:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      40:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      44:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      48:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_18>
      4c:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      50:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      54:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      58:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      5c:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      60:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>
      64:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2177>:
      6c:	69 6e 66 00                                         inf.

00000070 <__c.2374>:
      70:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
      80:	47 00                                               G.

00000082 <pstr_an>:
      82:	61 6e 00                                            an.

00000085 <pstr_nfinity>:
      85:	6e 66 69 6e 69 74 79 00                             nfinity.

0000008d <pwr_m10>:
      8d:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      9d:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000a5 <pwr_p10>:
      a5:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      b5:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000bd <__c.2424>:
      bd:	0a 3f 20 25 25 25 30 32 58 00                       .? %%%02X.

000000c7 <__c.2415>:
      c7:	0a 3e 20 6c 6f 63 6b 20 25 30 32 58 00              .> lock %02X.

000000d4 <__c.2411>:
      d4:	0a 3e 20 66 75 73 65 20 25 30 32 58 00              .> fuse %02X.

000000e1 <__c.2404>:
      e1:	31 30 00                                            10.

000000e4 <__c.2401>:
      e4:	31 30 00                                            10.

000000e7 <__c.2398>:
      e7:	55 4e 4f 5f 54 50 49 00                             UNO_TPI.

000000ef <__c.2394>:
      ef:	0a 3c 20 73 69 67 20 20 25 30 32 58 25 30 32 58     .< sig  %02X%02X
      ff:	25 30 32 58 00                                      %02X.

00000104 <__c.2389>:
     104:	0a 3e 20 6c 6f 63 6b 20 25 30 32 58 00              .> lock %02X.

00000111 <__c.2379>:
     111:	0a 3e 20 66 75 73 65 20 25 30 32 58 00              .> fuse %02X.

0000011e <__c.2366>:
     11e:	2d 00                                               -.

00000120 <__c.2364>:
     120:	0a 3c 20 00                                         .< .

00000124 <__c.2357>:
     124:	2b 00                                               +.

00000126 <__c.2355>:
     126:	0a 3e 20 00                                         .> .

0000012a <__c.2340>:
     12a:	0a 3e 20 65 72 61 73 65 00                          .> erase.

00000133 <__c.2334>:
     133:	2d 00                                               -.

00000135 <__c.2332>:
     135:	0a 3c 20 00                                         .< .

00000139 <__c.2329>:
     139:	2b 00                                               +.

0000013b <__c.2327>:
     13b:	0a 3e 20 00                                         .> .

0000013f <__c.2321>:
     13f:	2b 00                                               +.

00000141 <__c.2319>:
     141:	0a 3e 20 00                                         .> .

00000145 <__c.2314>:
     145:	0a 3a 20 25 64 20 62 79 74 65 73 00                 .: %d bytes.

00000151 <__c.2310>:
     151:	0a 3a 20 70 72 6f 67 20 25 73 00                    .: prog %s.

0000015c <__c.2296>:
     15c:	55 4e 4f 5f 54 50 49 20 76 31 2e 31 00              UNO_TPI v1.1.

00000169 <avr_info>:
     169:	41 54 74 69 6e 79 34 00 00 00 1e 8f 0a 04 00 40     ATtiny4........@
     179:	08 00 20 00 41 54 74 69 6e 79 35 00 00 00 1e 8f     .. .ATtiny5.....
     189:	09 05 00 40 08 00 20 00 41 54 74 69 6e 79 39 00     ...@.. .ATtiny9.
     199:	00 00 1e 90 08 09 00 40 08 00 40 00 41 54 74 69     .......@..@.ATti
     1a9:	6e 79 31 30 00 00 1e 90 03 10 00 40 08 00 40 00     ny10.......@..@.
     1b9:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
     1c9:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
     1d9:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
     1e9:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
     1f9:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
     209:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
     219:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
     229:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
     239:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
     249:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
     259:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
     269:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
     279:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
     289:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
     299:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
     2a9:	81 00 c9 f1 24 ec a1 e5 3d 27 00                    ....$...='.

000002b4 <__ctors_end>:
     2b4:	11 24       	eor	r1, r1
     2b6:	1f be       	out	0x3f, r1	; 63
     2b8:	cf ef       	ldi	r28, 0xFF	; 255
     2ba:	d8 e0       	ldi	r29, 0x08	; 8
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	cd bf       	out	0x3d, r28	; 61

000002c0 <__do_copy_data>:
     2c0:	11 e0       	ldi	r17, 0x01	; 1
     2c2:	a0 e0       	ldi	r26, 0x00	; 0
     2c4:	b1 e0       	ldi	r27, 0x01	; 1
     2c6:	e0 ee       	ldi	r30, 0xE0	; 224
     2c8:	fe e2       	ldi	r31, 0x2E	; 46
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <__do_copy_data+0x10>
     2cc:	05 90       	lpm	r0, Z+
     2ce:	0d 92       	st	X+, r0
     2d0:	a8 30       	cpi	r26, 0x08	; 8
     2d2:	b1 07       	cpc	r27, r17
     2d4:	d9 f7       	brne	.-10     	; 0x2cc <__do_copy_data+0xc>

000002d6 <__do_clear_bss>:
     2d6:	21 e0       	ldi	r18, 0x01	; 1
     2d8:	a8 e0       	ldi	r26, 0x08	; 8
     2da:	b1 e0       	ldi	r27, 0x01	; 1
     2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <.do_clear_bss_start>

000002de <.do_clear_bss_loop>:
     2de:	1d 92       	st	X+, r1

000002e0 <.do_clear_bss_start>:
     2e0:	ab 3d       	cpi	r26, 0xDB	; 219
     2e2:	b2 07       	cpc	r27, r18
     2e4:	e1 f7       	brne	.-8      	; 0x2de <.do_clear_bss_loop>
     2e6:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <main>
     2ea:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <_exit>

000002ee <__bad_interrupt>:
     2ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002f2 <uart_init>:
#include <avr/io.h>
#include <inttypes.h>

void uart_init() {
	// set baud rate
	UCSR0A = 0;
     2f2:	10 92 c0 00 	sts	0x00C0, r1
	UBRR0L = (F_CPU/(16*BAUD))-1;
     2f6:	87 e0       	ldi	r24, 0x07	; 7
     2f8:	80 93 c4 00 	sts	0x00C4, r24
	// enable uart RX and TX
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     2fc:	88 e1       	ldi	r24, 0x18	; 24
     2fe:	80 93 c1 00 	sts	0x00C1, r24
	// set 8N1 frame format
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
     302:	86 e0       	ldi	r24, 0x06	; 6
     304:	80 93 c2 00 	sts	0x00C2, r24

	// set up STDIO handlers so you can use printf, etc
	fdevopen(&uart_putchar, &uart_getchar);
     308:	62 ea       	ldi	r22, 0xA2	; 162
     30a:	71 e0       	ldi	r23, 0x01	; 1
     30c:	82 e9       	ldi	r24, 0x92	; 146
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	0e 94 c8 14 	call	0x2990	; 0x2990 <fdevopen>
     314:	08 95       	ret

00000316 <uart_write>:
}

void uart_write(char x) {
	// wait for empty receive buffer
	while ((UCSR0A & (1<<UDRE0))==0);
     316:	90 91 c0 00 	lds	r25, 0x00C0
     31a:	95 ff       	sbrs	r25, 5
     31c:	fc cf       	rjmp	.-8      	; 0x316 <uart_write>
	// send
	UDR0 = x;
     31e:	80 93 c6 00 	sts	0x00C6, r24
     322:	08 95       	ret

00000324 <uart_putchar>:
	char x = UDR0;
	return x;
}

int uart_putchar(char c, FILE *stream) {
  uart_write(c);
     324:	0e 94 8b 01 	call	0x316	; 0x316 <uart_write>
  return 0;
}
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	08 95       	ret

0000032e <uart_char_is_waiting>:
}

uint8_t uart_char_is_waiting() {
	// returns 1 if a character is waiting
	// returns 0 if not
	return (UCSR0A & (1<<RXC0));
     32e:	80 91 c0 00 	lds	r24, 0x00C0
}
     332:	80 78       	andi	r24, 0x80	; 128
     334:	08 95       	ret

00000336 <uart_read>:
}

uint8_t uart_char_is_waiting() {
	// returns 1 if a character is waiting
	// returns 0 if not
	return (UCSR0A & (1<<RXC0));
     336:	80 91 c0 00 	lds	r24, 0x00C0
}

char uart_read() {
	// wait
	while(!uart_char_is_waiting());
     33a:	87 ff       	sbrs	r24, 7
     33c:	fc cf       	rjmp	.-8      	; 0x336 <uart_read>
	char x = UDR0;
     33e:	80 91 c6 00 	lds	r24, 0x00C6
	return x;
}
     342:	08 95       	ret

00000344 <uart_getchar>:
  uart_write(c);
  return 0;
}
    
int uart_getchar(FILE *stream) {
  int x = uart_read();
     344:	0e 94 9b 01 	call	0x336	; 0x336 <uart_read>
  return x;
}
     348:	08 2e       	mov	r0, r24
     34a:	00 0c       	add	r0, r0
     34c:	99 0b       	sbc	r25, r25
     34e:	08 95       	ret

00000350 <lcd_set_data_pins_output>:
uint8_t lcd_lines = 4;
uint8_t lcd_chars = 20;
volatile uint8_t DDRAM_address;

void lcd_set_data_pins_output(){
	OUTPUT(LCD_DB4);	CLEAR(LCD_DB4);
     350:	55 9a       	sbi	0x0a, 5	; 10
     352:	5d 98       	cbi	0x0b, 5	; 11
	OUTPUT(LCD_DB5);	CLEAR(LCD_DB5);
     354:	54 9a       	sbi	0x0a, 4	; 10
     356:	5c 98       	cbi	0x0b, 4	; 11
	OUTPUT(LCD_DB6);	CLEAR(LCD_DB6);
     358:	53 9a       	sbi	0x0a, 3	; 10
     35a:	5b 98       	cbi	0x0b, 3	; 11
	OUTPUT(LCD_DB7);	CLEAR(LCD_DB7);
     35c:	52 9a       	sbi	0x0a, 2	; 10
     35e:	5a 98       	cbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     360:	85 e0       	ldi	r24, 0x05	; 5
     362:	8a 95       	dec	r24
     364:	f1 f7       	brne	.-4      	; 0x362 <lcd_set_data_pins_output+0x12>
     366:	00 00       	nop
     368:	08 95       	ret

0000036a <lcd_set_data_pins_input>:
	_delay_us(1);
}

void lcd_set_data_pins_input(){
	PULLUP_OFF(LCD_DB4);
     36a:	55 98       	cbi	0x0a, 5	; 10
     36c:	5d 98       	cbi	0x0b, 5	; 11
	PULLUP_OFF(LCD_DB5);
     36e:	54 98       	cbi	0x0a, 4	; 10
     370:	5c 98       	cbi	0x0b, 4	; 11
	PULLUP_OFF(LCD_DB6);
     372:	53 98       	cbi	0x0a, 3	; 10
     374:	5b 98       	cbi	0x0b, 3	; 11
	PULLUP_OFF(LCD_DB7);
     376:	52 98       	cbi	0x0a, 2	; 10
     378:	5a 98       	cbi	0x0b, 2	; 11
     37a:	85 e0       	ldi	r24, 0x05	; 5
     37c:	8a 95       	dec	r24
     37e:	f1 f7       	brne	.-4      	; 0x37c <lcd_set_data_pins_input+0x12>
     380:	00 00       	nop
     382:	08 95       	ret

00000384 <lcd_read_nibble>:
	_delay_us(1);
}

char lcd_read_nibble(){
	char tmp;
	SET(LCD_E);
     384:	5e 9a       	sbi	0x0b, 6	; 11
     386:	85 e0       	ldi	r24, 0x05	; 5
     388:	8a 95       	dec	r24
     38a:	f1 f7       	brne	.-4      	; 0x388 <lcd_read_nibble+0x4>
     38c:	00 00       	nop
	_delay_us(1);
	tmp = (READ(LCD_DB7)<<3)	
     38e:	4a 99       	sbic	0x09, 2	; 9
     390:	02 c0       	rjmp	.+4      	; 0x396 <lcd_read_nibble+0x12>
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	01 c0       	rjmp	.+2      	; 0x398 <lcd_read_nibble+0x14>
     396:	98 e0       	ldi	r25, 0x08	; 8
     398:	4b 99       	sbic	0x09, 3	; 9
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <lcd_read_nibble+0x1c>
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	01 c0       	rjmp	.+2      	; 0x3a2 <lcd_read_nibble+0x1e>
     3a0:	34 e0       	ldi	r19, 0x04	; 4
     3a2:	4c 99       	sbic	0x09, 4	; 9
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <lcd_read_nibble+0x26>
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <lcd_read_nibble+0x28>
     3aa:	82 e0       	ldi	r24, 0x02	; 2
		| (READ(LCD_DB6)<<2)
		| (READ(LCD_DB5)<<1)
		| (READ(LCD_DB4));
     3ac:	29 b1       	in	r18, 0x09	; 9
	CLEAR(LCD_E);
     3ae:	5e 98       	cbi	0x0b, 6	; 11
	SET(LCD_E);
	_delay_us(1);
	tmp = (READ(LCD_DB7)<<3)	
		| (READ(LCD_DB6)<<2)
		| (READ(LCD_DB5)<<1)
		| (READ(LCD_DB4));
     3b0:	25 fb       	bst	r18, 5
     3b2:	22 27       	eor	r18, r18
     3b4:	20 f9       	bld	r18, 0
     3b6:	92 2b       	or	r25, r18
     3b8:	93 2b       	or	r25, r19
	CLEAR(LCD_E);
	return(tmp);
}
     3ba:	89 2b       	or	r24, r25
     3bc:	08 95       	ret

000003be <lcd_busy_wait_4_bit>:

void lcd_busy_wait_4_bit(){
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
	char tmp;
	tmp=0x80;
	CLEAR(LCD_RS);
     3c2:	28 98       	cbi	0x05, 0	; 5
	SET(LCD_RW);
     3c4:	5f 9a       	sbi	0x0b, 7	; 11
	lcd_set_data_pins_input();
     3c6:	0e 94 b5 01 	call	0x36a	; 0x36a <lcd_set_data_pins_input>
	while(tmp&0x80){
		tmp=lcd_read_nibble()<<4;
     3ca:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_read_nibble>
     3ce:	90 e1       	ldi	r25, 0x10	; 16
     3d0:	89 02       	muls	r24, r25
     3d2:	e0 01       	movw	r28, r0
     3d4:	11 24       	eor	r1, r1
		tmp|=lcd_read_nibble();
     3d6:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_read_nibble>
     3da:	8c 2b       	or	r24, r28
	char tmp;
	tmp=0x80;
	CLEAR(LCD_RS);
	SET(LCD_RW);
	lcd_set_data_pins_input();
	while(tmp&0x80){
     3dc:	87 fd       	sbrc	r24, 7
     3de:	f5 cf       	rjmp	.-22     	; 0x3ca <lcd_busy_wait_4_bit+0xc>
     3e0:	85 e1       	ldi	r24, 0x15	; 21
     3e2:	8a 95       	dec	r24
     3e4:	f1 f7       	brne	.-4      	; 0x3e2 <lcd_busy_wait_4_bit+0x24>
     3e6:	00 00       	nop
		tmp=lcd_read_nibble()<<4;
		tmp|=lcd_read_nibble();
	}
	_delay_us(4); // wait t_add time
	DDRAM_address=lcd_read_nibble()<<4;
     3e8:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_read_nibble>
     3ec:	82 95       	swap	r24
     3ee:	80 7f       	andi	r24, 0xF0	; 240
     3f0:	80 93 27 01 	sts	0x0127, r24
	DDRAM_address|=lcd_read_nibble();
     3f4:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_read_nibble>
     3f8:	90 91 27 01 	lds	r25, 0x0127
     3fc:	89 2b       	or	r24, r25
     3fe:	80 93 27 01 	sts	0x0127, r24
}
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	08 95       	ret

00000408 <lcd_read_byte>:
// lcd_set_type_data()
static inline void lcd_set_type_data(){
	SET(LCD_RS);
}

char lcd_read_byte(){
     408:	a1 e0       	ldi	r26, 0x01	; 1
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	ea e0       	ldi	r30, 0x0A	; 10
     40e:	f2 e0       	ldi	r31, 0x02	; 2
     410:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__prologue_saves__+0x1c>
	SET(LCD_RS);
     414:	28 9a       	sbi	0x05, 0	; 5
	SET(LCD_RW);
     416:	5f 9a       	sbi	0x0b, 7	; 11
	char tmp;
	lcd_set_data_pins_input();
     418:	0e 94 b5 01 	call	0x36a	; 0x36a <lcd_set_data_pins_input>
	tmp=lcd_read_nibble()<<4;
     41c:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_read_nibble>
     420:	90 e1       	ldi	r25, 0x10	; 16
     422:	89 02       	muls	r24, r25
     424:	80 01       	movw	r16, r0
     426:	11 24       	eor	r1, r1
	tmp|=lcd_read_nibble();
     428:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_read_nibble>
     42c:	80 2b       	or	r24, r16
	lcd_busy_wait_4_bit();
     42e:	89 83       	std	Y+1, r24	; 0x01
     430:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_busy_wait_4_bit>
	return(tmp);
}
     434:	89 81       	ldd	r24, Y+1	; 0x01
     436:	21 96       	adiw	r28, 0x01	; 1
     438:	e4 e0       	ldi	r30, 0x04	; 4
     43a:	0c 94 86 13 	jmp	0x270c	; 0x270c <__epilogue_restores__+0x1c>

0000043e <lcd_write_nibble>:
static inline void lcd_set_type_command(){
	CLEAR(LCD_RS);
}

// lcd_write_nibble(...)
void lcd_write_nibble(char data){
     43e:	a1 e0       	ldi	r26, 0x01	; 1
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__+0x20>
	CLEAR(LCD_RW);
     44a:	5f 98       	cbi	0x0b, 7	; 11
	lcd_set_data_pins_output();
     44c:	89 83       	std	Y+1, r24	; 0x01
     44e:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_set_data_pins_output>
	if(data & 0x01) SET(LCD_DB4); else 	CLEAR(LCD_DB4);
     452:	89 81       	ldd	r24, Y+1	; 0x01
     454:	80 ff       	sbrs	r24, 0
     456:	02 c0       	rjmp	.+4      	; 0x45c <lcd_write_nibble+0x1e>
     458:	5d 9a       	sbi	0x0b, 5	; 11
     45a:	01 c0       	rjmp	.+2      	; 0x45e <lcd_write_nibble+0x20>
     45c:	5d 98       	cbi	0x0b, 5	; 11
	if(data & 0x02) SET(LCD_DB5); else	CLEAR(LCD_DB5);
     45e:	81 ff       	sbrs	r24, 1
     460:	02 c0       	rjmp	.+4      	; 0x466 <lcd_write_nibble+0x28>
     462:	5c 9a       	sbi	0x0b, 4	; 11
     464:	01 c0       	rjmp	.+2      	; 0x468 <lcd_write_nibble+0x2a>
     466:	5c 98       	cbi	0x0b, 4	; 11
	if(data & 0x04) SET(LCD_DB6); else 	CLEAR(LCD_DB6);
     468:	82 ff       	sbrs	r24, 2
     46a:	02 c0       	rjmp	.+4      	; 0x470 <lcd_write_nibble+0x32>
     46c:	5b 9a       	sbi	0x0b, 3	; 11
     46e:	01 c0       	rjmp	.+2      	; 0x472 <lcd_write_nibble+0x34>
     470:	5b 98       	cbi	0x0b, 3	; 11
	if(data & 0x08) SET(LCD_DB7); else 	CLEAR(LCD_DB7);
     472:	83 ff       	sbrs	r24, 3
     474:	02 c0       	rjmp	.+4      	; 0x47a <lcd_write_nibble+0x3c>
     476:	5a 9a       	sbi	0x0b, 2	; 11
     478:	01 c0       	rjmp	.+2      	; 0x47c <lcd_write_nibble+0x3e>
     47a:	5a 98       	cbi	0x0b, 2	; 11
	SET(LCD_E);
     47c:	5e 9a       	sbi	0x0b, 6	; 11
     47e:	85 e0       	ldi	r24, 0x05	; 5
     480:	8a 95       	dec	r24
     482:	f1 f7       	brne	.-4      	; 0x480 <lcd_write_nibble+0x42>
     484:	00 00       	nop
	_delay_us(1);
	CLEAR(LCD_E);
     486:	5e 98       	cbi	0x0b, 6	; 11
     488:	85 e0       	ldi	r24, 0x05	; 5
     48a:	8a 95       	dec	r24
     48c:	f1 f7       	brne	.-4      	; 0x48a <lcd_write_nibble+0x4c>
     48e:	00 00       	nop
	_delay_us(1);
}
     490:	21 96       	adiw	r28, 0x01	; 1
     492:	e2 e0       	ldi	r30, 0x02	; 2
     494:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__+0x20>

00000498 <lcd_write_byte>:

void lcd_write_byte(char c){
     498:	cf 93       	push	r28
     49a:	c8 2f       	mov	r28, r24
	lcd_write_nibble( (c >> 4) & 0x0f );
     49c:	82 95       	swap	r24
     49e:	8f 70       	andi	r24, 0x0F	; 15
     4a0:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
	lcd_write_nibble( c & 0x0f );
     4a4:	8c 2f       	mov	r24, r28
     4a6:	8f 70       	andi	r24, 0x0F	; 15
     4a8:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
	lcd_busy_wait_4_bit();
     4ac:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_busy_wait_4_bit>
}
     4b0:	cf 91       	pop	r28
     4b2:	08 95       	ret

000004b4 <lcd_write_command>:
	return(tmp);
}

// lcd_set_type_command()
static inline void lcd_set_type_command(){
	CLEAR(LCD_RS);
     4b4:	28 98       	cbi	0x05, 0	; 5
	lcd_write_command(0x02);
}

void lcd_write_command(char c){
	lcd_set_type_command();
	lcd_write_byte(c);
     4b6:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_write_byte>
     4ba:	08 95       	ret

000004bc <lcd_clear_and_home>:
	lcd_write_nibble( c & 0x0f );
	lcd_busy_wait_4_bit();
}

void lcd_clear_and_home(){
	lcd_write_command(0x01);
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <lcd_write_command>
	lcd_write_command(0x02);
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <lcd_write_command>
     4c8:	08 95       	ret

000004ca <lcd_cursor_blink>:
		}
	}
}

void 	lcd_cursor_blink(bool state){
	if(state){
     4ca:	88 23       	and	r24, r24
     4cc:	11 f0       	breq	.+4      	; 0x4d2 <lcd_cursor_blink+0x8>
		lcd_write_command(0x0D);	// turn on blinking cursor
     4ce:	8d e0       	ldi	r24, 0x0D	; 13
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <lcd_cursor_blink+0xa>
	}else{
		lcd_write_command(0x0C);	// turn it off
     4d2:	8c e0       	ldi	r24, 0x0C	; 12
     4d4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <lcd_write_command>
     4d8:	08 95       	ret

000004da <lcd_goto_position>:
}

void lcd_goto_position(uint8_t row, uint8_t col){
	// 20x4 LCD: offsets 0, 0x40, 20, 0x40+20
	uint8_t row_offset = 0;
	if(row == 0){
     4da:	88 23       	and	r24, r24
     4dc:	79 f0       	breq	.+30     	; 0x4fc <lcd_goto_position+0x22>
			row_offset = 0;
	} else {
		if(row == 1){
     4de:	81 30       	cpi	r24, 0x01	; 1
     4e0:	59 f0       	breq	.+22     	; 0x4f8 <lcd_goto_position+0x1e>
				row_offset = LCD_OFFSET;
		} else {
			if(row == 2){
     4e2:	82 30       	cpi	r24, 0x02	; 2
     4e4:	19 f4       	brne	.+6      	; 0x4ec <lcd_goto_position+0x12>
					row_offset = lcd_chars;
     4e6:	80 91 00 01 	lds	r24, 0x0100
     4ea:	09 c0       	rjmp	.+18     	; 0x4fe <lcd_goto_position+0x24>
			} else {
				if(row == 3){
     4ec:	83 30       	cpi	r24, 0x03	; 3
     4ee:	31 f4       	brne	.+12     	; 0x4fc <lcd_goto_position+0x22>
						row_offset = LCD_OFFSET+lcd_chars;
     4f0:	80 91 00 01 	lds	r24, 0x0100
     4f4:	80 5c       	subi	r24, 0xC0	; 192
     4f6:	03 c0       	rjmp	.+6      	; 0x4fe <lcd_goto_position+0x24>
	uint8_t row_offset = 0;
	if(row == 0){
			row_offset = 0;
	} else {
		if(row == 1){
				row_offset = LCD_OFFSET;
     4f8:	80 e4       	ldi	r24, 0x40	; 64
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <lcd_goto_position+0x24>

void lcd_goto_position(uint8_t row, uint8_t col){
	// 20x4 LCD: offsets 0, 0x40, 20, 0x40+20
	uint8_t row_offset = 0;
	if(row == 0){
			row_offset = 0;
     4fc:	80 e0       	ldi	r24, 0x00	; 0
						row_offset = LCD_OFFSET+lcd_chars;
				}
			}
		}
	}
	lcd_write_command(0x80 | (row_offset + col));
     4fe:	86 0f       	add	r24, r22
     500:	80 68       	ori	r24, 0x80	; 128
     502:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <lcd_write_command>
     506:	08 95       	ret

00000508 <lcd_scroll_up>:
void lcd_write_command(char c){
	lcd_set_type_command();
	lcd_write_byte(c);
}

void lcd_scroll_up(void){
     508:	ff 92       	push	r15
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
	// scroll up
	char save_char;
	int ic=0;
	int ir=1;
	for(ic=0;ic<lcd_chars;ic++){
     512:	c0 e0       	ldi	r28, 0x00	; 0
     514:	d0 e0       	ldi	r29, 0x00	; 0
     516:	80 91 00 01 	lds	r24, 0x0100
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	c8 17       	cp	r28, r24
     51e:	d9 07       	cpc	r29, r25
     520:	ec f4       	brge	.+58     	; 0x55c <lcd_scroll_up+0x54>
     522:	01 e0       	ldi	r16, 0x01	; 1
     524:	10 e0       	ldi	r17, 0x00	; 0
		for(ir=1;ir<lcd_lines;ir++){
     526:	80 91 01 01 	lds	r24, 0x0101
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	08 17       	cp	r16, r24
     52e:	19 07       	cpc	r17, r25
     530:	9c f4       	brge	.+38     	; 0x558 <lcd_scroll_up+0x50>
			lcd_goto_position(ir,ic);
     532:	6c 2f       	mov	r22, r28
     534:	80 2f       	mov	r24, r16
     536:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_goto_position>
	DDRAM_address=lcd_read_nibble()<<4;
	DDRAM_address|=lcd_read_nibble();
}
// lcd_set_type_data()
static inline void lcd_set_type_data(){
	SET(LCD_RS);
     53a:	28 9a       	sbi	0x05, 0	; 5
	int ir=1;
	for(ic=0;ic<lcd_chars;ic++){
		for(ir=1;ir<lcd_lines;ir++){
			lcd_goto_position(ir,ic);
			lcd_set_type_data();
			save_char = lcd_read_byte();
     53c:	0e 94 04 02 	call	0x408	; 0x408 <lcd_read_byte>
     540:	f8 2e       	mov	r15, r24
			lcd_goto_position(ir-1,ic);
     542:	6c 2f       	mov	r22, r28
     544:	8f ef       	ldi	r24, 0xFF	; 255
     546:	80 0f       	add	r24, r16
     548:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_goto_position>
			lcd_write_data(save_char);
     54c:	8f 2d       	mov	r24, r15
     54e:	0e 94 cd 02 	call	0x59a	; 0x59a <lcd_write_data>
	// scroll up
	char save_char;
	int ic=0;
	int ir=1;
	for(ic=0;ic<lcd_chars;ic++){
		for(ir=1;ir<lcd_lines;ir++){
     552:	0f 5f       	subi	r16, 0xFF	; 255
     554:	1f 4f       	sbci	r17, 0xFF	; 255
     556:	e7 cf       	rjmp	.-50     	; 0x526 <lcd_scroll_up+0x1e>
void lcd_scroll_up(void){
	// scroll up
	char save_char;
	int ic=0;
	int ir=1;
	for(ic=0;ic<lcd_chars;ic++){
     558:	21 96       	adiw	r28, 0x01	; 1
     55a:	dd cf       	rjmp	.-70     	; 0x516 <lcd_scroll_up+0xe>
			save_char = lcd_read_byte();
			lcd_goto_position(ir-1,ic);
			lcd_write_data(save_char);
		}
	}
	lcd_goto_position(lcd_lines-1,0);
     55c:	80 91 01 01 	lds	r24, 0x0101
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	81 50       	subi	r24, 0x01	; 1
     564:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_goto_position>
	for(ic=0;ic<lcd_chars;ic++){
     568:	c0 e0       	ldi	r28, 0x00	; 0
     56a:	d0 e0       	ldi	r29, 0x00	; 0
     56c:	80 91 00 01 	lds	r24, 0x0100
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	c8 17       	cp	r28, r24
     574:	d9 07       	cpc	r29, r25
     576:	34 f4       	brge	.+12     	; 0x584 <lcd_scroll_up+0x7c>
	DDRAM_address=lcd_read_nibble()<<4;
	DDRAM_address|=lcd_read_nibble();
}
// lcd_set_type_data()
static inline void lcd_set_type_data(){
	SET(LCD_RS);
     578:	28 9a       	sbi	0x05, 0	; 5
		}
	}
	lcd_goto_position(lcd_lines-1,0);
	for(ic=0;ic<lcd_chars;ic++){
		lcd_set_type_data();
		lcd_write_byte(' ');
     57a:	80 e2       	ldi	r24, 0x20	; 32
     57c:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_write_byte>
			lcd_goto_position(ir-1,ic);
			lcd_write_data(save_char);
		}
	}
	lcd_goto_position(lcd_lines-1,0);
	for(ic=0;ic<lcd_chars;ic++){
     580:	21 96       	adiw	r28, 0x01	; 1
     582:	f4 cf       	rjmp	.-24     	; 0x56c <lcd_scroll_up+0x64>
		lcd_set_type_data();
		lcd_write_byte(' ');
	}
	lcd_goto_position(lcd_lines-1,0);
     584:	80 91 01 01 	lds	r24, 0x0101
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	81 50       	subi	r24, 0x01	; 1
     58c:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_goto_position>
}
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	e5 e0       	ldi	r30, 0x05	; 5
     596:	0c 94 85 13 	jmp	0x270a	; 0x270a <__epilogue_restores__+0x1a>

0000059a <lcd_write_data>:

void lcd_write_data(char c){
	if((c==0x0D)|(c==0x0A)){					// process lf or cr
     59a:	8a 30       	cpi	r24, 0x0A	; 10
     59c:	11 f0       	breq	.+4      	; 0x5a2 <lcd_write_data+0x8>
     59e:	8d 30       	cpi	r24, 0x0D	; 13
     5a0:	e9 f4       	brne	.+58     	; 0x5dc <lcd_write_data+0x42>
		if(DDRAM_address < lcd_chars){
     5a2:	90 91 27 01 	lds	r25, 0x0127
     5a6:	80 91 00 01 	lds	r24, 0x0100
     5aa:	98 17       	cp	r25, r24
     5ac:	28 f0       	brcs	.+10     	; 0x5b8 <lcd_write_data+0x1e>
			DDRAM_address = lcd_chars;
		}	else {
			if(DDRAM_address < LCD_OFFSET){
     5ae:	90 91 27 01 	lds	r25, 0x0127
     5b2:	90 34       	cpi	r25, 0x40	; 64
     5b4:	20 f4       	brcc	.+8      	; 0x5be <lcd_write_data+0x24>
				DDRAM_address = LCD_OFFSET;
     5b6:	80 e4       	ldi	r24, 0x40	; 64
     5b8:	80 93 27 01 	sts	0x0127, r24
     5bc:	12 c0       	rjmp	.+36     	; 0x5e2 <lcd_write_data+0x48>
			}	else {
				if(DDRAM_address < LCD_OFFSET+lcd_chars){
     5be:	20 91 27 01 	lds	r18, 0x0127
     5c2:	48 2f       	mov	r20, r24
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	41 5c       	subi	r20, 0xC1	; 193
     5c8:	5f 4f       	sbci	r21, 0xFF	; 255
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	42 17       	cp	r20, r18
     5ce:	53 07       	cpc	r21, r19
     5d0:	14 f0       	brlt	.+4      	; 0x5d6 <lcd_write_data+0x3c>
					DDRAM_address = LCD_OFFSET+lcd_chars;
     5d2:	80 5c       	subi	r24, 0xC0	; 192
     5d4:	f1 cf       	rjmp	.-30     	; 0x5b8 <lcd_write_data+0x1e>
				}	else {
					DDRAM_address = 0;
     5d6:	10 92 27 01 	sts	0x0127, r1
     5da:	03 c0       	rjmp	.+6      	; 0x5e2 <lcd_write_data+0x48>
	DDRAM_address=lcd_read_nibble()<<4;
	DDRAM_address|=lcd_read_nibble();
}
// lcd_set_type_data()
static inline void lcd_set_type_data(){
	SET(LCD_RS);
     5dc:	28 9a       	sbi	0x05, 0	; 5
				}
			}
		}
	} else {
		lcd_set_type_data();
		lcd_write_byte(c);
     5de:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_write_byte>
	}
	if(DDRAM_address == lcd_chars){
     5e2:	90 91 27 01 	lds	r25, 0x0127
     5e6:	80 91 00 01 	lds	r24, 0x0100
     5ea:	98 13       	cpse	r25, r24
     5ec:	03 c0       	rjmp	.+6      	; 0x5f4 <lcd_write_data+0x5a>
		lcd_goto_position(1,0);
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	0f c0       	rjmp	.+30     	; 0x612 <lcd_write_data+0x78>
	} else {
		if(DDRAM_address == LCD_OFFSET+lcd_chars){
     5f4:	20 91 27 01 	lds	r18, 0x0127
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	80 5c       	subi	r24, 0xC0	; 192
     5fe:	9f 4f       	sbci	r25, 0xFF	; 255
     600:	28 17       	cp	r18, r24
     602:	39 07       	cpc	r19, r25
     604:	61 f4       	brne	.+24     	; 0x61e <lcd_write_data+0x84>
			if(lcd_lines == 4){
     606:	80 91 01 01 	lds	r24, 0x0101
     60a:	84 30       	cpi	r24, 0x04	; 4
     60c:	29 f4       	brne	.+10     	; 0x618 <lcd_write_data+0x7e>
				lcd_goto_position(2,0);
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_goto_position>
     616:	08 95       	ret
			} else {
				lcd_scroll_up();
     618:	0e 94 84 02 	call	0x508	; 0x508 <lcd_scroll_up>
     61c:	08 95       	ret
			}
		} else {
			if(DDRAM_address == LCD_OFFSET){
     61e:	80 91 27 01 	lds	r24, 0x0127
     622:	80 34       	cpi	r24, 0x40	; 64
     624:	19 f4       	brne	.+6      	; 0x62c <lcd_write_data+0x92>
				lcd_goto_position(3,0);
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	83 e0       	ldi	r24, 0x03	; 3
     62a:	f3 cf       	rjmp	.-26     	; 0x612 <lcd_write_data+0x78>
			} else {
				if(DDRAM_address == 0){
     62c:	80 91 27 01 	lds	r24, 0x0127
     630:	88 23       	and	r24, r24
     632:	91 f3       	breq	.-28     	; 0x618 <lcd_write_data+0x7e>
     634:	08 95       	ret

00000636 <lcd_putchar>:
	}
	lcd_write_command(0x80 | (row_offset + col));
}

int lcd_putchar(char c, FILE *stream){
	lcd_write_data(c);
     636:	0e 94 cd 02 	call	0x59a	; 0x59a <lcd_write_data>
	return 0;
}
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	08 95       	ret

00000640 <lcd_set_pattern>:

void lcd_set_pattern(uint8_t index, uint8_t line1, uint8_t line2, uint8_t line3, uint8_t line4, uint8_t line5, uint8_t line6, uint8_t line7, uint8_t line8){
     640:	6f 92       	push	r6
     642:	7f 92       	push	r7
     644:	8f 92       	push	r8
     646:	af 92       	push	r10
     648:	bf 92       	push	r11
     64a:	cf 92       	push	r12
     64c:	df 92       	push	r13
     64e:	ef 92       	push	r14
     650:	ff 92       	push	r15
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
     65e:	d6 2e       	mov	r13, r22
     660:	f4 2e       	mov	r15, r20
     662:	12 2f       	mov	r17, r18
	uint8_t save_DDRAM_address = DDRAM_address;
     664:	b0 90 27 01 	lds	r11, 0x0127
	uint8_t set_GCRAM_addr = 0x40 | index<<3;
     668:	98 e0       	ldi	r25, 0x08	; 8
     66a:	89 9f       	mul	r24, r25
     66c:	30 01       	movw	r6, r0
     66e:	11 24       	eor	r1, r1
	CLEAR(LCD_RS);
     670:	28 98       	cbi	0x05, 0	; 5
	return 0;
}

void lcd_set_pattern(uint8_t index, uint8_t line1, uint8_t line2, uint8_t line3, uint8_t line4, uint8_t line5, uint8_t line6, uint8_t line7, uint8_t line8){
	uint8_t save_DDRAM_address = DDRAM_address;
	uint8_t set_GCRAM_addr = 0x40 | index<<3;
     672:	86 2d       	mov	r24, r6
     674:	80 64       	ori	r24, 0x40	; 64
	CLEAR(LCD_RS);
	lcd_write_nibble((set_GCRAM_addr >> 4) & 0x0f );
     676:	82 95       	swap	r24
     678:	8f 70       	andi	r24, 0x0F	; 15
     67a:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
	lcd_write_nibble(set_GCRAM_addr & 0x0f );
     67e:	86 2d       	mov	r24, r6
     680:	8f 70       	andi	r24, 0x0F	; 15
     682:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
     686:	85 ed       	ldi	r24, 0xD5	; 213
     688:	8a 95       	dec	r24
     68a:	f1 f7       	brne	.-4      	; 0x688 <lcd_set_pattern+0x48>
     68c:	00 00       	nop
	_delay_us(40);
	SET(LCD_RS);
     68e:	28 9a       	sbi	0x05, 0	; 5
	lcd_write_nibble( (line1 >> 4) & 0x0f );
     690:	8d 2d       	mov	r24, r13
     692:	82 95       	swap	r24
     694:	8f 70       	andi	r24, 0x0F	; 15
     696:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
	lcd_write_nibble( line1 & 0x0f );
     69a:	8d 2d       	mov	r24, r13
     69c:	8f 70       	andi	r24, 0x0F	; 15
     69e:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
     6a2:	95 ed       	ldi	r25, 0xD5	; 213
     6a4:	9a 95       	dec	r25
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <lcd_set_pattern+0x64>
     6a8:	00 00       	nop
	_delay_us(40);
	lcd_write_nibble( (line2 >> 4) & 0x0f );
     6aa:	8f 2d       	mov	r24, r15
     6ac:	82 95       	swap	r24
     6ae:	8f 70       	andi	r24, 0x0F	; 15
     6b0:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
	lcd_write_nibble( line2 & 0x0f );
     6b4:	8f 2d       	mov	r24, r15
     6b6:	8f 70       	andi	r24, 0x0F	; 15
     6b8:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
     6bc:	85 ed       	ldi	r24, 0xD5	; 213
     6be:	8a 95       	dec	r24
     6c0:	f1 f7       	brne	.-4      	; 0x6be <lcd_set_pattern+0x7e>
     6c2:	00 00       	nop
	_delay_us(40);
	lcd_write_nibble( (line3 >> 4) & 0x0f );
     6c4:	81 2f       	mov	r24, r17
     6c6:	82 95       	swap	r24
     6c8:	8f 70       	andi	r24, 0x0F	; 15
     6ca:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
	lcd_write_nibble( line3 & 0x0f );
     6ce:	81 2f       	mov	r24, r17
     6d0:	8f 70       	andi	r24, 0x0F	; 15
     6d2:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
     6d6:	95 ed       	ldi	r25, 0xD5	; 213
     6d8:	9a 95       	dec	r25
     6da:	f1 f7       	brne	.-4      	; 0x6d8 <lcd_set_pattern+0x98>
     6dc:	00 00       	nop
	_delay_us(40);
	lcd_write_nibble( (line4 >> 4) & 0x0f );
     6de:	80 2f       	mov	r24, r16
     6e0:	82 95       	swap	r24
     6e2:	8f 70       	andi	r24, 0x0F	; 15
     6e4:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
	lcd_write_nibble( line4 & 0x0f );
     6e8:	80 2f       	mov	r24, r16
     6ea:	8f 70       	andi	r24, 0x0F	; 15
     6ec:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
     6f0:	85 ed       	ldi	r24, 0xD5	; 213
     6f2:	8a 95       	dec	r24
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <lcd_set_pattern+0xb2>
     6f6:	00 00       	nop
	_delay_us(40);
	lcd_write_nibble( (line5 >> 4) & 0x0f );
     6f8:	8e 2d       	mov	r24, r14
     6fa:	82 95       	swap	r24
     6fc:	8f 70       	andi	r24, 0x0F	; 15
     6fe:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
	lcd_write_nibble( line5 & 0x0f );
     702:	8e 2d       	mov	r24, r14
     704:	8f 70       	andi	r24, 0x0F	; 15
     706:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
     70a:	95 ed       	ldi	r25, 0xD5	; 213
     70c:	9a 95       	dec	r25
     70e:	f1 f7       	brne	.-4      	; 0x70c <lcd_set_pattern+0xcc>
     710:	00 00       	nop
	_delay_us(40);
	lcd_write_nibble( (line6 >> 4) & 0x0f );
     712:	8c 2d       	mov	r24, r12
     714:	82 95       	swap	r24
     716:	8f 70       	andi	r24, 0x0F	; 15
     718:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
	lcd_write_nibble( line6 & 0x0f );
     71c:	8c 2d       	mov	r24, r12
     71e:	8f 70       	andi	r24, 0x0F	; 15
     720:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
     724:	85 ed       	ldi	r24, 0xD5	; 213
     726:	8a 95       	dec	r24
     728:	f1 f7       	brne	.-4      	; 0x726 <lcd_set_pattern+0xe6>
     72a:	00 00       	nop
	_delay_us(40);
	lcd_write_nibble( (line7 >> 4) & 0x0f );
     72c:	8a 2d       	mov	r24, r10
     72e:	82 95       	swap	r24
     730:	8f 70       	andi	r24, 0x0F	; 15
     732:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
	lcd_write_nibble( line7 & 0x0f );
     736:	8a 2d       	mov	r24, r10
     738:	8f 70       	andi	r24, 0x0F	; 15
     73a:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
     73e:	95 ed       	ldi	r25, 0xD5	; 213
     740:	9a 95       	dec	r25
     742:	f1 f7       	brne	.-4      	; 0x740 <lcd_set_pattern+0x100>
     744:	00 00       	nop
	_delay_us(40);
	lcd_write_nibble( (line8 >> 4) & 0x0f );
     746:	88 2d       	mov	r24, r8
     748:	82 95       	swap	r24
     74a:	8f 70       	andi	r24, 0x0F	; 15
     74c:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
	lcd_write_nibble( line8 & 0x0f );
     750:	88 2d       	mov	r24, r8
     752:	8f 70       	andi	r24, 0x0F	; 15
     754:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
     758:	85 ed       	ldi	r24, 0xD5	; 213
     75a:	8a 95       	dec	r24
     75c:	f1 f7       	brne	.-4      	; 0x75a <lcd_set_pattern+0x11a>
     75e:	00 00       	nop
	_delay_us(40);

	lcd_write_command(0x80 | (save_DDRAM_address));
     760:	8b 2d       	mov	r24, r11
     762:	80 68       	ori	r24, 0x80	; 128
     764:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <lcd_write_command>
}
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	df 90       	pop	r13
     776:	cf 90       	pop	r12
     778:	bf 90       	pop	r11
     77a:	af 90       	pop	r10
     77c:	8f 90       	pop	r8
     77e:	7f 90       	pop	r7
     780:	6f 90       	pop	r6
     782:	08 95       	ret

00000784 <lcd_init>:

void lcd_init(uint8_t lines, uint8_t chars){
	lcd_lines = lines;
     784:	80 93 01 01 	sts	0x0101, r24
	lcd_chars = chars;
     788:	60 93 00 01 	sts	0x0100, r22
	// set pin driver directions
	OUTPUT(LCD_RS);		CLEAR(LCD_RS);
     78c:	20 9a       	sbi	0x04, 0	; 4
     78e:	28 98       	cbi	0x05, 0	; 5
	OUTPUT(LCD_E);		CLEAR(LCD_E);
     790:	56 9a       	sbi	0x0a, 6	; 10
     792:	5e 98       	cbi	0x0b, 6	; 11
	OUTPUT(LCD_RW); 	CLEAR(LCD_RW);
     794:	57 9a       	sbi	0x0a, 7	; 10
     796:	5f 98       	cbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     798:	2f ef       	ldi	r18, 0xFF	; 255
     79a:	81 ee       	ldi	r24, 0xE1	; 225
     79c:	94 e0       	ldi	r25, 0x04	; 4
     79e:	21 50       	subi	r18, 0x01	; 1
     7a0:	80 40       	sbci	r24, 0x00	; 0
     7a2:	90 40       	sbci	r25, 0x00	; 0
     7a4:	e1 f7       	brne	.-8      	; 0x79e <lcd_init+0x1a>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <lcd_init+0x24>
     7a8:	00 00       	nop
	return(tmp);
}

// lcd_set_type_command()
static inline void lcd_set_type_command(){
	CLEAR(LCD_RS);
     7aa:	28 98       	cbi	0x05, 0	; 5
	// wait 100msec
	_delay_ms(100);
	lcd_set_type_command();

	// do reset
	lcd_write_nibble(0x03);
     7ac:	83 e0       	ldi	r24, 0x03	; 3
     7ae:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
     7b2:	8f eb       	ldi	r24, 0xBF	; 191
     7b4:	9d e5       	ldi	r25, 0x5D	; 93
     7b6:	01 97       	sbiw	r24, 0x01	; 1
     7b8:	f1 f7       	brne	.-4      	; 0x7b6 <lcd_init+0x32>
     7ba:	00 c0       	rjmp	.+0      	; 0x7bc <lcd_init+0x38>
     7bc:	00 00       	nop
	_delay_ms(6);
	lcd_write_nibble(0x03);
     7be:	83 e0       	ldi	r24, 0x03	; 3
     7c0:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c4:	87 e5       	ldi	r24, 0x57	; 87
     7c6:	92 e0       	ldi	r25, 0x02	; 2
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <lcd_init+0x44>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <lcd_init+0x4a>
     7ce:	00 00       	nop
	_delay_us(150);
	lcd_write_nibble(0x03);
     7d0:	83 e0       	ldi	r24, 0x03	; 3
     7d2:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
     7d6:	87 e5       	ldi	r24, 0x57	; 87
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	f1 f7       	brne	.-4      	; 0x7da <lcd_init+0x56>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <lcd_init+0x5c>
     7e0:	00 00       	nop
	_delay_us(150);
  
	// write 0010 (data length 4 bits)
	lcd_write_nibble(0x02);
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_write_nibble>
     7e8:	9a ed       	ldi	r25, 0xDA	; 218
     7ea:	9a 95       	dec	r25
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <lcd_init+0x66>
     7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <lcd_init+0x6c>
	_delay_us(41);
	// set to 2 lines, font 5x8
	lcd_write_byte(0x28);
     7f0:	88 e2       	ldi	r24, 0x28	; 40
     7f2:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_write_byte>
	// enable LCD
	lcd_write_byte(0x0c);
     7f6:	8c e0       	ldi	r24, 0x0C	; 12
     7f8:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_write_byte>
	// set entry mode
	lcd_write_byte(0x06);
     7fc:	86 e0       	ldi	r24, 0x06	; 6
     7fe:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_write_byte>

	// set cursor/display shift
	lcd_write_byte(0x14);
     802:	84 e1       	ldi	r24, 0x14	; 20
     804:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_write_byte>

	// clear and home
	lcd_clear_and_home();
     808:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_clear_and_home>
     80c:	08 95       	ret

0000080e <__vector_7>:
												};

// ms timer interrupt
volatile uint32_t msNow;
uint32_t msBlinkStamp;
ISR(TIMER2_COMPA_vect, ISR_NOBLOCK){
     80e:	78 94       	sei
     810:	1f 92       	push	r1
     812:	0f 92       	push	r0
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	0f 92       	push	r0
     818:	11 24       	eor	r1, r1
     81a:	4f 93       	push	r20
     81c:	5f 93       	push	r21
     81e:	6f 93       	push	r22
     820:	7f 93       	push	r23
     822:	8f 93       	push	r24
     824:	9f 93       	push	r25
     826:	af 93       	push	r26
     828:	bf 93       	push	r27
	msNow++;		// increment the counter
     82a:	80 91 21 01 	lds	r24, 0x0121
     82e:	90 91 22 01 	lds	r25, 0x0122
     832:	a0 91 23 01 	lds	r26, 0x0123
     836:	b0 91 24 01 	lds	r27, 0x0124
     83a:	01 96       	adiw	r24, 0x01	; 1
     83c:	a1 1d       	adc	r26, r1
     83e:	b1 1d       	adc	r27, r1
     840:	80 93 21 01 	sts	0x0121, r24
     844:	90 93 22 01 	sts	0x0122, r25
     848:	a0 93 23 01 	sts	0x0123, r26
     84c:	b0 93 24 01 	sts	0x0124, r27
	if(in_programming_mode){
     850:	80 91 08 01 	lds	r24, 0x0108
     854:	88 23       	and	r24, r24
     856:	61 f1       	breq	.+88     	; 0x8b0 <__vector_7+0xa2>
		if(msNow - msBlinkStamp > 50){		// blink delay ms
     858:	80 91 21 01 	lds	r24, 0x0121
     85c:	90 91 22 01 	lds	r25, 0x0122
     860:	a0 91 23 01 	lds	r26, 0x0123
     864:	b0 91 24 01 	lds	r27, 0x0124
     868:	40 91 0a 01 	lds	r20, 0x010A
     86c:	50 91 0b 01 	lds	r21, 0x010B
     870:	60 91 0c 01 	lds	r22, 0x010C
     874:	70 91 0d 01 	lds	r23, 0x010D
     878:	84 1b       	sub	r24, r20
     87a:	95 0b       	sbc	r25, r21
     87c:	a6 0b       	sbc	r26, r22
     87e:	b7 0b       	sbc	r27, r23
     880:	c3 97       	sbiw	r24, 0x33	; 51
     882:	a1 05       	cpc	r26, r1
     884:	b1 05       	cpc	r27, r1
     886:	a0 f0       	brcs	.+40     	; 0x8b0 <__vector_7+0xa2>
			msBlinkStamp = msNow;
     888:	80 91 21 01 	lds	r24, 0x0121
     88c:	90 91 22 01 	lds	r25, 0x0122
     890:	a0 91 23 01 	lds	r26, 0x0123
     894:	b0 91 24 01 	lds	r27, 0x0124
     898:	80 93 0a 01 	sts	0x010A, r24
     89c:	90 93 0b 01 	sts	0x010B, r25
     8a0:	a0 93 0c 01 	sts	0x010C, r26
     8a4:	b0 93 0d 01 	sts	0x010D, r27
			TOGGLE(READY_LED);
     8a8:	98 b1       	in	r25, 0x08	; 8
     8aa:	80 e2       	ldi	r24, 0x20	; 32
     8ac:	89 27       	eor	r24, r25
     8ae:	88 b9       	out	0x08, r24	; 8
		}
	}
}
     8b0:	bf 91       	pop	r27
     8b2:	af 91       	pop	r26
     8b4:	9f 91       	pop	r25
     8b6:	8f 91       	pop	r24
     8b8:	7f 91       	pop	r23
     8ba:	6f 91       	pop	r22
     8bc:	5f 91       	pop	r21
     8be:	4f 91       	pop	r20
     8c0:	0f 90       	pop	r0
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	0f 90       	pop	r0
     8c6:	1f 90       	pop	r1
     8c8:	18 95       	reti

000008ca <uart_read_q>:
// the buffer must be large enough to handle incoming data or
// it will wrap and overwrite. For us this is page size plus
// a few bytes.
uint8_t uart_read_q(void){
	uint8_t data;
	while(qout==qin);
     8ca:	90 91 09 01 	lds	r25, 0x0109
     8ce:	80 91 20 01 	lds	r24, 0x0120
     8d2:	98 17       	cp	r25, r24
     8d4:	d1 f3       	breq	.-12     	; 0x8ca <uart_read_q>
	data=q_buff[qout++];
     8d6:	e0 91 09 01 	lds	r30, 0x0109
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	8e 0f       	add	r24, r30
     8de:	80 93 09 01 	sts	0x0109, r24
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	e0 5b       	subi	r30, 0xB0	; 176
     8e6:	fe 4f       	sbci	r31, 0xFE	; 254
     8e8:	80 81       	ld	r24, Z
	if(qout==Q_SIZE) qout=0;
     8ea:	90 91 09 01 	lds	r25, 0x0109
     8ee:	90 38       	cpi	r25, 0x80	; 128
     8f0:	11 f4       	brne	.+4      	; 0x8f6 <uart_read_q+0x2c>
     8f2:	10 92 09 01 	sts	0x0109, r1
	return(data);
}
     8f6:	08 95       	ret

000008f8 <__vector_18>:

// get the incoming character and put it in the buffer
ISR(USART_RX_vect, ISR_BLOCK){
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	8f 93       	push	r24
     904:	ef 93       	push	r30
     906:	ff 93       	push	r31
	q_buff[qin++]=UDR0;
     908:	e0 91 20 01 	lds	r30, 0x0120
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	8e 0f       	add	r24, r30
     910:	80 93 20 01 	sts	0x0120, r24
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	80 91 c6 00 	lds	r24, 0x00C6
     91a:	e0 5b       	subi	r30, 0xB0	; 176
     91c:	fe 4f       	sbci	r31, 0xFE	; 254
     91e:	80 83       	st	Z, r24
	if(qin==Q_SIZE) qin=0;
     920:	80 91 20 01 	lds	r24, 0x0120
     924:	80 38       	cpi	r24, 0x80	; 128
     926:	11 f4       	brne	.+4      	; 0x92c <__stack+0x2d>
     928:	10 92 20 01 	sts	0x0120, r1
}
     92c:	ff 91       	pop	r31
     92e:	ef 91       	pop	r30
     930:	8f 91       	pop	r24
     932:	0f 90       	pop	r0
     934:	0f be       	out	0x3f, r0	; 63
     936:	0f 90       	pop	r0
     938:	1f 90       	pop	r1
     93a:	18 95       	reti

0000093c <uart_writeX>:
void uart_writeX(char x) {
		// wait for empty receive buffer
		while ((UCSR0A & (1<<UDRE0))==0);
     93c:	90 91 c0 00 	lds	r25, 0x00C0
     940:	95 ff       	sbrs	r25, 5
     942:	fc cf       	rjmp	.-8      	; 0x93c <uart_writeX>
		// send
		UDR0 = x;
     944:	80 93 c6 00 	sts	0x00C6, r24
     948:	08 95       	ret

0000094a <uart_write_PSTR>:
	}

// simply send a flash const string to avrdude
void uart_write_PSTR(const char *data){
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
	int i;
	for(i=0;pgm_read_byte_near((char*)&data[i]);i++)
     94e:	fc 01       	movw	r30, r24
     950:	24 91       	lpm	r18, Z
     952:	ec 01       	movw	r28, r24
     954:	21 96       	adiw	r28, 0x01	; 1
     956:	22 23       	and	r18, r18
     958:	31 f0       	breq	.+12     	; 0x966 <uart_write_PSTR+0x1c>
		uart_writeX(pgm_read_byte_near((char*)&data[i]));
     95a:	fc 01       	movw	r30, r24
     95c:	84 91       	lpm	r24, Z
     95e:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
     962:	ce 01       	movw	r24, r28
     964:	f4 cf       	rjmp	.-24     	; 0x94e <uart_write_PSTR+0x4>
}
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	08 95       	ret

0000096c <spi_transfer>:

uint8_t spi_transfer(uint8_t send){
	SPDR = send;
     96c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
     96e:	0d b4       	in	r0, 0x2d	; 45
     970:	07 fe       	sbrs	r0, 7
     972:	fd cf       	rjmp	.-6      	; 0x96e <spi_transfer+0x2>
	return(SPDR);
     974:	8e b5       	in	r24, 0x2e	; 46
}
     976:	08 95       	ret

00000978 <write_tpi>:
// SPI code comes from http://junkplusarduino.blogspot.jp/p/attiny10-resources.html
// send a byte in one TPI frame (12 bits)
// (1 start + 8 data + 1 parity + 2 stop)
// using 2 SPI data bytes (2 x 8 = 16 clocks)
// (with 4 extra idle bits)
void write_tpi(uint8_t data){
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
	if(error) return;
     97c:	90 91 3e 01 	lds	r25, 0x013E
     980:	91 11       	cpse	r25, r1
     982:	1f c0       	rjmp	.+62     	; 0x9c2 <write_tpi+0x4a>
     984:	d8 2f       	mov	r29, r24
  // compute partiy bit
  uint8_t par = data;
  par ^= (par >> 4); // b[7:4] (+) b[3:0]
     986:	28 2f       	mov	r18, r24
     988:	22 95       	swap	r18
     98a:	2f 70       	andi	r18, 0x0F	; 15
     98c:	28 27       	eor	r18, r24
  par ^= (par >> 2); // b[3:2] (+) b[1:0]
     98e:	82 2f       	mov	r24, r18
     990:	86 95       	lsr	r24
     992:	86 95       	lsr	r24
     994:	28 27       	eor	r18, r24
  par ^= (par >> 1); // b[1] (+) b[0]
     996:	c2 2f       	mov	r28, r18
     998:	c6 95       	lsr	r28
     99a:	c2 27       	eor	r28, r18

  // REMEMBER: this is in LSBfirst mode and idle is high
  // (2 idle) + (1 start bit) + (data[4:0])
  spi_transfer(0x03 | (data << 3));
     99c:	28 e0       	ldi	r18, 0x08	; 8
     99e:	d2 9f       	mul	r29, r18
     9a0:	c0 01       	movw	r24, r0
     9a2:	11 24       	eor	r1, r1
     9a4:	83 60       	ori	r24, 0x03	; 3
     9a6:	0e 94 b6 04 	call	0x96c	; 0x96c <spi_transfer>
  // (data[7:5]) + (1 parity) + (2 stop bits) + (2 idle)
  spi_transfer(0xf0 | (par << 3) | (data >> 5));
     9aa:	8d 2f       	mov	r24, r29
     9ac:	82 95       	swap	r24
     9ae:	86 95       	lsr	r24
     9b0:	87 70       	andi	r24, 0x07	; 7
     9b2:	80 6f       	ori	r24, 0xF0	; 240
     9b4:	98 e0       	ldi	r25, 0x08	; 8
     9b6:	c9 9f       	mul	r28, r25
     9b8:	90 01       	movw	r18, r0
     9ba:	11 24       	eor	r1, r1
     9bc:	82 2b       	or	r24, r18
     9be:	0e 94 b6 04 	call	0x96c	; 0x96c <spi_transfer>
}
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	08 95       	ret

000009c8 <read_tpi>:

// receive TPI 12-bit format byte data
// via SPI 2 bytes (16 clocks) or 3 bytes (24 clocks)
uint8_t read_tpi( void ){
     9c8:	cf 92       	push	r12
     9ca:	df 92       	push	r13
     9cc:	ef 92       	push	r14
     9ce:	ff 92       	push	r15
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
	if(error) return(0);
     9d4:	c0 91 3e 01 	lds	r28, 0x013E
     9d8:	c1 11       	cpse	r28, r1
     9da:	38 c0       	rjmp	.+112    	; 0xa4c <read_tpi+0x84>
	uint32_t readTimeStamp = msNow;
     9dc:	c0 90 21 01 	lds	r12, 0x0121
     9e0:	d0 90 22 01 	lds	r13, 0x0122
     9e4:	e0 90 23 01 	lds	r14, 0x0123
     9e8:	f0 90 24 01 	lds	r15, 0x0124
  uint8_t b1, b2;
  // keep transmitting high(idle) while waiting for a start bit
  do {
		if(msNow - readTimeStamp > READ_TIMEOUT_MS){
     9ec:	80 91 21 01 	lds	r24, 0x0121
     9f0:	90 91 22 01 	lds	r25, 0x0122
     9f4:	a0 91 23 01 	lds	r26, 0x0123
     9f8:	b0 91 24 01 	lds	r27, 0x0124
     9fc:	8c 19       	sub	r24, r12
     9fe:	9d 09       	sbc	r25, r13
     a00:	ae 09       	sbc	r26, r14
     a02:	bf 09       	sbc	r27, r15
     a04:	85 36       	cpi	r24, 0x65	; 101
     a06:	91 05       	cpc	r25, r1
     a08:	a1 05       	cpc	r26, r1
     a0a:	b1 05       	cpc	r27, r1
     a0c:	28 f0       	brcs	.+10     	; 0xa18 <read_tpi+0x50>
			error = ERROR_TPI_READ_TIMEOUT;
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	80 93 3e 01 	sts	0x013E, r24
			SET(ERROR_LED);
     a14:	44 9a       	sbi	0x08, 4	; 8
     a16:	1b c0       	rjmp	.+54     	; 0xa4e <read_tpi+0x86>
			return(0);
		}
    b1 = spi_transfer(0xff);
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	0e 94 b6 04 	call	0x96c	; 0x96c <spi_transfer>
  } while (b1 == 0xff);
     a1e:	8f 3f       	cpi	r24, 0xFF	; 255
     a20:	29 f3       	breq	.-54     	; 0x9ec <read_tpi+0x24>
     a22:	d8 2f       	mov	r29, r24
  // get (partial) data bits
  b2 = spi_transfer(0xff);
     a24:	8f ef       	ldi	r24, 0xFF	; 255
     a26:	0e 94 b6 04 	call	0x96c	; 0x96c <spi_transfer>
     a2a:	c8 2f       	mov	r28, r24
  // if the first byte(b1) contains less than 4 data bits
  // we need to get a third byte to get the parity and stop bits
  if (0x0f == (0x0f & b1)) {
     a2c:	8d 2f       	mov	r24, r29
     a2e:	8f 70       	andi	r24, 0x0F	; 15
     a30:	8f 30       	cpi	r24, 0x0F	; 15
     a32:	49 f4       	brne	.+18     	; 0xa46 <read_tpi+0x7e>
    spi_transfer(0xff);
     a34:	8f ef       	ldi	r24, 0xFF	; 255
     a36:	0e 94 b6 04 	call	0x96c	; 0x96c <spi_transfer>
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <read_tpi+0x7e>
  }

  // now shift the bits into the right positions
  // b1 should hold only idle and start bits = 0b01111111
  while (0x7f != b1) { // data not aligned
    b2 <<= 1; // shift left data bits
     a3c:	cc 0f       	add	r28, r28
    if (0x80 & b1) { // carry from 1st byte
     a3e:	d7 fd       	sbrc	r29, 7
      b2 |= 1; // set bit
     a40:	c1 60       	ori	r28, 0x01	; 1
    }
    b1 <<= 1;
     a42:	dd 0f       	add	r29, r29
    b1 |= 0x01; // fill with idle bit (1)
     a44:	d1 60       	ori	r29, 0x01	; 1
    spi_transfer(0xff);
  }

  // now shift the bits into the right positions
  // b1 should hold only idle and start bits = 0b01111111
  while (0x7f != b1) { // data not aligned
     a46:	df 37       	cpi	r29, 0x7F	; 127
     a48:	c9 f7       	brne	.-14     	; 0xa3c <read_tpi+0x74>
     a4a:	01 c0       	rjmp	.+2      	; 0xa4e <read_tpi+0x86>
}

// receive TPI 12-bit format byte data
// via SPI 2 bytes (16 clocks) or 3 bytes (24 clocks)
uint8_t read_tpi( void ){
	if(error) return(0);
     a4c:	c0 e0       	ldi	r28, 0x00	; 0
    b1 <<= 1;
    b1 |= 0x01; // fill with idle bit (1)
  }
  // now the data byte is stored in b2
  return( b2 );
}
     a4e:	8c 2f       	mov	r24, r28
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	df 90       	pop	r13
     a5a:	cf 90       	pop	r12
     a5c:	08 95       	ret

00000a5e <write_nvm_command>:

// Send NVM Command to be exectued via TPI
void write_nvm_command(uint8_t nvm_command){
     a5e:	cf 93       	push	r28
     a60:	c8 2f       	mov	r28, r24
	write_tpi(SOUT | ((NVMCMD & 0XF0)<<1) | (NVMCMD & 0X0F));
     a62:	83 ef       	ldi	r24, 0xF3	; 243
     a64:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
	write_tpi(nvm_command);
     a68:	8c 2f       	mov	r24, r28
     a6a:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
}
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <write_nvm_address>:

// Send address of the NVM location to be accessed via TPI
void write_nvm_address(volatile uint16_t nvm_address){
     a72:	a2 e0       	ldi	r26, 0x02	; 2
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	ef e3       	ldi	r30, 0x3F	; 63
     a78:	f5 e0       	ldi	r31, 0x05	; 5
     a7a:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__+0x20>
     a7e:	9a 83       	std	Y+2, r25	; 0x02
     a80:	89 83       	std	Y+1, r24	; 0x01
	write_tpi(SSTPR);//Address Low Byte
     a82:	88 e6       	ldi	r24, 0x68	; 104
     a84:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
	write_tpi(((uint8_t)nvm_address & 0x00FF));
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	9a 81       	ldd	r25, Y+2	; 0x02
     a8c:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
	write_tpi(SSTPR | 0X01);//Address High Byte
     a90:	89 e6       	ldi	r24, 0x69	; 105
     a92:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
	write_tpi((uint8_t)(nvm_address >>8));
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	9a 81       	ldd	r25, Y+2	; 0x02
     a9a:	89 2f       	mov	r24, r25
     a9c:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
}
     aa0:	22 96       	adiw	r28, 0x02	; 2
     aa2:	e2 e0       	ldi	r30, 0x02	; 2
     aa4:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__+0x20>

00000aa8 <read_nvm_byte>:

// Read one byte from NVM via TPI
uint8_t read_nvm_byte(void){
	write_tpi(SLD_POSTINC);
     aa8:	84 e2       	ldi	r24, 0x24	; 36
     aaa:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
	return read_tpi();
     aae:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <read_tpi>
}
     ab2:	08 95       	ret

00000ab4 <write_nvm_word>:

// Write whole word to NVM  via TPI
void write_nvm_word(volatile uint16_t data){
     ab4:	a2 e0       	ldi	r26, 0x02	; 2
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	e0 e6       	ldi	r30, 0x60	; 96
     aba:	f5 e0       	ldi	r31, 0x05	; 5
     abc:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__+0x20>
     ac0:	9a 83       	std	Y+2, r25	; 0x02
     ac2:	89 83       	std	Y+1, r24	; 0x01
	write_tpi(SST_POSTINC);
     ac4:	84 e6       	ldi	r24, 0x64	; 100
     ac6:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
	write_tpi(data & 0X00FF); // low byte
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	9a 81       	ldd	r25, Y+2	; 0x02
     ace:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
	write_tpi(SST_POSTINC);
     ad2:	84 e6       	ldi	r24, 0x64	; 100
     ad4:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
	write_tpi(data >> 8); // high byte
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
     ada:	9a 81       	ldd	r25, Y+2	; 0x02
     adc:	89 2f       	mov	r24, r25
     ade:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
}
     ae2:	22 96       	adiw	r28, 0x02	; 2
     ae4:	e2 e0       	ldi	r30, 0x02	; 2
     ae6:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__+0x20>

00000aea <nvm_busy>:

// Check if NVM is busy by reading NVMCSR
bool nvm_busy(void){
	write_tpi(SIN |((NVMCSR & 0XF0)<<1) | (NVMCSR & 0X0F));
     aea:	82 e7       	ldi	r24, 0x72	; 114
     aec:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
	if(read_tpi() == 0x80) return true;
     af0:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <read_tpi>
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	80 38       	cpi	r24, 0x80	; 128
     af8:	09 f0       	breq	.+2      	; 0xafc <nvm_busy+0x12>
     afa:	90 e0       	ldi	r25, 0x00	; 0
	return false;
}
     afc:	89 2f       	mov	r24, r25
     afe:	08 95       	ret

00000b00 <tpi_leave_programming_mode>:
	return(TPI_ERROR);
}

// 
void tpi_leave_programming_mode(void){
	in_programming_mode = false;
     b00:	10 92 08 01 	sts	0x0108, r1
	SET(READY_LED);
     b04:	45 9a       	sbi	0x08, 5	; 8
	// disable NVM programming
	write_tpi(SSTCS | TPISR);
     b06:	80 ec       	ldi	r24, 0xC0	; 192
     b08:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
	write_tpi(0);
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b12:	8f e3       	ldi	r24, 0x3F	; 63
     b14:	9c e9       	ldi	r25, 0x9C	; 156
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	f1 f7       	brne	.-4      	; 0xb16 <tpi_leave_programming_mode+0x16>
     b1a:	00 c0       	rjmp	.+0      	; 0xb1c <tpi_leave_programming_mode+0x1c>
     b1c:	00 00       	nop
	_delay_ms(10);
	// disable spi and set pins tri-state
	SPCR = 0;
     b1e:	1c bc       	out	0x2c, r1	; 44
	PULLUP_OFF(SCK);
     b20:	25 98       	cbi	0x04, 5	; 4
     b22:	2d 98       	cbi	0x05, 5	; 5
	PULLUP_OFF(MOSI);
     b24:	23 98       	cbi	0x04, 3	; 4
     b26:	2b 98       	cbi	0x05, 3	; 5
	PULLUP_OFF(MISO);
     b28:	24 98       	cbi	0x04, 4	; 4
     b2a:	2c 98       	cbi	0x05, 4	; 5
	// reset target mcu
	CLEAR(TPI_RESET);
     b2c:	2a 98       	cbi	0x05, 2	; 5
     b2e:	8f e3       	ldi	r24, 0x3F	; 63
     b30:	9c e9       	ldi	r25, 0x9C	; 156
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	f1 f7       	brne	.-4      	; 0xb32 <tpi_leave_programming_mode+0x32>
     b36:	00 c0       	rjmp	.+0      	; 0xb38 <tpi_leave_programming_mode+0x38>
     b38:	00 00       	nop
     b3a:	08 95       	ret

00000b3c <sendBreaks>:
	_delay_ms(10);
}

// send 2 breaks over tpi
void sendBreaks(void){
	SPCR = 0;						// disable spi 
     b3c:	1c bc       	out	0x2c, r1	; 44
	OUTPUT(SCK);				// but set up ports
     b3e:	25 9a       	sbi	0x04, 5	; 4
	OUTPUT(MOSI);				// so we can bit bang
     b40:	23 9a       	sbi	0x04, 3	; 4
	PULLUP_OFF(MISO);		// a couple of break characters
     b42:	24 98       	cbi	0x04, 4	; 4
     b44:	2c 98       	cbi	0x05, 4	; 5
	uint8_t i;
	SET(SCK);
     b46:	2d 9a       	sbi	0x05, 5	; 5
	CLEAR(MOSI);
     b48:	2b 98       	cbi	0x05, 3	; 5
     b4a:	8c e0       	ldi	r24, 0x0C	; 12
     b4c:	ef e9       	ldi	r30, 0x9F	; 159
     b4e:	ff e0       	ldi	r31, 0x0F	; 15
     b50:	31 97       	sbiw	r30, 0x01	; 1
     b52:	f1 f7       	brne	.-4      	; 0xb50 <sendBreaks+0x14>
     b54:	00 c0       	rjmp	.+0      	; 0xb56 <sendBreaks+0x1a>
     b56:	00 00       	nop
	for(i=0;i<12;i++){	// 12 bits in a break
		_delay_ms(1);
		CLEAR(SCK);
     b58:	2d 98       	cbi	0x05, 5	; 5
     b5a:	ef e9       	ldi	r30, 0x9F	; 159
     b5c:	ff e0       	ldi	r31, 0x0F	; 15
     b5e:	31 97       	sbiw	r30, 0x01	; 1
     b60:	f1 f7       	brne	.-4      	; 0xb5e <sendBreaks+0x22>
     b62:	00 c0       	rjmp	.+0      	; 0xb64 <sendBreaks+0x28>
     b64:	00 00       	nop
		_delay_ms(1);
		SET(SCK);
     b66:	2d 9a       	sbi	0x05, 5	; 5
     b68:	81 50       	subi	r24, 0x01	; 1
	OUTPUT(MOSI);				// so we can bit bang
	PULLUP_OFF(MISO);		// a couple of break characters
	uint8_t i;
	SET(SCK);
	CLEAR(MOSI);
	for(i=0;i<12;i++){	// 12 bits in a break
     b6a:	81 f7       	brne	.-32     	; 0xb4c <sendBreaks+0x10>
     b6c:	8f e9       	ldi	r24, 0x9F	; 159
     b6e:	9f e0       	ldi	r25, 0x0F	; 15
     b70:	01 97       	sbiw	r24, 0x01	; 1
     b72:	f1 f7       	brne	.-4      	; 0xb70 <sendBreaks+0x34>
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <sendBreaks+0x3a>
     b76:	00 00       	nop
		CLEAR(SCK);
		_delay_ms(1);
		SET(SCK);
	}
	_delay_ms(1);
	SET(MOSI);					// separate breaks
     b78:	2b 9a       	sbi	0x05, 3	; 5
     b7a:	ef e3       	ldi	r30, 0x3F	; 63
     b7c:	ff e1       	ldi	r31, 0x1F	; 31
     b7e:	31 97       	sbiw	r30, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <sendBreaks+0x42>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <sendBreaks+0x48>
     b84:	00 00       	nop
	_delay_ms(2);
	CLEAR(MOSI);
     b86:	2b 98       	cbi	0x05, 3	; 5
     b88:	8c e0       	ldi	r24, 0x0C	; 12
     b8a:	ef e9       	ldi	r30, 0x9F	; 159
     b8c:	ff e0       	ldi	r31, 0x0F	; 15
     b8e:	31 97       	sbiw	r30, 0x01	; 1
     b90:	f1 f7       	brne	.-4      	; 0xb8e <sendBreaks+0x52>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <sendBreaks+0x58>
     b94:	00 00       	nop
	for(i=0;i<12;i++){	// second 12 bits for a break char
		_delay_ms(1);
		CLEAR(SCK);
     b96:	2d 98       	cbi	0x05, 5	; 5
     b98:	ef e9       	ldi	r30, 0x9F	; 159
     b9a:	ff e0       	ldi	r31, 0x0F	; 15
     b9c:	31 97       	sbiw	r30, 0x01	; 1
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <sendBreaks+0x60>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <sendBreaks+0x66>
     ba2:	00 00       	nop
		_delay_ms(1);
		SET(SCK);
     ba4:	2d 9a       	sbi	0x05, 5	; 5
     ba6:	81 50       	subi	r24, 0x01	; 1
	}
	_delay_ms(1);
	SET(MOSI);					// separate breaks
	_delay_ms(2);
	CLEAR(MOSI);
	for(i=0;i<12;i++){	// second 12 bits for a break char
     ba8:	81 f7       	brne	.-32     	; 0xb8a <sendBreaks+0x4e>
     baa:	8f e9       	ldi	r24, 0x9F	; 159
     bac:	9f e0       	ldi	r25, 0x0F	; 15
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	f1 f7       	brne	.-4      	; 0xbae <sendBreaks+0x72>
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <sendBreaks+0x78>
     bb4:	00 00       	nop
		CLEAR(SCK);
		_delay_ms(1);
		SET(SCK);
	}
	_delay_ms(1);
	SET(MOSI);
     bb6:	2b 9a       	sbi	0x05, 3	; 5
     bb8:	ef e3       	ldi	r30, 0x3F	; 63
     bba:	ff e1       	ldi	r31, 0x1F	; 31
     bbc:	31 97       	sbiw	r30, 0x01	; 1
     bbe:	f1 f7       	brne	.-4      	; 0xbbc <sendBreaks+0x80>
     bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <sendBreaks+0x86>
     bc2:	00 00       	nop
	_delay_ms(2);
	PULLUP_OFF(SCK);
     bc4:	25 98       	cbi	0x04, 5	; 4
     bc6:	2d 98       	cbi	0x05, 5	; 5
	PULLUP_OFF(MOSI);
     bc8:	23 98       	cbi	0x04, 3	; 4
     bca:	2b 98       	cbi	0x05, 3	; 5
     bcc:	08 95       	ret

00000bce <tpi_enter_programming_mode>:
}

// enter programming mode and set guard time
uint8_t tpi_enter_programming_mode(void){
     bce:	a7 e0       	ldi	r26, 0x07	; 7
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	ed ee       	ldi	r30, 0xED	; 237
     bd4:	f5 e0       	ldi	r31, 0x05	; 5
     bd6:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__prologue_saves__+0x1c>
	if(!in_programming_mode){
     bda:	80 91 08 01 	lds	r24, 0x0108
     bde:	81 11       	cpse	r24, r1
     be0:	6b c0       	rjmp	.+214    	; 0xcb8 <tpi_enter_programming_mode+0xea>
		// reset error status
		CLEAR(ERROR_LED);
     be2:	44 98       	cbi	0x08, 4	; 8
		error = 0;
     be4:	10 92 3e 01 	sts	0x013E, r1

		// power to TPI_RESET 
		OUTPUT(TPI_RESET);
     be8:	22 9a       	sbi	0x04, 2	; 4
		// this puts the chip in programming mode
		// either pull down reset or enable the 12v supply
		SET(TPI_RESET);
     bea:	2a 9a       	sbi	0x05, 2	; 5
     bec:	8f e3       	ldi	r24, 0x3F	; 63
     bee:	9c e9       	ldi	r25, 0x9C	; 156
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	f1 f7       	brne	.-4      	; 0xbf0 <tpi_enter_programming_mode+0x22>
     bf4:	00 c0       	rjmp	.+0      	; 0xbf6 <tpi_enter_programming_mode+0x28>
     bf6:	00 00       	nop
		_delay_ms(10); // give time for 12v rise for Max662 or similar

		// send a couple of breaks to sync with target chip
		sendBreaks();
     bf8:	0e 94 9e 05 	call	0xb3c	; 0xb3c <sendBreaks>

		// set up spi
		OUTPUT(SCK);
     bfc:	25 9a       	sbi	0x04, 5	; 4
		OUTPUT(MOSI);
     bfe:	23 9a       	sbi	0x04, 3	; 4
		PULLUP_OFF(MISO);
     c00:	24 98       	cbi	0x04, 4	; 4
     c02:	2c 98       	cbi	0x05, 4	; 5
		SPCR = _BV(SPE) | _BV(DORD) | _BV(MSTR) | _BV(SPR0);	// DIV8, 2MHz clock, tiny10 max
     c04:	81 e7       	ldi	r24, 0x71	; 113
     c06:	8c bd       	out	0x2c, r24	; 44
		SPSR = _BV(SPI2X);
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	8d bd       	out	0x2d, r24	; 45
     c0c:	8f e9       	ldi	r24, 0x9F	; 159
     c0e:	9f e0       	ldi	r25, 0x0F	; 15
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	f1 f7       	brne	.-4      	; 0xc10 <tpi_enter_programming_mode+0x42>
     c14:	00 c0       	rjmp	.+0      	; 0xc16 <tpi_enter_programming_mode+0x48>
     c16:	00 00       	nop

    // enter TPI programming mode
    _delay_ms(1); // t_RST min = 400 ns @ Vcc = 5 V

		spi_transfer(0xff); // activate TPI by emitting
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	0e 94 b6 04 	call	0x96c	; 0x96c <spi_transfer>
		spi_transfer(0xff); // 16 or more pulses on TPICLK
     c1e:	8f ef       	ldi	r24, 0xFF	; 255
     c20:	0e 94 b6 04 	call	0x96c	; 0x96c <spi_transfer>
		spi_transfer(0xff); // while holding TPIDATA to "1"
     c24:	8f ef       	ldi	r24, 0xFF	; 255
     c26:	0e 94 b6 04 	call	0x96c	; 0x96c <spi_transfer>

		// enable programming with key value
		uint64_t key = NVM_PROGRAM_ENABLE;
		write_tpi(SKEY);
     c2a:	80 ee       	ldi	r24, 0xE0	; 224
     c2c:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
     c30:	18 e0       	ldi	r17, 0x08	; 8
		spi_transfer(0xff); // activate TPI by emitting
		spi_transfer(0xff); // 16 or more pulses on TPICLK
		spi_transfer(0xff); // while holding TPIDATA to "1"

		// enable programming with key value
		uint64_t key = NVM_PROGRAM_ENABLE;
     c32:	2f ef       	ldi	r18, 0xFF	; 255
     c34:	38 e8       	ldi	r19, 0x88	; 136
     c36:	48 ed       	ldi	r20, 0xD8	; 216
     c38:	5d ec       	ldi	r21, 0xCD	; 205
     c3a:	65 e4       	ldi	r22, 0x45	; 69
     c3c:	7b ea       	ldi	r23, 0xAB	; 171
     c3e:	09 e8       	ldi	r16, 0x89	; 137
     c40:	92 e1       	ldi	r25, 0x12	; 18
		write_tpi(SKEY);
		for(int8_t i=0;i<8;i++){
			write_tpi(key & 0xFF);
     c42:	82 2f       	mov	r24, r18
     c44:	29 83       	std	Y+1, r18	; 0x01
     c46:	3a 83       	std	Y+2, r19	; 0x02
     c48:	4b 83       	std	Y+3, r20	; 0x03
     c4a:	5c 83       	std	Y+4, r21	; 0x04
     c4c:	6d 83       	std	Y+5, r22	; 0x05
     c4e:	7e 83       	std	Y+6, r23	; 0x06
     c50:	9f 83       	std	Y+7, r25	; 0x07
     c52:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
			key >>= 8;
     c56:	29 81       	ldd	r18, Y+1	; 0x01
     c58:	3a 81       	ldd	r19, Y+2	; 0x02
     c5a:	4b 81       	ldd	r20, Y+3	; 0x03
     c5c:	5c 81       	ldd	r21, Y+4	; 0x04
     c5e:	6d 81       	ldd	r22, Y+5	; 0x05
     c60:	7e 81       	ldd	r23, Y+6	; 0x06
     c62:	80 2f       	mov	r24, r16
     c64:	9f 81       	ldd	r25, Y+7	; 0x07
     c66:	08 e0       	ldi	r16, 0x08	; 8
     c68:	0e 94 95 13 	call	0x272a	; 0x272a <__lshrdi3>
     c6c:	08 2f       	mov	r16, r24
     c6e:	11 50       	subi	r17, 0x01	; 1
		spi_transfer(0xff); // while holding TPIDATA to "1"

		// enable programming with key value
		uint64_t key = NVM_PROGRAM_ENABLE;
		write_tpi(SKEY);
		for(int8_t i=0;i<8;i++){
     c70:	41 f7       	brne	.-48     	; 0xc42 <tpi_enter_programming_mode+0x74>
     c72:	16 e6       	ldi	r17, 0x66	; 102
			key >>= 8;
		}
		// wait for NVMEM to be set in TPISR
		uint8_t enabled = 0;
		uint8_t nvmemTries = 0;
		while(enabled==0 && error == 0){
     c74:	80 91 3e 01 	lds	r24, 0x013E
     c78:	81 11       	cpse	r24, r1
     c7a:	0e c0       	rjmp	.+28     	; 0xc98 <tpi_enter_programming_mode+0xca>
     c7c:	11 50       	subi	r17, 0x01	; 1
			if(nvmemTries++ > 100){
     c7e:	29 f4       	brne	.+10     	; 0xc8a <tpi_enter_programming_mode+0xbc>
				error = ERROR_TPI_NVM_TIMEOUT;
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	80 93 3e 01 	sts	0x013E, r24
				SET(ERROR_LED);
     c86:	44 9a       	sbi	0x08, 4	; 8
     c88:	07 c0       	rjmp	.+14     	; 0xc98 <tpi_enter_programming_mode+0xca>
				break;
			}
			write_tpi(SLDCS | TPISR);
     c8a:	80 e8       	ldi	r24, 0x80	; 128
     c8c:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
		 	enabled = read_tpi() & NVMEM;
     c90:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <read_tpi>
			key >>= 8;
		}
		// wait for NVMEM to be set in TPISR
		uint8_t enabled = 0;
		uint8_t nvmemTries = 0;
		while(enabled==0 && error == 0){
     c94:	81 ff       	sbrs	r24, 1
     c96:	ee cf       	rjmp	.-36     	; 0xc74 <tpi_enter_programming_mode+0xa6>
				break;
			}
			write_tpi(SLDCS | TPISR);
		 	enabled = read_tpi() & NVMEM;
		}
		if(error == 0){
     c98:	80 91 3e 01 	lds	r24, 0x013E
     c9c:	81 11       	cpse	r24, r1
     c9e:	0a c0       	rjmp	.+20     	; 0xcb4 <tpi_enter_programming_mode+0xe6>
			// set guard time
			write_tpi(SSTCS | TPIPCR);
     ca0:	82 ec       	ldi	r24, 0xC2	; 194
     ca2:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
			write_tpi(GUARD_TIME_2);
     ca6:	86 e0       	ldi	r24, 0x06	; 6
     ca8:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
			in_programming_mode = true;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	80 93 08 01 	sts	0x0108, r24
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <tpi_enter_programming_mode+0xea>
		} else {
			tpi_leave_programming_mode();
     cb4:	0e 94 80 05 	call	0xb00	; 0xb00 <tpi_leave_programming_mode>
		}
	}
	return(TPI_OK);
}
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	27 96       	adiw	r28, 0x07	; 7
     cbc:	e4 e0       	ldi	r30, 0x04	; 4
     cbe:	0c 94 86 13 	jmp	0x270c	; 0x270c <__epilogue_restores__+0x1c>

00000cc2 <get_signature>:
}

// get the signature from the target device and load related info for the target.
// signature is 3 bytes read 1 at a time. The use to lookup dev info in table
uint8_t tpi_enter_programming_mode(void);
uint8_t get_signature(void){
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
		tpi_enter_programming_mode();
     cca:	0e 94 e7 05 	call	0xbce	; 0xbce <tpi_enter_programming_mode>
		write_nvm_command(NVMCMD_MEMORY_WRITE);
     cce:	8d e1       	ldi	r24, 0x1D	; 29
     cd0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <write_nvm_command>
		write_nvm_address(DEV_ID_START);
     cd4:	80 ec       	ldi	r24, 0xC0	; 192
     cd6:	9f e3       	ldi	r25, 0x3F	; 63
     cd8:	0e 94 39 05 	call	0xa72	; 0xa72 <write_nvm_address>
		for(uint8_t i=0; i<SIG_LEN; i++){
			AVR_Signature[i] = read_nvm_byte();
     cdc:	0e 94 54 05 	call	0xaa8	; 0xaa8 <read_nvm_byte>
     ce0:	80 93 3f 01 	sts	0x013F, r24
     ce4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <read_nvm_byte>
     ce8:	80 93 40 01 	sts	0x0140, r24
     cec:	0e 94 54 05 	call	0xaa8	; 0xaa8 <read_nvm_byte>
     cf0:	80 93 41 01 	sts	0x0141, r24
     cf4:	03 e7       	ldi	r16, 0x73	; 115
     cf6:	11 e0       	ldi	r17, 0x01	; 1
     cf8:	c0 e0       	ldi	r28, 0x00	; 0
     cfa:	d0 e0       	ldi	r29, 0x00	; 0
		}
		for(uint8_t i=0;i<DEVICE_COUNT;i++){
			if(!memcmp_P(AVR_Signature,avr_info[i].signature,SIG_LEN)){
     cfc:	43 e0       	ldi	r20, 0x03	; 3
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	b8 01       	movw	r22, r16
     d02:	8f e3       	ldi	r24, 0x3F	; 63
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	0e 94 9a 14 	call	0x2934	; 0x2934 <memcmp_P>
     d0a:	89 2b       	or	r24, r25
     d0c:	b9 f4       	brne	.+46     	; 0xd3c <get_signature+0x7a>
     d0e:	aa e2       	ldi	r26, 0x2A	; 42
     d10:	b1 e0       	ldi	r27, 0x01	; 1
     d12:	84 e1       	ldi	r24, 0x14	; 20
     d14:	8c 9f       	mul	r24, r28
     d16:	90 01       	movw	r18, r0
     d18:	8d 9f       	mul	r24, r29
     d1a:	30 0d       	add	r19, r0
     d1c:	11 24       	eor	r1, r1
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	fc 01       	movw	r30, r24
     d24:	e2 0f       	add	r30, r18
     d26:	f3 1f       	adc	r31, r19
     d28:	e7 59       	subi	r30, 0x97	; 151
     d2a:	fe 4f       	sbci	r31, 0xFE	; 254
				for(uint8_t j=0;j<sizeof(AVR_DEVICE);j++)
					((char*)&target_avr)[j] = pgm_read_byte_near(&((char*)&avr_info[i])[j]);
     d2c:	e4 91       	lpm	r30, Z
     d2e:	ed 93       	st	X+, r30
     d30:	01 96       	adiw	r24, 0x01	; 1
		for(uint8_t i=0; i<SIG_LEN; i++){
			AVR_Signature[i] = read_nvm_byte();
		}
		for(uint8_t i=0;i<DEVICE_COUNT;i++){
			if(!memcmp_P(AVR_Signature,avr_info[i].signature,SIG_LEN)){
				for(uint8_t j=0;j<sizeof(AVR_DEVICE);j++)
     d32:	84 31       	cpi	r24, 0x14	; 20
     d34:	91 05       	cpc	r25, r1
     d36:	a9 f7       	brne	.-22     	; 0xd22 <get_signature+0x60>
					((char*)&target_avr)[j] = pgm_read_byte_near(&((char*)&avr_info[i])[j]);
				return(TPI_OK);
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	07 c0       	rjmp	.+14     	; 0xd4a <get_signature+0x88>
     d3c:	21 96       	adiw	r28, 0x01	; 1
     d3e:	0c 5e       	subi	r16, 0xEC	; 236
     d40:	1f 4f       	sbci	r17, 0xFF	; 255
		write_nvm_command(NVMCMD_MEMORY_WRITE);
		write_nvm_address(DEV_ID_START);
		for(uint8_t i=0; i<SIG_LEN; i++){
			AVR_Signature[i] = read_nvm_byte();
		}
		for(uint8_t i=0;i<DEVICE_COUNT;i++){
     d42:	c4 30       	cpi	r28, 0x04	; 4
     d44:	d1 05       	cpc	r29, r1
     d46:	d1 f6       	brne	.-76     	; 0xcfc <get_signature+0x3a>
				for(uint8_t j=0;j<sizeof(AVR_DEVICE);j++)
					((char*)&target_avr)[j] = pgm_read_byte_near(&((char*)&avr_info[i])[j]);
				return(TPI_OK);
			}
		}
	return(TPI_ERROR);
     d48:	82 e0       	ldi	r24, 0x02	; 2
}
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	08 95       	ret

00000d54 <universal_read_fuse>:
	}
	return(TPI_OK);
}

// routines to process universal commands from avrdude
uint8_t universal_read_fuse(uint16_t address){
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	ec 01       	movw	r28, r24
	uart_read_q();
     d5a:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
	uart_read_q();
     d5e:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
	write_nvm_address(address);
     d62:	ce 01       	movw	r24, r28
     d64:	0e 94 39 05 	call	0xa72	; 0xa72 <write_nvm_address>
	uint8_t value = read_nvm_byte();
     d68:	0e 94 54 05 	call	0xaa8	; 0xaa8 <read_nvm_byte>
     d6c:	c8 2f       	mov	r28, r24
	uart_writeX(value);
     d6e:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
	uart_writeX('\r');
     d72:	8d e0       	ldi	r24, 0x0D	; 13
     d74:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
	return value;
}
     d78:	8c 2f       	mov	r24, r28
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	08 95       	ret

00000d80 <universal_write_fuse>:

void universal_write_fuse(uint16_t address, uint8_t value){
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	cf 93       	push	r28
     d86:	8c 01       	movw	r16, r24
     d88:	c6 2f       	mov	r28, r22
//	uart_read_q();
	// erase first
	write_nvm_command((uint8_t)NVMCMD_SECTION_ERASE);
     d8a:	84 e1       	ldi	r24, 0x14	; 20
     d8c:	0e 94 2f 05 	call	0xa5e	; 0xa5e <write_nvm_command>
	write_nvm_address(address);
     d90:	c8 01       	movw	r24, r16
     d92:	0e 94 39 05 	call	0xa72	; 0xa72 <write_nvm_address>
	write_nvm_word(0xFFFF);
     d96:	8f ef       	ldi	r24, 0xFF	; 255
     d98:	9f ef       	ldi	r25, 0xFF	; 255
     d9a:	0e 94 5a 05 	call	0xab4	; 0xab4 <write_nvm_word>
	while(nvm_busy());
     d9e:	0e 94 75 05 	call	0xaea	; 0xaea <nvm_busy>
     da2:	81 11       	cpse	r24, r1
     da4:	fc cf       	rjmp	.-8      	; 0xd9e <universal_write_fuse+0x1e>
	// then write new value
	write_nvm_command(NVMCMD_MEMORY_WRITE);
     da6:	8d e1       	ldi	r24, 0x1D	; 29
     da8:	0e 94 2f 05 	call	0xa5e	; 0xa5e <write_nvm_command>
	write_nvm_address(address);
     dac:	c8 01       	movw	r24, r16
     dae:	0e 94 39 05 	call	0xa72	; 0xa72 <write_nvm_address>
	write_nvm_word(0xFF00 | value);
     db2:	8c 2f       	mov	r24, r28
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	9f 6f       	ori	r25, 0xFF	; 255
     db8:	0e 94 5a 05 	call	0xab4	; 0xab4 <write_nvm_word>
	while(nvm_busy());
     dbc:	0e 94 75 05 	call	0xaea	; 0xaea <nvm_busy>
     dc0:	81 11       	cpse	r24, r1
     dc2:	fc cf       	rjmp	.-8      	; 0xdbc <universal_write_fuse+0x3c>
	uart_writeX(0x00);
     dc4:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
	uart_writeX('\r');
     dc8:	8d e0       	ldi	r24, 0x0D	; 13
     dca:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
}
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	08 95       	ret

00000dd6 <vfprintf>:
     dd6:	a3 e1       	ldi	r26, 0x13	; 19
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e1 ef       	ldi	r30, 0xF1	; 241
     ddc:	f6 e0       	ldi	r31, 0x06	; 6
     dde:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__prologue_saves__>
     de2:	6c 01       	movw	r12, r24
     de4:	4b 01       	movw	r8, r22
     de6:	2a 01       	movw	r4, r20
     de8:	fc 01       	movw	r30, r24
     dea:	17 82       	std	Z+7, r1	; 0x07
     dec:	16 82       	std	Z+6, r1	; 0x06
     dee:	83 81       	ldd	r24, Z+3	; 0x03
     df0:	81 ff       	sbrs	r24, 1
     df2:	43 c3       	rjmp	.+1670   	; 0x147a <vfprintf+0x6a4>
     df4:	ae 01       	movw	r20, r28
     df6:	4f 5f       	subi	r20, 0xFF	; 255
     df8:	5f 4f       	sbci	r21, 0xFF	; 255
     dfa:	3a 01       	movw	r6, r20
     dfc:	f6 01       	movw	r30, r12
     dfe:	93 81       	ldd	r25, Z+3	; 0x03
     e00:	f4 01       	movw	r30, r8
     e02:	93 fd       	sbrc	r25, 3
     e04:	85 91       	lpm	r24, Z+
     e06:	93 ff       	sbrs	r25, 3
     e08:	81 91       	ld	r24, Z+
     e0a:	4f 01       	movw	r8, r30
     e0c:	88 23       	and	r24, r24
     e0e:	09 f4       	brne	.+2      	; 0xe12 <vfprintf+0x3c>
     e10:	30 c3       	rjmp	.+1632   	; 0x1472 <vfprintf+0x69c>
     e12:	85 32       	cpi	r24, 0x25	; 37
     e14:	39 f4       	brne	.+14     	; 0xe24 <vfprintf+0x4e>
     e16:	93 fd       	sbrc	r25, 3
     e18:	85 91       	lpm	r24, Z+
     e1a:	93 ff       	sbrs	r25, 3
     e1c:	81 91       	ld	r24, Z+
     e1e:	4f 01       	movw	r8, r30
     e20:	85 32       	cpi	r24, 0x25	; 37
     e22:	39 f4       	brne	.+14     	; 0xe32 <vfprintf+0x5c>
     e24:	b6 01       	movw	r22, r12
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
     e2c:	52 01       	movw	r10, r4
     e2e:	25 01       	movw	r4, r10
     e30:	e5 cf       	rjmp	.-54     	; 0xdfc <vfprintf+0x26>
     e32:	10 e0       	ldi	r17, 0x00	; 0
     e34:	f1 2c       	mov	r15, r1
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	20 32       	cpi	r18, 0x20	; 32
     e3a:	a0 f4       	brcc	.+40     	; 0xe64 <vfprintf+0x8e>
     e3c:	8b 32       	cpi	r24, 0x2B	; 43
     e3e:	69 f0       	breq	.+26     	; 0xe5a <vfprintf+0x84>
     e40:	30 f4       	brcc	.+12     	; 0xe4e <vfprintf+0x78>
     e42:	80 32       	cpi	r24, 0x20	; 32
     e44:	59 f0       	breq	.+22     	; 0xe5c <vfprintf+0x86>
     e46:	83 32       	cpi	r24, 0x23	; 35
     e48:	69 f4       	brne	.+26     	; 0xe64 <vfprintf+0x8e>
     e4a:	20 61       	ori	r18, 0x10	; 16
     e4c:	2c c0       	rjmp	.+88     	; 0xea6 <vfprintf+0xd0>
     e4e:	8d 32       	cpi	r24, 0x2D	; 45
     e50:	39 f0       	breq	.+14     	; 0xe60 <vfprintf+0x8a>
     e52:	80 33       	cpi	r24, 0x30	; 48
     e54:	39 f4       	brne	.+14     	; 0xe64 <vfprintf+0x8e>
     e56:	21 60       	ori	r18, 0x01	; 1
     e58:	26 c0       	rjmp	.+76     	; 0xea6 <vfprintf+0xd0>
     e5a:	22 60       	ori	r18, 0x02	; 2
     e5c:	24 60       	ori	r18, 0x04	; 4
     e5e:	23 c0       	rjmp	.+70     	; 0xea6 <vfprintf+0xd0>
     e60:	28 60       	ori	r18, 0x08	; 8
     e62:	21 c0       	rjmp	.+66     	; 0xea6 <vfprintf+0xd0>
     e64:	27 fd       	sbrc	r18, 7
     e66:	27 c0       	rjmp	.+78     	; 0xeb6 <vfprintf+0xe0>
     e68:	30 ed       	ldi	r19, 0xD0	; 208
     e6a:	38 0f       	add	r19, r24
     e6c:	3a 30       	cpi	r19, 0x0A	; 10
     e6e:	78 f4       	brcc	.+30     	; 0xe8e <vfprintf+0xb8>
     e70:	26 ff       	sbrs	r18, 6
     e72:	06 c0       	rjmp	.+12     	; 0xe80 <vfprintf+0xaa>
     e74:	fa e0       	ldi	r31, 0x0A	; 10
     e76:	1f 9f       	mul	r17, r31
     e78:	30 0d       	add	r19, r0
     e7a:	11 24       	eor	r1, r1
     e7c:	13 2f       	mov	r17, r19
     e7e:	13 c0       	rjmp	.+38     	; 0xea6 <vfprintf+0xd0>
     e80:	4a e0       	ldi	r20, 0x0A	; 10
     e82:	f4 9e       	mul	r15, r20
     e84:	30 0d       	add	r19, r0
     e86:	11 24       	eor	r1, r1
     e88:	f3 2e       	mov	r15, r19
     e8a:	20 62       	ori	r18, 0x20	; 32
     e8c:	0c c0       	rjmp	.+24     	; 0xea6 <vfprintf+0xd0>
     e8e:	8e 32       	cpi	r24, 0x2E	; 46
     e90:	21 f4       	brne	.+8      	; 0xe9a <vfprintf+0xc4>
     e92:	26 fd       	sbrc	r18, 6
     e94:	ee c2       	rjmp	.+1500   	; 0x1472 <vfprintf+0x69c>
     e96:	20 64       	ori	r18, 0x40	; 64
     e98:	06 c0       	rjmp	.+12     	; 0xea6 <vfprintf+0xd0>
     e9a:	8c 36       	cpi	r24, 0x6C	; 108
     e9c:	11 f4       	brne	.+4      	; 0xea2 <vfprintf+0xcc>
     e9e:	20 68       	ori	r18, 0x80	; 128
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <vfprintf+0xd0>
     ea2:	88 36       	cpi	r24, 0x68	; 104
     ea4:	41 f4       	brne	.+16     	; 0xeb6 <vfprintf+0xe0>
     ea6:	f4 01       	movw	r30, r8
     ea8:	93 fd       	sbrc	r25, 3
     eaa:	85 91       	lpm	r24, Z+
     eac:	93 ff       	sbrs	r25, 3
     eae:	81 91       	ld	r24, Z+
     eb0:	4f 01       	movw	r8, r30
     eb2:	81 11       	cpse	r24, r1
     eb4:	c1 cf       	rjmp	.-126    	; 0xe38 <vfprintf+0x62>
     eb6:	9b eb       	ldi	r25, 0xBB	; 187
     eb8:	98 0f       	add	r25, r24
     eba:	93 30       	cpi	r25, 0x03	; 3
     ebc:	18 f4       	brcc	.+6      	; 0xec4 <vfprintf+0xee>
     ebe:	20 61       	ori	r18, 0x10	; 16
     ec0:	80 5e       	subi	r24, 0xE0	; 224
     ec2:	06 c0       	rjmp	.+12     	; 0xed0 <vfprintf+0xfa>
     ec4:	9b e9       	ldi	r25, 0x9B	; 155
     ec6:	98 0f       	add	r25, r24
     ec8:	93 30       	cpi	r25, 0x03	; 3
     eca:	08 f0       	brcs	.+2      	; 0xece <vfprintf+0xf8>
     ecc:	71 c1       	rjmp	.+738    	; 0x11b0 <vfprintf+0x3da>
     ece:	2f 7e       	andi	r18, 0xEF	; 239
     ed0:	26 ff       	sbrs	r18, 6
     ed2:	16 e0       	ldi	r17, 0x06	; 6
     ed4:	2f 73       	andi	r18, 0x3F	; 63
     ed6:	32 2e       	mov	r3, r18
     ed8:	85 36       	cpi	r24, 0x65	; 101
     eda:	19 f4       	brne	.+6      	; 0xee2 <vfprintf+0x10c>
     edc:	20 64       	ori	r18, 0x40	; 64
     ede:	32 2e       	mov	r3, r18
     ee0:	08 c0       	rjmp	.+16     	; 0xef2 <vfprintf+0x11c>
     ee2:	86 36       	cpi	r24, 0x66	; 102
     ee4:	21 f4       	brne	.+8      	; 0xeee <vfprintf+0x118>
     ee6:	f2 2f       	mov	r31, r18
     ee8:	f0 68       	ori	r31, 0x80	; 128
     eea:	3f 2e       	mov	r3, r31
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <vfprintf+0x11c>
     eee:	11 11       	cpse	r17, r1
     ef0:	11 50       	subi	r17, 0x01	; 1
     ef2:	37 fe       	sbrs	r3, 7
     ef4:	07 c0       	rjmp	.+14     	; 0xf04 <vfprintf+0x12e>
     ef6:	1c 33       	cpi	r17, 0x3C	; 60
     ef8:	50 f4       	brcc	.+20     	; 0xf0e <vfprintf+0x138>
     efa:	ee 24       	eor	r14, r14
     efc:	e3 94       	inc	r14
     efe:	e1 0e       	add	r14, r17
     f00:	27 e0       	ldi	r18, 0x07	; 7
     f02:	0b c0       	rjmp	.+22     	; 0xf1a <vfprintf+0x144>
     f04:	18 30       	cpi	r17, 0x08	; 8
     f06:	38 f0       	brcs	.+14     	; 0xf16 <vfprintf+0x140>
     f08:	27 e0       	ldi	r18, 0x07	; 7
     f0a:	17 e0       	ldi	r17, 0x07	; 7
     f0c:	05 c0       	rjmp	.+10     	; 0xf18 <vfprintf+0x142>
     f0e:	27 e0       	ldi	r18, 0x07	; 7
     f10:	4c e3       	ldi	r20, 0x3C	; 60
     f12:	e4 2e       	mov	r14, r20
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <vfprintf+0x144>
     f16:	21 2f       	mov	r18, r17
     f18:	e1 2c       	mov	r14, r1
     f1a:	52 01       	movw	r10, r4
     f1c:	44 e0       	ldi	r20, 0x04	; 4
     f1e:	a4 0e       	add	r10, r20
     f20:	b1 1c       	adc	r11, r1
     f22:	f2 01       	movw	r30, r4
     f24:	60 81       	ld	r22, Z
     f26:	71 81       	ldd	r23, Z+1	; 0x01
     f28:	82 81       	ldd	r24, Z+2	; 0x02
     f2a:	93 81       	ldd	r25, Z+3	; 0x03
     f2c:	0e 2d       	mov	r16, r14
     f2e:	a3 01       	movw	r20, r6
     f30:	0e 94 b1 13 	call	0x2762	; 0x2762 <__ftoa_engine>
     f34:	2c 01       	movw	r4, r24
     f36:	09 81       	ldd	r16, Y+1	; 0x01
     f38:	00 ff       	sbrs	r16, 0
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <vfprintf+0x16a>
     f3c:	03 ff       	sbrs	r16, 3
     f3e:	07 c0       	rjmp	.+14     	; 0xf4e <vfprintf+0x178>
     f40:	31 fc       	sbrc	r3, 1
     f42:	08 c0       	rjmp	.+16     	; 0xf54 <vfprintf+0x17e>
     f44:	32 fe       	sbrs	r3, 2
     f46:	09 c0       	rjmp	.+18     	; 0xf5a <vfprintf+0x184>
     f48:	30 e2       	ldi	r19, 0x20	; 32
     f4a:	23 2e       	mov	r2, r19
     f4c:	07 c0       	rjmp	.+14     	; 0xf5c <vfprintf+0x186>
     f4e:	2d e2       	ldi	r18, 0x2D	; 45
     f50:	22 2e       	mov	r2, r18
     f52:	04 c0       	rjmp	.+8      	; 0xf5c <vfprintf+0x186>
     f54:	9b e2       	ldi	r25, 0x2B	; 43
     f56:	29 2e       	mov	r2, r25
     f58:	01 c0       	rjmp	.+2      	; 0xf5c <vfprintf+0x186>
     f5a:	21 2c       	mov	r2, r1
     f5c:	80 2f       	mov	r24, r16
     f5e:	8c 70       	andi	r24, 0x0C	; 12
     f60:	19 f0       	breq	.+6      	; 0xf68 <vfprintf+0x192>
     f62:	21 10       	cpse	r2, r1
     f64:	68 c2       	rjmp	.+1232   	; 0x1436 <vfprintf+0x660>
     f66:	a8 c2       	rjmp	.+1360   	; 0x14b8 <vfprintf+0x6e2>
     f68:	37 fe       	sbrs	r3, 7
     f6a:	0f c0       	rjmp	.+30     	; 0xf8a <vfprintf+0x1b4>
     f6c:	e4 0c       	add	r14, r4
     f6e:	04 ff       	sbrs	r16, 4
     f70:	04 c0       	rjmp	.+8      	; 0xf7a <vfprintf+0x1a4>
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	81 33       	cpi	r24, 0x31	; 49
     f76:	09 f4       	brne	.+2      	; 0xf7a <vfprintf+0x1a4>
     f78:	ea 94       	dec	r14
     f7a:	1e 14       	cp	r1, r14
     f7c:	74 f5       	brge	.+92     	; 0xfda <vfprintf+0x204>
     f7e:	f8 e0       	ldi	r31, 0x08	; 8
     f80:	fe 15       	cp	r31, r14
     f82:	78 f5       	brcc	.+94     	; 0xfe2 <vfprintf+0x20c>
     f84:	88 e0       	ldi	r24, 0x08	; 8
     f86:	e8 2e       	mov	r14, r24
     f88:	2c c0       	rjmp	.+88     	; 0xfe2 <vfprintf+0x20c>
     f8a:	36 fc       	sbrc	r3, 6
     f8c:	2a c0       	rjmp	.+84     	; 0xfe2 <vfprintf+0x20c>
     f8e:	81 2f       	mov	r24, r17
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	84 15       	cp	r24, r4
     f94:	95 05       	cpc	r25, r5
     f96:	9c f0       	brlt	.+38     	; 0xfbe <vfprintf+0x1e8>
     f98:	2c ef       	ldi	r18, 0xFC	; 252
     f9a:	42 16       	cp	r4, r18
     f9c:	2f ef       	ldi	r18, 0xFF	; 255
     f9e:	52 06       	cpc	r5, r18
     fa0:	74 f0       	brlt	.+28     	; 0xfbe <vfprintf+0x1e8>
     fa2:	43 2d       	mov	r20, r3
     fa4:	40 68       	ori	r20, 0x80	; 128
     fa6:	34 2e       	mov	r3, r20
     fa8:	0a c0       	rjmp	.+20     	; 0xfbe <vfprintf+0x1e8>
     faa:	e2 e0       	ldi	r30, 0x02	; 2
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	ec 0f       	add	r30, r28
     fb0:	fd 1f       	adc	r31, r29
     fb2:	e1 0f       	add	r30, r17
     fb4:	f1 1d       	adc	r31, r1
     fb6:	80 81       	ld	r24, Z
     fb8:	80 33       	cpi	r24, 0x30	; 48
     fba:	19 f4       	brne	.+6      	; 0xfc2 <vfprintf+0x1ec>
     fbc:	11 50       	subi	r17, 0x01	; 1
     fbe:	11 11       	cpse	r17, r1
     fc0:	f4 cf       	rjmp	.-24     	; 0xfaa <vfprintf+0x1d4>
     fc2:	37 fe       	sbrs	r3, 7
     fc4:	0e c0       	rjmp	.+28     	; 0xfe2 <vfprintf+0x20c>
     fc6:	ee 24       	eor	r14, r14
     fc8:	e3 94       	inc	r14
     fca:	e1 0e       	add	r14, r17
     fcc:	81 2f       	mov	r24, r17
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	48 16       	cp	r4, r24
     fd2:	59 06       	cpc	r5, r25
     fd4:	2c f4       	brge	.+10     	; 0xfe0 <vfprintf+0x20a>
     fd6:	14 19       	sub	r17, r4
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <vfprintf+0x20c>
     fda:	ee 24       	eor	r14, r14
     fdc:	e3 94       	inc	r14
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <vfprintf+0x20c>
     fe0:	10 e0       	ldi	r17, 0x00	; 0
     fe2:	37 fe       	sbrs	r3, 7
     fe4:	06 c0       	rjmp	.+12     	; 0xff2 <vfprintf+0x21c>
     fe6:	14 14       	cp	r1, r4
     fe8:	15 04       	cpc	r1, r5
     fea:	34 f4       	brge	.+12     	; 0xff8 <vfprintf+0x222>
     fec:	c2 01       	movw	r24, r4
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	05 c0       	rjmp	.+10     	; 0xffc <vfprintf+0x226>
     ff2:	85 e0       	ldi	r24, 0x05	; 5
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <vfprintf+0x226>
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	21 10       	cpse	r2, r1
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	11 23       	and	r17, r17
    1002:	31 f0       	breq	.+12     	; 0x1010 <vfprintf+0x23a>
    1004:	21 2f       	mov	r18, r17
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	2f 5f       	subi	r18, 0xFF	; 255
    100a:	3f 4f       	sbci	r19, 0xFF	; 255
    100c:	82 0f       	add	r24, r18
    100e:	93 1f       	adc	r25, r19
    1010:	2f 2d       	mov	r18, r15
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	82 17       	cp	r24, r18
    1016:	93 07       	cpc	r25, r19
    1018:	14 f4       	brge	.+4      	; 0x101e <vfprintf+0x248>
    101a:	f8 1a       	sub	r15, r24
    101c:	01 c0       	rjmp	.+2      	; 0x1020 <vfprintf+0x24a>
    101e:	f1 2c       	mov	r15, r1
    1020:	83 2d       	mov	r24, r3
    1022:	89 70       	andi	r24, 0x09	; 9
    1024:	49 f4       	brne	.+18     	; 0x1038 <vfprintf+0x262>
    1026:	ff 20       	and	r15, r15
    1028:	39 f0       	breq	.+14     	; 0x1038 <vfprintf+0x262>
    102a:	b6 01       	movw	r22, r12
    102c:	80 e2       	ldi	r24, 0x20	; 32
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    1034:	fa 94       	dec	r15
    1036:	f7 cf       	rjmp	.-18     	; 0x1026 <vfprintf+0x250>
    1038:	22 20       	and	r2, r2
    103a:	29 f0       	breq	.+10     	; 0x1046 <vfprintf+0x270>
    103c:	b6 01       	movw	r22, r12
    103e:	82 2d       	mov	r24, r2
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    1046:	33 fc       	sbrc	r3, 3
    1048:	09 c0       	rjmp	.+18     	; 0x105c <vfprintf+0x286>
    104a:	ff 20       	and	r15, r15
    104c:	39 f0       	breq	.+14     	; 0x105c <vfprintf+0x286>
    104e:	b6 01       	movw	r22, r12
    1050:	80 e3       	ldi	r24, 0x30	; 48
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    1058:	fa 94       	dec	r15
    105a:	f7 cf       	rjmp	.-18     	; 0x104a <vfprintf+0x274>
    105c:	37 fe       	sbrs	r3, 7
    105e:	5a c0       	rjmp	.+180    	; 0x1114 <vfprintf+0x33e>
    1060:	94 2d       	mov	r25, r4
    1062:	85 2d       	mov	r24, r5
    1064:	57 fe       	sbrs	r5, 7
    1066:	02 c0       	rjmp	.+4      	; 0x106c <vfprintf+0x296>
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	29 2e       	mov	r2, r25
    106e:	38 2e       	mov	r3, r24
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	a2 01       	movw	r20, r4
    1076:	4e 19       	sub	r20, r14
    1078:	51 09       	sbc	r21, r1
    107a:	5d 87       	std	Y+13, r21	; 0x0d
    107c:	4c 87       	std	Y+12, r20	; 0x0c
    107e:	a2 01       	movw	r20, r4
    1080:	42 19       	sub	r20, r2
    1082:	53 09       	sbc	r21, r3
    1084:	5f 87       	std	Y+15, r21	; 0x0f
    1086:	4e 87       	std	Y+14, r20	; 0x0e
    1088:	61 2f       	mov	r22, r17
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	44 27       	eor	r20, r20
    108e:	55 27       	eor	r21, r21
    1090:	46 1b       	sub	r20, r22
    1092:	57 0b       	sbc	r21, r23
    1094:	59 8b       	std	Y+17, r21	; 0x11
    1096:	48 8b       	std	Y+16, r20	; 0x10
    1098:	5f ef       	ldi	r21, 0xFF	; 255
    109a:	25 16       	cp	r2, r21
    109c:	35 06       	cpc	r3, r21
    109e:	49 f4       	brne	.+18     	; 0x10b2 <vfprintf+0x2dc>
    10a0:	b6 01       	movw	r22, r12
    10a2:	8e e2       	ldi	r24, 0x2E	; 46
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	2a 8b       	std	Y+18, r18	; 0x12
    10a8:	3b 8b       	std	Y+19, r19	; 0x13
    10aa:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    10ae:	3b 89       	ldd	r19, Y+19	; 0x13
    10b0:	2a 89       	ldd	r18, Y+18	; 0x12
    10b2:	42 14       	cp	r4, r2
    10b4:	53 04       	cpc	r5, r3
    10b6:	6c f0       	brlt	.+26     	; 0x10d2 <vfprintf+0x2fc>
    10b8:	4c 85       	ldd	r20, Y+12	; 0x0c
    10ba:	5d 85       	ldd	r21, Y+13	; 0x0d
    10bc:	42 15       	cp	r20, r2
    10be:	53 05       	cpc	r21, r3
    10c0:	44 f4       	brge	.+16     	; 0x10d2 <vfprintf+0x2fc>
    10c2:	ee 85       	ldd	r30, Y+14	; 0x0e
    10c4:	ff 85       	ldd	r31, Y+15	; 0x0f
    10c6:	e2 0f       	add	r30, r18
    10c8:	f3 1f       	adc	r31, r19
    10ca:	e6 0d       	add	r30, r6
    10cc:	f7 1d       	adc	r31, r7
    10ce:	81 81       	ldd	r24, Z+1	; 0x01
    10d0:	01 c0       	rjmp	.+2      	; 0x10d4 <vfprintf+0x2fe>
    10d2:	80 e3       	ldi	r24, 0x30	; 48
    10d4:	51 e0       	ldi	r21, 0x01	; 1
    10d6:	25 1a       	sub	r2, r21
    10d8:	31 08       	sbc	r3, r1
    10da:	2f 5f       	subi	r18, 0xFF	; 255
    10dc:	3f 4f       	sbci	r19, 0xFF	; 255
    10de:	48 89       	ldd	r20, Y+16	; 0x10
    10e0:	59 89       	ldd	r21, Y+17	; 0x11
    10e2:	24 16       	cp	r2, r20
    10e4:	35 06       	cpc	r3, r21
    10e6:	4c f0       	brlt	.+18     	; 0x10fa <vfprintf+0x324>
    10e8:	b6 01       	movw	r22, r12
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	2a 8b       	std	Y+18, r18	; 0x12
    10ee:	3b 8b       	std	Y+19, r19	; 0x13
    10f0:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    10f4:	2a 89       	ldd	r18, Y+18	; 0x12
    10f6:	3b 89       	ldd	r19, Y+19	; 0x13
    10f8:	cf cf       	rjmp	.-98     	; 0x1098 <vfprintf+0x2c2>
    10fa:	24 14       	cp	r2, r4
    10fc:	35 04       	cpc	r3, r5
    10fe:	39 f4       	brne	.+14     	; 0x110e <vfprintf+0x338>
    1100:	9a 81       	ldd	r25, Y+2	; 0x02
    1102:	96 33       	cpi	r25, 0x36	; 54
    1104:	18 f4       	brcc	.+6      	; 0x110c <vfprintf+0x336>
    1106:	95 33       	cpi	r25, 0x35	; 53
    1108:	11 f4       	brne	.+4      	; 0x110e <vfprintf+0x338>
    110a:	04 ff       	sbrs	r16, 4
    110c:	81 e3       	ldi	r24, 0x31	; 49
    110e:	b6 01       	movw	r22, r12
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	4b c0       	rjmp	.+150    	; 0x11aa <vfprintf+0x3d4>
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	81 33       	cpi	r24, 0x31	; 49
    1118:	09 f0       	breq	.+2      	; 0x111c <vfprintf+0x346>
    111a:	0f 7e       	andi	r16, 0xEF	; 239
    111c:	b6 01       	movw	r22, r12
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    1124:	11 11       	cpse	r17, r1
    1126:	05 c0       	rjmp	.+10     	; 0x1132 <vfprintf+0x35c>
    1128:	34 fc       	sbrc	r3, 4
    112a:	18 c0       	rjmp	.+48     	; 0x115c <vfprintf+0x386>
    112c:	85 e6       	ldi	r24, 0x65	; 101
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	17 c0       	rjmp	.+46     	; 0x1160 <vfprintf+0x38a>
    1132:	b6 01       	movw	r22, r12
    1134:	8e e2       	ldi	r24, 0x2E	; 46
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	ee 24       	eor	r14, r14
    1140:	e3 94       	inc	r14
    1142:	e8 0e       	add	r14, r24
    1144:	f3 01       	movw	r30, r6
    1146:	e8 0f       	add	r30, r24
    1148:	f1 1d       	adc	r31, r1
    114a:	80 81       	ld	r24, Z
    114c:	b6 01       	movw	r22, r12
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    1154:	11 50       	subi	r17, 0x01	; 1
    1156:	8e 2d       	mov	r24, r14
    1158:	91 f7       	brne	.-28     	; 0x113e <vfprintf+0x368>
    115a:	e6 cf       	rjmp	.-52     	; 0x1128 <vfprintf+0x352>
    115c:	85 e4       	ldi	r24, 0x45	; 69
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	b6 01       	movw	r22, r12
    1162:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    1166:	57 fc       	sbrc	r5, 7
    1168:	05 c0       	rjmp	.+10     	; 0x1174 <vfprintf+0x39e>
    116a:	41 14       	cp	r4, r1
    116c:	51 04       	cpc	r5, r1
    116e:	39 f4       	brne	.+14     	; 0x117e <vfprintf+0x3a8>
    1170:	04 ff       	sbrs	r16, 4
    1172:	05 c0       	rjmp	.+10     	; 0x117e <vfprintf+0x3a8>
    1174:	51 94       	neg	r5
    1176:	41 94       	neg	r4
    1178:	51 08       	sbc	r5, r1
    117a:	8d e2       	ldi	r24, 0x2D	; 45
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <vfprintf+0x3aa>
    117e:	8b e2       	ldi	r24, 0x2B	; 43
    1180:	b6 01       	movw	r22, r12
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    1188:	80 e3       	ldi	r24, 0x30	; 48
    118a:	9a e0       	ldi	r25, 0x0A	; 10
    118c:	49 16       	cp	r4, r25
    118e:	51 04       	cpc	r5, r1
    1190:	2c f0       	brlt	.+10     	; 0x119c <vfprintf+0x3c6>
    1192:	8f 5f       	subi	r24, 0xFF	; 255
    1194:	5a e0       	ldi	r21, 0x0A	; 10
    1196:	45 1a       	sub	r4, r21
    1198:	51 08       	sbc	r5, r1
    119a:	f7 cf       	rjmp	.-18     	; 0x118a <vfprintf+0x3b4>
    119c:	b6 01       	movw	r22, r12
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    11a4:	b6 01       	movw	r22, r12
    11a6:	c2 01       	movw	r24, r4
    11a8:	c0 96       	adiw	r24, 0x30	; 48
    11aa:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    11ae:	57 c1       	rjmp	.+686    	; 0x145e <vfprintf+0x688>
    11b0:	83 36       	cpi	r24, 0x63	; 99
    11b2:	31 f0       	breq	.+12     	; 0x11c0 <vfprintf+0x3ea>
    11b4:	83 37       	cpi	r24, 0x73	; 115
    11b6:	79 f0       	breq	.+30     	; 0x11d6 <vfprintf+0x400>
    11b8:	83 35       	cpi	r24, 0x53	; 83
    11ba:	09 f0       	breq	.+2      	; 0x11be <vfprintf+0x3e8>
    11bc:	58 c0       	rjmp	.+176    	; 0x126e <vfprintf+0x498>
    11be:	21 c0       	rjmp	.+66     	; 0x1202 <vfprintf+0x42c>
    11c0:	52 01       	movw	r10, r4
    11c2:	e2 e0       	ldi	r30, 0x02	; 2
    11c4:	ae 0e       	add	r10, r30
    11c6:	b1 1c       	adc	r11, r1
    11c8:	f2 01       	movw	r30, r4
    11ca:	80 81       	ld	r24, Z
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	01 e0       	ldi	r16, 0x01	; 1
    11d0:	10 e0       	ldi	r17, 0x00	; 0
    11d2:	23 01       	movw	r4, r6
    11d4:	14 c0       	rjmp	.+40     	; 0x11fe <vfprintf+0x428>
    11d6:	52 01       	movw	r10, r4
    11d8:	f2 e0       	ldi	r31, 0x02	; 2
    11da:	af 0e       	add	r10, r31
    11dc:	b1 1c       	adc	r11, r1
    11de:	f2 01       	movw	r30, r4
    11e0:	40 80       	ld	r4, Z
    11e2:	51 80       	ldd	r5, Z+1	; 0x01
    11e4:	26 ff       	sbrs	r18, 6
    11e6:	03 c0       	rjmp	.+6      	; 0x11ee <vfprintf+0x418>
    11e8:	61 2f       	mov	r22, r17
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <vfprintf+0x41c>
    11ee:	6f ef       	ldi	r22, 0xFF	; 255
    11f0:	7f ef       	ldi	r23, 0xFF	; 255
    11f2:	c2 01       	movw	r24, r4
    11f4:	2a 8b       	std	Y+18, r18	; 0x12
    11f6:	0e 94 bd 14 	call	0x297a	; 0x297a <strnlen>
    11fa:	8c 01       	movw	r16, r24
    11fc:	2a 89       	ldd	r18, Y+18	; 0x12
    11fe:	2f 77       	andi	r18, 0x7F	; 127
    1200:	15 c0       	rjmp	.+42     	; 0x122c <vfprintf+0x456>
    1202:	52 01       	movw	r10, r4
    1204:	f2 e0       	ldi	r31, 0x02	; 2
    1206:	af 0e       	add	r10, r31
    1208:	b1 1c       	adc	r11, r1
    120a:	f2 01       	movw	r30, r4
    120c:	40 80       	ld	r4, Z
    120e:	51 80       	ldd	r5, Z+1	; 0x01
    1210:	26 ff       	sbrs	r18, 6
    1212:	03 c0       	rjmp	.+6      	; 0x121a <vfprintf+0x444>
    1214:	61 2f       	mov	r22, r17
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	02 c0       	rjmp	.+4      	; 0x121e <vfprintf+0x448>
    121a:	6f ef       	ldi	r22, 0xFF	; 255
    121c:	7f ef       	ldi	r23, 0xFF	; 255
    121e:	c2 01       	movw	r24, r4
    1220:	2a 8b       	std	Y+18, r18	; 0x12
    1222:	0e 94 b2 14 	call	0x2964	; 0x2964 <strnlen_P>
    1226:	8c 01       	movw	r16, r24
    1228:	2a 89       	ldd	r18, Y+18	; 0x12
    122a:	20 68       	ori	r18, 0x80	; 128
    122c:	32 2e       	mov	r3, r18
    122e:	23 fd       	sbrc	r18, 3
    1230:	1a c0       	rjmp	.+52     	; 0x1266 <vfprintf+0x490>
    1232:	8f 2d       	mov	r24, r15
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	08 17       	cp	r16, r24
    1238:	19 07       	cpc	r17, r25
    123a:	a8 f4       	brcc	.+42     	; 0x1266 <vfprintf+0x490>
    123c:	b6 01       	movw	r22, r12
    123e:	80 e2       	ldi	r24, 0x20	; 32
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    1246:	fa 94       	dec	r15
    1248:	f4 cf       	rjmp	.-24     	; 0x1232 <vfprintf+0x45c>
    124a:	f2 01       	movw	r30, r4
    124c:	37 fc       	sbrc	r3, 7
    124e:	85 91       	lpm	r24, Z+
    1250:	37 fe       	sbrs	r3, 7
    1252:	81 91       	ld	r24, Z+
    1254:	2f 01       	movw	r4, r30
    1256:	b6 01       	movw	r22, r12
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    125e:	f1 10       	cpse	r15, r1
    1260:	fa 94       	dec	r15
    1262:	01 50       	subi	r16, 0x01	; 1
    1264:	11 09       	sbc	r17, r1
    1266:	01 15       	cp	r16, r1
    1268:	11 05       	cpc	r17, r1
    126a:	79 f7       	brne	.-34     	; 0x124a <vfprintf+0x474>
    126c:	f8 c0       	rjmp	.+496    	; 0x145e <vfprintf+0x688>
    126e:	84 36       	cpi	r24, 0x64	; 100
    1270:	11 f0       	breq	.+4      	; 0x1276 <vfprintf+0x4a0>
    1272:	89 36       	cpi	r24, 0x69	; 105
    1274:	59 f5       	brne	.+86     	; 0x12cc <vfprintf+0x4f6>
    1276:	52 01       	movw	r10, r4
    1278:	27 ff       	sbrs	r18, 7
    127a:	09 c0       	rjmp	.+18     	; 0x128e <vfprintf+0x4b8>
    127c:	f4 e0       	ldi	r31, 0x04	; 4
    127e:	af 0e       	add	r10, r31
    1280:	b1 1c       	adc	r11, r1
    1282:	f2 01       	movw	r30, r4
    1284:	60 81       	ld	r22, Z
    1286:	71 81       	ldd	r23, Z+1	; 0x01
    1288:	82 81       	ldd	r24, Z+2	; 0x02
    128a:	93 81       	ldd	r25, Z+3	; 0x03
    128c:	0a c0       	rjmp	.+20     	; 0x12a2 <vfprintf+0x4cc>
    128e:	f2 e0       	ldi	r31, 0x02	; 2
    1290:	af 0e       	add	r10, r31
    1292:	b1 1c       	adc	r11, r1
    1294:	f2 01       	movw	r30, r4
    1296:	60 81       	ld	r22, Z
    1298:	71 81       	ldd	r23, Z+1	; 0x01
    129a:	07 2e       	mov	r0, r23
    129c:	00 0c       	add	r0, r0
    129e:	88 0b       	sbc	r24, r24
    12a0:	99 0b       	sbc	r25, r25
    12a2:	2f 76       	andi	r18, 0x6F	; 111
    12a4:	32 2e       	mov	r3, r18
    12a6:	97 ff       	sbrs	r25, 7
    12a8:	09 c0       	rjmp	.+18     	; 0x12bc <vfprintf+0x4e6>
    12aa:	90 95       	com	r25
    12ac:	80 95       	com	r24
    12ae:	70 95       	com	r23
    12b0:	61 95       	neg	r22
    12b2:	7f 4f       	sbci	r23, 0xFF	; 255
    12b4:	8f 4f       	sbci	r24, 0xFF	; 255
    12b6:	9f 4f       	sbci	r25, 0xFF	; 255
    12b8:	20 68       	ori	r18, 0x80	; 128
    12ba:	32 2e       	mov	r3, r18
    12bc:	2a e0       	ldi	r18, 0x0A	; 10
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	a3 01       	movw	r20, r6
    12c2:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <__ultoa_invert>
    12c6:	e8 2e       	mov	r14, r24
    12c8:	e6 18       	sub	r14, r6
    12ca:	3f c0       	rjmp	.+126    	; 0x134a <vfprintf+0x574>
    12cc:	02 2f       	mov	r16, r18
    12ce:	85 37       	cpi	r24, 0x75	; 117
    12d0:	21 f4       	brne	.+8      	; 0x12da <vfprintf+0x504>
    12d2:	0f 7e       	andi	r16, 0xEF	; 239
    12d4:	2a e0       	ldi	r18, 0x0A	; 10
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	1d c0       	rjmp	.+58     	; 0x1314 <vfprintf+0x53e>
    12da:	09 7f       	andi	r16, 0xF9	; 249
    12dc:	8f 36       	cpi	r24, 0x6F	; 111
    12de:	91 f0       	breq	.+36     	; 0x1304 <vfprintf+0x52e>
    12e0:	18 f4       	brcc	.+6      	; 0x12e8 <vfprintf+0x512>
    12e2:	88 35       	cpi	r24, 0x58	; 88
    12e4:	59 f0       	breq	.+22     	; 0x12fc <vfprintf+0x526>
    12e6:	c5 c0       	rjmp	.+394    	; 0x1472 <vfprintf+0x69c>
    12e8:	80 37       	cpi	r24, 0x70	; 112
    12ea:	19 f0       	breq	.+6      	; 0x12f2 <vfprintf+0x51c>
    12ec:	88 37       	cpi	r24, 0x78	; 120
    12ee:	11 f0       	breq	.+4      	; 0x12f4 <vfprintf+0x51e>
    12f0:	c0 c0       	rjmp	.+384    	; 0x1472 <vfprintf+0x69c>
    12f2:	00 61       	ori	r16, 0x10	; 16
    12f4:	04 ff       	sbrs	r16, 4
    12f6:	09 c0       	rjmp	.+18     	; 0x130a <vfprintf+0x534>
    12f8:	04 60       	ori	r16, 0x04	; 4
    12fa:	07 c0       	rjmp	.+14     	; 0x130a <vfprintf+0x534>
    12fc:	24 ff       	sbrs	r18, 4
    12fe:	08 c0       	rjmp	.+16     	; 0x1310 <vfprintf+0x53a>
    1300:	06 60       	ori	r16, 0x06	; 6
    1302:	06 c0       	rjmp	.+12     	; 0x1310 <vfprintf+0x53a>
    1304:	28 e0       	ldi	r18, 0x08	; 8
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	05 c0       	rjmp	.+10     	; 0x1314 <vfprintf+0x53e>
    130a:	20 e1       	ldi	r18, 0x10	; 16
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <vfprintf+0x53e>
    1310:	20 e1       	ldi	r18, 0x10	; 16
    1312:	32 e0       	ldi	r19, 0x02	; 2
    1314:	52 01       	movw	r10, r4
    1316:	07 ff       	sbrs	r16, 7
    1318:	09 c0       	rjmp	.+18     	; 0x132c <vfprintf+0x556>
    131a:	f4 e0       	ldi	r31, 0x04	; 4
    131c:	af 0e       	add	r10, r31
    131e:	b1 1c       	adc	r11, r1
    1320:	f2 01       	movw	r30, r4
    1322:	60 81       	ld	r22, Z
    1324:	71 81       	ldd	r23, Z+1	; 0x01
    1326:	82 81       	ldd	r24, Z+2	; 0x02
    1328:	93 81       	ldd	r25, Z+3	; 0x03
    132a:	08 c0       	rjmp	.+16     	; 0x133c <vfprintf+0x566>
    132c:	f2 e0       	ldi	r31, 0x02	; 2
    132e:	af 0e       	add	r10, r31
    1330:	b1 1c       	adc	r11, r1
    1332:	f2 01       	movw	r30, r4
    1334:	60 81       	ld	r22, Z
    1336:	71 81       	ldd	r23, Z+1	; 0x01
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	a3 01       	movw	r20, r6
    133e:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <__ultoa_invert>
    1342:	e8 2e       	mov	r14, r24
    1344:	e6 18       	sub	r14, r6
    1346:	0f 77       	andi	r16, 0x7F	; 127
    1348:	30 2e       	mov	r3, r16
    134a:	36 fe       	sbrs	r3, 6
    134c:	0b c0       	rjmp	.+22     	; 0x1364 <vfprintf+0x58e>
    134e:	33 2d       	mov	r19, r3
    1350:	3e 7f       	andi	r19, 0xFE	; 254
    1352:	e1 16       	cp	r14, r17
    1354:	50 f4       	brcc	.+20     	; 0x136a <vfprintf+0x594>
    1356:	34 fe       	sbrs	r3, 4
    1358:	0a c0       	rjmp	.+20     	; 0x136e <vfprintf+0x598>
    135a:	32 fc       	sbrc	r3, 2
    135c:	08 c0       	rjmp	.+16     	; 0x136e <vfprintf+0x598>
    135e:	33 2d       	mov	r19, r3
    1360:	3e 7e       	andi	r19, 0xEE	; 238
    1362:	05 c0       	rjmp	.+10     	; 0x136e <vfprintf+0x598>
    1364:	0e 2d       	mov	r16, r14
    1366:	33 2d       	mov	r19, r3
    1368:	03 c0       	rjmp	.+6      	; 0x1370 <vfprintf+0x59a>
    136a:	0e 2d       	mov	r16, r14
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <vfprintf+0x59a>
    136e:	01 2f       	mov	r16, r17
    1370:	34 ff       	sbrs	r19, 4
    1372:	0c c0       	rjmp	.+24     	; 0x138c <vfprintf+0x5b6>
    1374:	fe 01       	movw	r30, r28
    1376:	ee 0d       	add	r30, r14
    1378:	f1 1d       	adc	r31, r1
    137a:	80 81       	ld	r24, Z
    137c:	80 33       	cpi	r24, 0x30	; 48
    137e:	11 f4       	brne	.+4      	; 0x1384 <vfprintf+0x5ae>
    1380:	39 7e       	andi	r19, 0xE9	; 233
    1382:	08 c0       	rjmp	.+16     	; 0x1394 <vfprintf+0x5be>
    1384:	32 ff       	sbrs	r19, 2
    1386:	05 c0       	rjmp	.+10     	; 0x1392 <vfprintf+0x5bc>
    1388:	0e 5f       	subi	r16, 0xFE	; 254
    138a:	04 c0       	rjmp	.+8      	; 0x1394 <vfprintf+0x5be>
    138c:	83 2f       	mov	r24, r19
    138e:	86 78       	andi	r24, 0x86	; 134
    1390:	09 f0       	breq	.+2      	; 0x1394 <vfprintf+0x5be>
    1392:	0f 5f       	subi	r16, 0xFF	; 255
    1394:	33 fd       	sbrc	r19, 3
    1396:	13 c0       	rjmp	.+38     	; 0x13be <vfprintf+0x5e8>
    1398:	30 ff       	sbrs	r19, 0
    139a:	06 c0       	rjmp	.+12     	; 0x13a8 <vfprintf+0x5d2>
    139c:	1e 2d       	mov	r17, r14
    139e:	0f 15       	cp	r16, r15
    13a0:	18 f4       	brcc	.+6      	; 0x13a8 <vfprintf+0x5d2>
    13a2:	1f 0d       	add	r17, r15
    13a4:	10 1b       	sub	r17, r16
    13a6:	0f 2d       	mov	r16, r15
    13a8:	0f 15       	cp	r16, r15
    13aa:	68 f4       	brcc	.+26     	; 0x13c6 <vfprintf+0x5f0>
    13ac:	b6 01       	movw	r22, r12
    13ae:	80 e2       	ldi	r24, 0x20	; 32
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	3b 8b       	std	Y+19, r19	; 0x13
    13b4:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    13b8:	0f 5f       	subi	r16, 0xFF	; 255
    13ba:	3b 89       	ldd	r19, Y+19	; 0x13
    13bc:	f5 cf       	rjmp	.-22     	; 0x13a8 <vfprintf+0x5d2>
    13be:	0f 15       	cp	r16, r15
    13c0:	10 f4       	brcc	.+4      	; 0x13c6 <vfprintf+0x5f0>
    13c2:	f0 1a       	sub	r15, r16
    13c4:	01 c0       	rjmp	.+2      	; 0x13c8 <vfprintf+0x5f2>
    13c6:	f1 2c       	mov	r15, r1
    13c8:	34 ff       	sbrs	r19, 4
    13ca:	12 c0       	rjmp	.+36     	; 0x13f0 <vfprintf+0x61a>
    13cc:	b6 01       	movw	r22, r12
    13ce:	80 e3       	ldi	r24, 0x30	; 48
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	3b 8b       	std	Y+19, r19	; 0x13
    13d4:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    13d8:	3b 89       	ldd	r19, Y+19	; 0x13
    13da:	32 ff       	sbrs	r19, 2
    13dc:	17 c0       	rjmp	.+46     	; 0x140c <vfprintf+0x636>
    13de:	31 fd       	sbrc	r19, 1
    13e0:	03 c0       	rjmp	.+6      	; 0x13e8 <vfprintf+0x612>
    13e2:	88 e7       	ldi	r24, 0x78	; 120
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <vfprintf+0x616>
    13e8:	88 e5       	ldi	r24, 0x58	; 88
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	b6 01       	movw	r22, r12
    13ee:	0c c0       	rjmp	.+24     	; 0x1408 <vfprintf+0x632>
    13f0:	83 2f       	mov	r24, r19
    13f2:	86 78       	andi	r24, 0x86	; 134
    13f4:	59 f0       	breq	.+22     	; 0x140c <vfprintf+0x636>
    13f6:	31 ff       	sbrs	r19, 1
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <vfprintf+0x628>
    13fa:	8b e2       	ldi	r24, 0x2B	; 43
    13fc:	01 c0       	rjmp	.+2      	; 0x1400 <vfprintf+0x62a>
    13fe:	80 e2       	ldi	r24, 0x20	; 32
    1400:	37 fd       	sbrc	r19, 7
    1402:	8d e2       	ldi	r24, 0x2D	; 45
    1404:	b6 01       	movw	r22, r12
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    140c:	e1 16       	cp	r14, r17
    140e:	38 f4       	brcc	.+14     	; 0x141e <vfprintf+0x648>
    1410:	b6 01       	movw	r22, r12
    1412:	80 e3       	ldi	r24, 0x30	; 48
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    141a:	11 50       	subi	r17, 0x01	; 1
    141c:	f7 cf       	rjmp	.-18     	; 0x140c <vfprintf+0x636>
    141e:	ea 94       	dec	r14
    1420:	f3 01       	movw	r30, r6
    1422:	ee 0d       	add	r30, r14
    1424:	f1 1d       	adc	r31, r1
    1426:	80 81       	ld	r24, Z
    1428:	b6 01       	movw	r22, r12
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    1430:	e1 10       	cpse	r14, r1
    1432:	f5 cf       	rjmp	.-22     	; 0x141e <vfprintf+0x648>
    1434:	14 c0       	rjmp	.+40     	; 0x145e <vfprintf+0x688>
    1436:	f4 e0       	ldi	r31, 0x04	; 4
    1438:	ff 15       	cp	r31, r15
    143a:	58 f5       	brcc	.+86     	; 0x1492 <vfprintf+0x6bc>
    143c:	84 e0       	ldi	r24, 0x04	; 4
    143e:	f8 1a       	sub	r15, r24
    1440:	33 fe       	sbrs	r3, 3
    1442:	1e c0       	rjmp	.+60     	; 0x1480 <vfprintf+0x6aa>
    1444:	21 10       	cpse	r2, r1
    1446:	26 c0       	rjmp	.+76     	; 0x1494 <vfprintf+0x6be>
    1448:	03 ff       	sbrs	r16, 3
    144a:	2a c0       	rjmp	.+84     	; 0x14a0 <vfprintf+0x6ca>
    144c:	08 e6       	ldi	r16, 0x68	; 104
    144e:	10 e0       	ldi	r17, 0x00	; 0
    1450:	f3 2d       	mov	r31, r3
    1452:	f0 71       	andi	r31, 0x10	; 16
    1454:	3f 2e       	mov	r3, r31
    1456:	f8 01       	movw	r30, r16
    1458:	84 91       	lpm	r24, Z
    145a:	81 11       	cpse	r24, r1
    145c:	24 c0       	rjmp	.+72     	; 0x14a6 <vfprintf+0x6d0>
    145e:	ff 20       	and	r15, r15
    1460:	09 f4       	brne	.+2      	; 0x1464 <vfprintf+0x68e>
    1462:	e5 cc       	rjmp	.-1590   	; 0xe2e <vfprintf+0x58>
    1464:	b6 01       	movw	r22, r12
    1466:	80 e2       	ldi	r24, 0x20	; 32
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    146e:	fa 94       	dec	r15
    1470:	f6 cf       	rjmp	.-20     	; 0x145e <vfprintf+0x688>
    1472:	f6 01       	movw	r30, r12
    1474:	86 81       	ldd	r24, Z+6	; 0x06
    1476:	97 81       	ldd	r25, Z+7	; 0x07
    1478:	26 c0       	rjmp	.+76     	; 0x14c6 <vfprintf+0x6f0>
    147a:	8f ef       	ldi	r24, 0xFF	; 255
    147c:	9f ef       	ldi	r25, 0xFF	; 255
    147e:	23 c0       	rjmp	.+70     	; 0x14c6 <vfprintf+0x6f0>
    1480:	b6 01       	movw	r22, r12
    1482:	80 e2       	ldi	r24, 0x20	; 32
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    148a:	fa 94       	dec	r15
    148c:	f1 10       	cpse	r15, r1
    148e:	f8 cf       	rjmp	.-16     	; 0x1480 <vfprintf+0x6aa>
    1490:	d9 cf       	rjmp	.-78     	; 0x1444 <vfprintf+0x66e>
    1492:	f1 2c       	mov	r15, r1
    1494:	b6 01       	movw	r22, r12
    1496:	82 2d       	mov	r24, r2
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    149e:	d4 cf       	rjmp	.-88     	; 0x1448 <vfprintf+0x672>
    14a0:	0c e6       	ldi	r16, 0x6C	; 108
    14a2:	10 e0       	ldi	r17, 0x00	; 0
    14a4:	d5 cf       	rjmp	.-86     	; 0x1450 <vfprintf+0x67a>
    14a6:	31 10       	cpse	r3, r1
    14a8:	80 52       	subi	r24, 0x20	; 32
    14aa:	b6 01       	movw	r22, r12
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <fputc>
    14b2:	0f 5f       	subi	r16, 0xFF	; 255
    14b4:	1f 4f       	sbci	r17, 0xFF	; 255
    14b6:	cf cf       	rjmp	.-98     	; 0x1456 <vfprintf+0x680>
    14b8:	23 e0       	ldi	r18, 0x03	; 3
    14ba:	2f 15       	cp	r18, r15
    14bc:	10 f4       	brcc	.+4      	; 0x14c2 <vfprintf+0x6ec>
    14be:	83 e0       	ldi	r24, 0x03	; 3
    14c0:	be cf       	rjmp	.-132    	; 0x143e <vfprintf+0x668>
    14c2:	f1 2c       	mov	r15, r1
    14c4:	c1 cf       	rjmp	.-126    	; 0x1448 <vfprintf+0x672>
    14c6:	63 96       	adiw	r28, 0x13	; 19
    14c8:	e2 e1       	ldi	r30, 0x12	; 18
    14ca:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__epilogue_restores__>

000014ce <putval>:
    14ce:	20 fd       	sbrc	r18, 0
    14d0:	09 c0       	rjmp	.+18     	; 0x14e4 <putval+0x16>
    14d2:	fc 01       	movw	r30, r24
    14d4:	23 fd       	sbrc	r18, 3
    14d6:	05 c0       	rjmp	.+10     	; 0x14e2 <putval+0x14>
    14d8:	22 ff       	sbrs	r18, 2
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <putval+0x12>
    14dc:	73 83       	std	Z+3, r23	; 0x03
    14de:	62 83       	std	Z+2, r22	; 0x02
    14e0:	51 83       	std	Z+1, r21	; 0x01
    14e2:	40 83       	st	Z, r20
    14e4:	08 95       	ret

000014e6 <mulacc>:
    14e6:	44 fd       	sbrc	r20, 4
    14e8:	10 c0       	rjmp	.+32     	; 0x150a <mulacc+0x24>
    14ea:	46 fd       	sbrc	r20, 6
    14ec:	10 c0       	rjmp	.+32     	; 0x150e <mulacc+0x28>
    14ee:	db 01       	movw	r26, r22
    14f0:	fc 01       	movw	r30, r24
    14f2:	aa 0f       	add	r26, r26
    14f4:	bb 1f       	adc	r27, r27
    14f6:	ee 1f       	adc	r30, r30
    14f8:	ff 1f       	adc	r31, r31
    14fa:	10 94       	com	r1
    14fc:	d1 f7       	brne	.-12     	; 0x14f2 <mulacc+0xc>
    14fe:	6a 0f       	add	r22, r26
    1500:	7b 1f       	adc	r23, r27
    1502:	8e 1f       	adc	r24, r30
    1504:	9f 1f       	adc	r25, r31
    1506:	31 e0       	ldi	r19, 0x01	; 1
    1508:	03 c0       	rjmp	.+6      	; 0x1510 <mulacc+0x2a>
    150a:	33 e0       	ldi	r19, 0x03	; 3
    150c:	01 c0       	rjmp	.+2      	; 0x1510 <mulacc+0x2a>
    150e:	34 e0       	ldi	r19, 0x04	; 4
    1510:	66 0f       	add	r22, r22
    1512:	77 1f       	adc	r23, r23
    1514:	88 1f       	adc	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	31 50       	subi	r19, 0x01	; 1
    151a:	d1 f7       	brne	.-12     	; 0x1510 <mulacc+0x2a>
    151c:	62 0f       	add	r22, r18
    151e:	71 1d       	adc	r23, r1
    1520:	81 1d       	adc	r24, r1
    1522:	91 1d       	adc	r25, r1
    1524:	08 95       	ret

00001526 <skip_spaces>:
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	8c 01       	movw	r16, r24
    1530:	c8 01       	movw	r24, r16
    1532:	0e 94 13 15 	call	0x2a26	; 0x2a26 <fgetc>
    1536:	ec 01       	movw	r28, r24
    1538:	97 fd       	sbrc	r25, 7
    153a:	08 c0       	rjmp	.+16     	; 0x154c <skip_spaces+0x26>
    153c:	0e 94 89 14 	call	0x2912	; 0x2912 <isspace>
    1540:	89 2b       	or	r24, r25
    1542:	b1 f7       	brne	.-20     	; 0x1530 <skip_spaces+0xa>
    1544:	b8 01       	movw	r22, r16
    1546:	ce 01       	movw	r24, r28
    1548:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <ungetc>
    154c:	ce 01       	movw	r24, r28
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	1f 91       	pop	r17
    1554:	0f 91       	pop	r16
    1556:	08 95       	ret

00001558 <conv_int>:
    1558:	a0 e0       	ldi	r26, 0x00	; 0
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e2 eb       	ldi	r30, 0xB2	; 178
    155e:	fa e0       	ldi	r31, 0x0A	; 10
    1560:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__prologue_saves__+0xc>
    1564:	7c 01       	movw	r14, r24
    1566:	8b 01       	movw	r16, r22
    1568:	6a 01       	movw	r12, r20
    156a:	d2 2f       	mov	r29, r18
    156c:	0e 94 13 15 	call	0x2a26	; 0x2a26 <fgetc>
    1570:	9c 01       	movw	r18, r24
    1572:	33 27       	eor	r19, r19
    1574:	2b 32       	cpi	r18, 0x2B	; 43
    1576:	31 05       	cpc	r19, r1
    1578:	21 f0       	breq	.+8      	; 0x1582 <conv_int+0x2a>
    157a:	2d 32       	cpi	r18, 0x2D	; 45
    157c:	31 05       	cpc	r19, r1
    157e:	59 f4       	brne	.+22     	; 0x1596 <conv_int+0x3e>
    1580:	d0 68       	ori	r29, 0x80	; 128
    1582:	01 50       	subi	r16, 0x01	; 1
    1584:	11 09       	sbc	r17, r1
    1586:	11 f4       	brne	.+4      	; 0x158c <conv_int+0x34>
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	69 c0       	rjmp	.+210    	; 0x165e <conv_int+0x106>
    158c:	c7 01       	movw	r24, r14
    158e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <fgetc>
    1592:	97 fd       	sbrc	r25, 7
    1594:	f9 cf       	rjmp	.-14     	; 0x1588 <conv_int+0x30>
    1596:	cd 2f       	mov	r28, r29
    1598:	cd 7f       	andi	r28, 0xFD	; 253
    159a:	2d 2f       	mov	r18, r29
    159c:	20 73       	andi	r18, 0x30	; 48
    159e:	09 f5       	brne	.+66     	; 0x15e2 <conv_int+0x8a>
    15a0:	80 33       	cpi	r24, 0x30	; 48
    15a2:	f9 f4       	brne	.+62     	; 0x15e2 <conv_int+0x8a>
    15a4:	58 01       	movw	r10, r16
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	a8 1a       	sub	r10, r24
    15aa:	b1 08       	sbc	r11, r1
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <conv_int+0x58>
    15ae:	43 c0       	rjmp	.+134    	; 0x1636 <conv_int+0xde>
    15b0:	c7 01       	movw	r24, r14
    15b2:	0e 94 13 15 	call	0x2a26	; 0x2a26 <fgetc>
    15b6:	97 fd       	sbrc	r25, 7
    15b8:	3e c0       	rjmp	.+124    	; 0x1636 <conv_int+0xde>
    15ba:	28 2f       	mov	r18, r24
    15bc:	2f 7d       	andi	r18, 0xDF	; 223
    15be:	28 35       	cpi	r18, 0x58	; 88
    15c0:	51 f4       	brne	.+20     	; 0x15d6 <conv_int+0x7e>
    15c2:	c2 64       	ori	r28, 0x42	; 66
    15c4:	02 50       	subi	r16, 0x02	; 2
    15c6:	11 09       	sbc	r17, r1
    15c8:	b1 f1       	breq	.+108    	; 0x1636 <conv_int+0xde>
    15ca:	c7 01       	movw	r24, r14
    15cc:	0e 94 13 15 	call	0x2a26	; 0x2a26 <fgetc>
    15d0:	97 ff       	sbrs	r25, 7
    15d2:	07 c0       	rjmp	.+14     	; 0x15e2 <conv_int+0x8a>
    15d4:	30 c0       	rjmp	.+96     	; 0x1636 <conv_int+0xde>
    15d6:	d6 ff       	sbrs	r29, 6
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <conv_int+0x86>
    15da:	c2 60       	ori	r28, 0x02	; 2
    15dc:	01 c0       	rjmp	.+2      	; 0x15e0 <conv_int+0x88>
    15de:	c2 61       	ori	r28, 0x12	; 18
    15e0:	85 01       	movw	r16, r10
    15e2:	81 2c       	mov	r8, r1
    15e4:	91 2c       	mov	r9, r1
    15e6:	54 01       	movw	r10, r8
    15e8:	20 ed       	ldi	r18, 0xD0	; 208
    15ea:	28 0f       	add	r18, r24
    15ec:	28 30       	cpi	r18, 0x08	; 8
    15ee:	80 f0       	brcs	.+32     	; 0x1610 <conv_int+0xb8>
    15f0:	c4 ff       	sbrs	r28, 4
    15f2:	04 c0       	rjmp	.+8      	; 0x15fc <conv_int+0xa4>
    15f4:	b7 01       	movw	r22, r14
    15f6:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <ungetc>
    15fa:	1a c0       	rjmp	.+52     	; 0x1630 <conv_int+0xd8>
    15fc:	2a 30       	cpi	r18, 0x0A	; 10
    15fe:	40 f0       	brcs	.+16     	; 0x1610 <conv_int+0xb8>
    1600:	c6 ff       	sbrs	r28, 6
    1602:	f8 cf       	rjmp	.-16     	; 0x15f4 <conv_int+0x9c>
    1604:	2f 7d       	andi	r18, 0xDF	; 223
    1606:	3f ee       	ldi	r19, 0xEF	; 239
    1608:	32 0f       	add	r19, r18
    160a:	36 30       	cpi	r19, 0x06	; 6
    160c:	98 f7       	brcc	.-26     	; 0x15f4 <conv_int+0x9c>
    160e:	27 50       	subi	r18, 0x07	; 7
    1610:	4c 2f       	mov	r20, r28
    1612:	c5 01       	movw	r24, r10
    1614:	b4 01       	movw	r22, r8
    1616:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <mulacc>
    161a:	4b 01       	movw	r8, r22
    161c:	5c 01       	movw	r10, r24
    161e:	c2 60       	ori	r28, 0x02	; 2
    1620:	01 50       	subi	r16, 0x01	; 1
    1622:	11 09       	sbc	r17, r1
    1624:	59 f0       	breq	.+22     	; 0x163c <conv_int+0xe4>
    1626:	c7 01       	movw	r24, r14
    1628:	0e 94 13 15 	call	0x2a26	; 0x2a26 <fgetc>
    162c:	97 ff       	sbrs	r25, 7
    162e:	dc cf       	rjmp	.-72     	; 0x15e8 <conv_int+0x90>
    1630:	c1 fd       	sbrc	r28, 1
    1632:	04 c0       	rjmp	.+8      	; 0x163c <conv_int+0xe4>
    1634:	a9 cf       	rjmp	.-174    	; 0x1588 <conv_int+0x30>
    1636:	81 2c       	mov	r8, r1
    1638:	91 2c       	mov	r9, r1
    163a:	54 01       	movw	r10, r8
    163c:	c7 ff       	sbrs	r28, 7
    163e:	08 c0       	rjmp	.+16     	; 0x1650 <conv_int+0xf8>
    1640:	b0 94       	com	r11
    1642:	a0 94       	com	r10
    1644:	90 94       	com	r9
    1646:	80 94       	com	r8
    1648:	81 1c       	adc	r8, r1
    164a:	91 1c       	adc	r9, r1
    164c:	a1 1c       	adc	r10, r1
    164e:	b1 1c       	adc	r11, r1
    1650:	2c 2f       	mov	r18, r28
    1652:	b5 01       	movw	r22, r10
    1654:	a4 01       	movw	r20, r8
    1656:	c6 01       	movw	r24, r12
    1658:	0e 94 67 0a 	call	0x14ce	; 0x14ce <putval>
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	ec e0       	ldi	r30, 0x0C	; 12
    1664:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__epilogue_restores__+0xc>

00001668 <conv_brk>:
    1668:	a0 e2       	ldi	r26, 0x20	; 32
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	ea e3       	ldi	r30, 0x3A	; 58
    166e:	fb e0       	ldi	r31, 0x0B	; 11
    1670:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__prologue_saves__+0x4>
    1674:	4c 01       	movw	r8, r24
    1676:	5b 01       	movw	r10, r22
    1678:	7a 01       	movw	r14, r20
    167a:	8e 01       	movw	r16, r28
    167c:	0f 5f       	subi	r16, 0xFF	; 255
    167e:	1f 4f       	sbci	r17, 0xFF	; 255
    1680:	68 01       	movw	r12, r16
    1682:	80 e2       	ldi	r24, 0x20	; 32
    1684:	f8 01       	movw	r30, r16
    1686:	11 92       	st	Z+, r1
    1688:	8a 95       	dec	r24
    168a:	e9 f7       	brne	.-6      	; 0x1686 <conv_brk+0x1e>
    168c:	f4 01       	movw	r30, r8
    168e:	63 80       	ldd	r6, Z+3	; 0x03
    1690:	40 e0       	ldi	r20, 0x00	; 0
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	71 2c       	mov	r7, r1
    1696:	41 2c       	mov	r4, r1
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	a1 e0       	ldi	r26, 0x01	; 1
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	f9 01       	movw	r30, r18
    16a0:	63 fc       	sbrc	r6, 3
    16a2:	55 90       	lpm	r5, Z+
    16a4:	63 fe       	sbrs	r6, 3
    16a6:	51 90       	ld	r5, Z+
    16a8:	8f 01       	movw	r16, r30
    16aa:	95 2d       	mov	r25, r5
    16ac:	9f 01       	movw	r18, r30
    16ae:	51 10       	cpse	r5, r1
    16b0:	03 c0       	rjmp	.+6      	; 0x16b8 <conv_brk+0x50>
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	80 c0       	rjmp	.+256    	; 0x17b8 <conv_brk+0x150>
    16b8:	fe e5       	ldi	r31, 0x5E	; 94
    16ba:	5f 12       	cpse	r5, r31
    16bc:	03 c0       	rjmp	.+6      	; 0x16c4 <conv_brk+0x5c>
    16be:	41 15       	cp	r20, r1
    16c0:	51 05       	cpc	r21, r1
    16c2:	61 f1       	breq	.+88     	; 0x171c <conv_brk+0xb4>
    16c4:	68 2f       	mov	r22, r24
    16c6:	70 e0       	ldi	r23, 0x00	; 0
    16c8:	64 17       	cp	r22, r20
    16ca:	75 07       	cpc	r23, r21
    16cc:	4c f4       	brge	.+18     	; 0x16e0 <conv_brk+0x78>
    16ce:	6d e5       	ldi	r22, 0x5D	; 93
    16d0:	56 16       	cp	r5, r22
    16d2:	69 f1       	breq	.+90     	; 0x172e <conv_brk+0xc6>
    16d4:	ed e2       	ldi	r30, 0x2D	; 45
    16d6:	5e 12       	cpse	r5, r30
    16d8:	03 c0       	rjmp	.+6      	; 0x16e0 <conv_brk+0x78>
    16da:	44 20       	and	r4, r4
    16dc:	09 f1       	breq	.+66     	; 0x1720 <conv_brk+0xb8>
    16de:	03 c0       	rjmp	.+6      	; 0x16e6 <conv_brk+0x7e>
    16e0:	41 10       	cpse	r4, r1
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <conv_brk+0x7e>
    16e4:	75 2c       	mov	r7, r5
    16e6:	69 2f       	mov	r22, r25
    16e8:	66 95       	lsr	r22
    16ea:	66 95       	lsr	r22
    16ec:	66 95       	lsr	r22
    16ee:	f6 01       	movw	r30, r12
    16f0:	e6 0f       	add	r30, r22
    16f2:	f1 1d       	adc	r31, r1
    16f4:	69 2f       	mov	r22, r25
    16f6:	67 70       	andi	r22, 0x07	; 7
    16f8:	8d 01       	movw	r16, r26
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <conv_brk+0x98>
    16fc:	00 0f       	add	r16, r16
    16fe:	11 1f       	adc	r17, r17
    1700:	6a 95       	dec	r22
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <conv_brk+0x94>
    1704:	b8 01       	movw	r22, r16
    1706:	70 81       	ld	r23, Z
    1708:	67 2b       	or	r22, r23
    170a:	60 83       	st	Z, r22
    170c:	97 15       	cp	r25, r7
    170e:	59 f0       	breq	.+22     	; 0x1726 <conv_brk+0xbe>
    1710:	97 15       	cp	r25, r7
    1712:	10 f4       	brcc	.+4      	; 0x1718 <conv_brk+0xb0>
    1714:	9f 5f       	subi	r25, 0xFF	; 255
    1716:	e7 cf       	rjmp	.-50     	; 0x16e6 <conv_brk+0x7e>
    1718:	91 50       	subi	r25, 0x01	; 1
    171a:	e5 cf       	rjmp	.-54     	; 0x16e6 <conv_brk+0x7e>
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <conv_brk+0xc0>
    1720:	44 24       	eor	r4, r4
    1722:	43 94       	inc	r4
    1724:	01 c0       	rjmp	.+2      	; 0x1728 <conv_brk+0xc0>
    1726:	41 2c       	mov	r4, r1
    1728:	4f 5f       	subi	r20, 0xFF	; 255
    172a:	5f 4f       	sbci	r21, 0xFF	; 255
    172c:	b8 cf       	rjmp	.-144    	; 0x169e <conv_brk+0x36>
    172e:	44 20       	and	r4, r4
    1730:	19 f0       	breq	.+6      	; 0x1738 <conv_brk+0xd0>
    1732:	9e 81       	ldd	r25, Y+6	; 0x06
    1734:	90 62       	ori	r25, 0x20	; 32
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	81 11       	cpse	r24, r1
    173a:	03 c0       	rjmp	.+6      	; 0x1742 <conv_brk+0xda>
    173c:	77 24       	eor	r7, r7
    173e:	73 94       	inc	r7
    1740:	18 c0       	rjmp	.+48     	; 0x1772 <conv_brk+0x10a>
    1742:	f6 01       	movw	r30, r12
    1744:	9e 01       	movw	r18, r28
    1746:	2f 5d       	subi	r18, 0xDF	; 223
    1748:	3f 4f       	sbci	r19, 0xFF	; 255
    174a:	80 81       	ld	r24, Z
    174c:	80 95       	com	r24
    174e:	81 93       	st	Z+, r24
    1750:	e2 17       	cp	r30, r18
    1752:	f3 07       	cpc	r31, r19
    1754:	d1 f7       	brne	.-12     	; 0x174a <conv_brk+0xe2>
    1756:	f2 cf       	rjmp	.-28     	; 0x173c <conv_brk+0xd4>
    1758:	e1 14       	cp	r14, r1
    175a:	f1 04       	cpc	r15, r1
    175c:	29 f0       	breq	.+10     	; 0x1768 <conv_brk+0x100>
    175e:	f7 01       	movw	r30, r14
    1760:	80 83       	st	Z, r24
    1762:	c7 01       	movw	r24, r14
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	7c 01       	movw	r14, r24
    1768:	91 e0       	ldi	r25, 0x01	; 1
    176a:	a9 1a       	sub	r10, r25
    176c:	b1 08       	sbc	r11, r1
    176e:	71 2c       	mov	r7, r1
    1770:	e9 f0       	breq	.+58     	; 0x17ac <conv_brk+0x144>
    1772:	c4 01       	movw	r24, r8
    1774:	0e 94 13 15 	call	0x2a26	; 0x2a26 <fgetc>
    1778:	97 fd       	sbrc	r25, 7
    177a:	16 c0       	rjmp	.+44     	; 0x17a8 <conv_brk+0x140>
    177c:	28 2f       	mov	r18, r24
    177e:	26 95       	lsr	r18
    1780:	26 95       	lsr	r18
    1782:	26 95       	lsr	r18
    1784:	f6 01       	movw	r30, r12
    1786:	e2 0f       	add	r30, r18
    1788:	f1 1d       	adc	r31, r1
    178a:	20 81       	ld	r18, Z
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	ac 01       	movw	r20, r24
    1790:	47 70       	andi	r20, 0x07	; 7
    1792:	55 27       	eor	r21, r21
    1794:	02 c0       	rjmp	.+4      	; 0x179a <conv_brk+0x132>
    1796:	35 95       	asr	r19
    1798:	27 95       	ror	r18
    179a:	4a 95       	dec	r20
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <conv_brk+0x12e>
    179e:	20 fd       	sbrc	r18, 0
    17a0:	db cf       	rjmp	.-74     	; 0x1758 <conv_brk+0xf0>
    17a2:	b4 01       	movw	r22, r8
    17a4:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <ungetc>
    17a8:	71 10       	cpse	r7, r1
    17aa:	83 cf       	rjmp	.-250    	; 0x16b2 <conv_brk+0x4a>
    17ac:	e1 14       	cp	r14, r1
    17ae:	f1 04       	cpc	r15, r1
    17b0:	11 f0       	breq	.+4      	; 0x17b6 <conv_brk+0x14e>
    17b2:	f7 01       	movw	r30, r14
    17b4:	10 82       	st	Z, r1
    17b6:	c8 01       	movw	r24, r16
    17b8:	a0 96       	adiw	r28, 0x20	; 32
    17ba:	e0 e1       	ldi	r30, 0x10	; 16
    17bc:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__epilogue_restores__+0x4>

000017c0 <conv_flt>:
    17c0:	a6 e0       	ldi	r26, 0x06	; 6
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e6 ee       	ldi	r30, 0xE6	; 230
    17c6:	fb e0       	ldi	r31, 0x0B	; 11
    17c8:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__prologue_saves__>
    17cc:	5c 01       	movw	r10, r24
    17ce:	7b 01       	movw	r14, r22
    17d0:	1a 01       	movw	r2, r20
    17d2:	0e 94 13 15 	call	0x2a26	; 0x2a26 <fgetc>
    17d6:	9e 83       	std	Y+6, r25	; 0x06
    17d8:	8d 83       	std	Y+5, r24	; 0x05
    17da:	99 27       	eor	r25, r25
    17dc:	8b 32       	cpi	r24, 0x2B	; 43
    17de:	91 05       	cpc	r25, r1
    17e0:	21 f0       	breq	.+8      	; 0x17ea <conv_flt+0x2a>
    17e2:	8d 97       	sbiw	r24, 0x2d	; 45
    17e4:	89 f4       	brne	.+34     	; 0x1808 <conv_flt+0x48>
    17e6:	10 e8       	ldi	r17, 0x80	; 128
    17e8:	01 c0       	rjmp	.+2      	; 0x17ec <conv_flt+0x2c>
    17ea:	10 e0       	ldi	r17, 0x00	; 0
    17ec:	21 e0       	ldi	r18, 0x01	; 1
    17ee:	e2 1a       	sub	r14, r18
    17f0:	f1 08       	sbc	r15, r1
    17f2:	11 f4       	brne	.+4      	; 0x17f8 <conv_flt+0x38>
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	2c c1       	rjmp	.+600    	; 0x1a50 <conv_flt+0x290>
    17f8:	c5 01       	movw	r24, r10
    17fa:	0e 94 13 15 	call	0x2a26	; 0x2a26 <fgetc>
    17fe:	9e 83       	std	Y+6, r25	; 0x06
    1800:	8d 83       	std	Y+5, r24	; 0x05
    1802:	97 ff       	sbrs	r25, 7
    1804:	02 c0       	rjmp	.+4      	; 0x180a <conv_flt+0x4a>
    1806:	f6 cf       	rjmp	.-20     	; 0x17f4 <conv_flt+0x34>
    1808:	10 e0       	ldi	r17, 0x00	; 0
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	0e 94 92 14 	call	0x2924	; 0x2924 <tolower>
    1812:	89 36       	cpi	r24, 0x69	; 105
    1814:	91 05       	cpc	r25, r1
    1816:	49 f0       	breq	.+18     	; 0x182a <conv_flt+0x6a>
    1818:	8e 36       	cpi	r24, 0x6E	; 110
    181a:	91 05       	cpc	r25, r1
    181c:	09 f0       	breq	.+2      	; 0x1820 <conv_flt+0x60>
    181e:	3b c0       	rjmp	.+118    	; 0x1896 <conv_flt+0xd6>
    1820:	62 e8       	ldi	r22, 0x82	; 130
    1822:	86 2e       	mov	r8, r22
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	96 2e       	mov	r9, r22
    1828:	04 c0       	rjmp	.+8      	; 0x1832 <conv_flt+0x72>
    182a:	75 e8       	ldi	r23, 0x85	; 133
    182c:	87 2e       	mov	r8, r23
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	97 2e       	mov	r9, r23
    1832:	ef ef       	ldi	r30, 0xFF	; 255
    1834:	8e 1a       	sub	r8, r30
    1836:	9e 0a       	sbc	r9, r30
    1838:	f4 01       	movw	r30, r8
    183a:	31 97       	sbiw	r30, 0x01	; 1
    183c:	04 91       	lpm	r16, Z
    183e:	00 23       	and	r16, r16
    1840:	c9 f0       	breq	.+50     	; 0x1874 <conv_flt+0xb4>
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	e8 1a       	sub	r14, r24
    1846:	f1 08       	sbc	r15, r1
    1848:	71 f0       	breq	.+28     	; 0x1866 <conv_flt+0xa6>
    184a:	c5 01       	movw	r24, r10
    184c:	0e 94 13 15 	call	0x2a26	; 0x2a26 <fgetc>
    1850:	6c 01       	movw	r12, r24
    1852:	97 fd       	sbrc	r25, 7
    1854:	08 c0       	rjmp	.+16     	; 0x1866 <conv_flt+0xa6>
    1856:	0e 94 92 14 	call	0x2924	; 0x2924 <tolower>
    185a:	08 17       	cp	r16, r24
    185c:	51 f3       	breq	.-44     	; 0x1832 <conv_flt+0x72>
    185e:	b5 01       	movw	r22, r10
    1860:	c6 01       	movw	r24, r12
    1862:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <ungetc>
    1866:	98 e8       	ldi	r25, 0x88	; 136
    1868:	89 16       	cp	r8, r25
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	99 06       	cpc	r9, r25
    186e:	09 f0       	breq	.+2      	; 0x1872 <conv_flt+0xb2>
    1870:	c1 cf       	rjmp	.-126    	; 0x17f4 <conv_flt+0x34>
    1872:	05 c0       	rjmp	.+10     	; 0x187e <conv_flt+0xbe>
    1874:	f5 e8       	ldi	r31, 0x85	; 133
    1876:	8f 16       	cp	r8, r31
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	9f 06       	cpc	r9, r31
    187c:	29 f0       	breq	.+10     	; 0x1888 <conv_flt+0xc8>
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	a0 e8       	ldi	r26, 0x80	; 128
    1884:	bf e7       	ldi	r27, 0x7F	; 127
    1886:	04 c0       	rjmp	.+8      	; 0x1890 <conv_flt+0xd0>
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	a0 ec       	ldi	r26, 0xC0	; 192
    188e:	bf e7       	ldi	r27, 0x7F	; 127
    1890:	bc 01       	movw	r22, r24
    1892:	cd 01       	movw	r24, r26
    1894:	cd c0       	rjmp	.+410    	; 0x1a30 <conv_flt+0x270>
    1896:	41 2c       	mov	r4, r1
    1898:	51 2c       	mov	r5, r1
    189a:	32 01       	movw	r6, r4
    189c:	c1 2c       	mov	r12, r1
    189e:	d1 2c       	mov	r13, r1
    18a0:	2d 81       	ldd	r18, Y+5	; 0x05
    18a2:	20 53       	subi	r18, 0x30	; 48
    18a4:	2a 30       	cpi	r18, 0x0A	; 10
    18a6:	18 f5       	brcc	.+70     	; 0x18ee <conv_flt+0x12e>
    18a8:	01 2f       	mov	r16, r17
    18aa:	02 60       	ori	r16, 0x02	; 2
    18ac:	81 2f       	mov	r24, r17
    18ae:	88 70       	andi	r24, 0x08	; 8
    18b0:	12 ff       	sbrs	r17, 2
    18b2:	06 c0       	rjmp	.+12     	; 0x18c0 <conv_flt+0x100>
    18b4:	81 11       	cpse	r24, r1
    18b6:	21 c0       	rjmp	.+66     	; 0x18fa <conv_flt+0x13a>
    18b8:	2f ef       	ldi	r18, 0xFF	; 255
    18ba:	c2 1a       	sub	r12, r18
    18bc:	d2 0a       	sbc	r13, r18
    18be:	1d c0       	rjmp	.+58     	; 0x18fa <conv_flt+0x13a>
    18c0:	88 23       	and	r24, r24
    18c2:	19 f0       	breq	.+6      	; 0x18ca <conv_flt+0x10a>
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	c8 1a       	sub	r12, r24
    18c8:	d1 08       	sbc	r13, r1
    18ca:	40 e2       	ldi	r20, 0x20	; 32
    18cc:	c3 01       	movw	r24, r6
    18ce:	b2 01       	movw	r22, r4
    18d0:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <mulacc>
    18d4:	2b 01       	movw	r4, r22
    18d6:	3c 01       	movw	r6, r24
    18d8:	98 e9       	ldi	r25, 0x98	; 152
    18da:	49 16       	cp	r4, r25
    18dc:	99 e9       	ldi	r25, 0x99	; 153
    18de:	59 06       	cpc	r5, r25
    18e0:	69 06       	cpc	r6, r25
    18e2:	99 e1       	ldi	r25, 0x19	; 25
    18e4:	79 06       	cpc	r7, r25
    18e6:	48 f0       	brcs	.+18     	; 0x18fa <conv_flt+0x13a>
    18e8:	01 2f       	mov	r16, r17
    18ea:	06 60       	ori	r16, 0x06	; 6
    18ec:	06 c0       	rjmp	.+12     	; 0x18fa <conv_flt+0x13a>
    18ee:	2e 3f       	cpi	r18, 0xFE	; 254
    18f0:	91 f4       	brne	.+36     	; 0x1916 <conv_flt+0x156>
    18f2:	13 fd       	sbrc	r17, 3
    18f4:	10 c0       	rjmp	.+32     	; 0x1916 <conv_flt+0x156>
    18f6:	01 2f       	mov	r16, r17
    18f8:	08 60       	ori	r16, 0x08	; 8
    18fa:	e1 e0       	ldi	r30, 0x01	; 1
    18fc:	ee 1a       	sub	r14, r30
    18fe:	f1 08       	sbc	r15, r1
    1900:	49 f0       	breq	.+18     	; 0x1914 <conv_flt+0x154>
    1902:	c5 01       	movw	r24, r10
    1904:	0e 94 13 15 	call	0x2a26	; 0x2a26 <fgetc>
    1908:	9e 83       	std	Y+6, r25	; 0x06
    190a:	8d 83       	std	Y+5, r24	; 0x05
    190c:	10 2f       	mov	r17, r16
    190e:	97 ff       	sbrs	r25, 7
    1910:	c7 cf       	rjmp	.-114    	; 0x18a0 <conv_flt+0xe0>
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <conv_flt+0x156>
    1914:	10 2f       	mov	r17, r16
    1916:	11 ff       	sbrs	r17, 1
    1918:	6d cf       	rjmp	.-294    	; 0x17f4 <conv_flt+0x34>
    191a:	8d 81       	ldd	r24, Y+5	; 0x05
    191c:	8f 7d       	andi	r24, 0xDF	; 223
    191e:	85 34       	cpi	r24, 0x45	; 69
    1920:	09 f0       	breq	.+2      	; 0x1924 <conv_flt+0x164>
    1922:	4e c0       	rjmp	.+156    	; 0x19c0 <conv_flt+0x200>
    1924:	47 01       	movw	r8, r14
    1926:	f1 e0       	ldi	r31, 0x01	; 1
    1928:	8f 1a       	sub	r8, r31
    192a:	91 08       	sbc	r9, r1
    192c:	09 f4       	brne	.+2      	; 0x1930 <conv_flt+0x170>
    192e:	62 cf       	rjmp	.-316    	; 0x17f4 <conv_flt+0x34>
    1930:	c5 01       	movw	r24, r10
    1932:	0e 94 13 15 	call	0x2a26	; 0x2a26 <fgetc>
    1936:	9e 83       	std	Y+6, r25	; 0x06
    1938:	8d 83       	std	Y+5, r24	; 0x05
    193a:	97 fd       	sbrc	r25, 7
    193c:	5b cf       	rjmp	.-330    	; 0x17f4 <conv_flt+0x34>
    193e:	99 27       	eor	r25, r25
    1940:	8b 32       	cpi	r24, 0x2B	; 43
    1942:	91 05       	cpc	r25, r1
    1944:	19 f0       	breq	.+6      	; 0x194c <conv_flt+0x18c>
    1946:	8d 97       	sbiw	r24, 0x2d	; 45
    1948:	61 f4       	brne	.+24     	; 0x1962 <conv_flt+0x1a2>
    194a:	10 61       	ori	r17, 0x10	; 16
    194c:	47 01       	movw	r8, r14
    194e:	22 e0       	ldi	r18, 0x02	; 2
    1950:	82 1a       	sub	r8, r18
    1952:	91 08       	sbc	r9, r1
    1954:	09 f4       	brne	.+2      	; 0x1958 <conv_flt+0x198>
    1956:	4e cf       	rjmp	.-356    	; 0x17f4 <conv_flt+0x34>
    1958:	c5 01       	movw	r24, r10
    195a:	0e 94 13 15 	call	0x2a26	; 0x2a26 <fgetc>
    195e:	9e 83       	std	Y+6, r25	; 0x06
    1960:	8d 83       	std	Y+5, r24	; 0x05
    1962:	8d 81       	ldd	r24, Y+5	; 0x05
    1964:	9e 81       	ldd	r25, Y+6	; 0x06
    1966:	c0 97       	sbiw	r24, 0x30	; 48
    1968:	0a 97       	sbiw	r24, 0x0a	; 10
    196a:	08 f0       	brcs	.+2      	; 0x196e <conv_flt+0x1ae>
    196c:	43 cf       	rjmp	.-378    	; 0x17f4 <conv_flt+0x34>
    196e:	74 01       	movw	r14, r8
    1970:	81 2c       	mov	r8, r1
    1972:	91 2c       	mov	r9, r1
    1974:	b4 01       	movw	r22, r8
    1976:	99 0c       	add	r9, r9
    1978:	88 0b       	sbc	r24, r24
    197a:	99 0b       	sbc	r25, r25
    197c:	2d 81       	ldd	r18, Y+5	; 0x05
    197e:	20 53       	subi	r18, 0x30	; 48
    1980:	40 e2       	ldi	r20, 0x20	; 32
    1982:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <mulacc>
    1986:	ab 01       	movw	r20, r22
    1988:	bc 01       	movw	r22, r24
    198a:	4a 01       	movw	r8, r20
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	e8 1a       	sub	r14, r24
    1990:	f1 08       	sbc	r15, r1
    1992:	71 f0       	breq	.+28     	; 0x19b0 <conv_flt+0x1f0>
    1994:	c5 01       	movw	r24, r10
    1996:	49 83       	std	Y+1, r20	; 0x01
    1998:	5a 83       	std	Y+2, r21	; 0x02
    199a:	6b 83       	std	Y+3, r22	; 0x03
    199c:	7c 83       	std	Y+4, r23	; 0x04
    199e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <fgetc>
    19a2:	9e 83       	std	Y+6, r25	; 0x06
    19a4:	8d 83       	std	Y+5, r24	; 0x05
    19a6:	c0 97       	sbiw	r24, 0x30	; 48
    19a8:	49 81       	ldd	r20, Y+1	; 0x01
    19aa:	5a 81       	ldd	r21, Y+2	; 0x02
    19ac:	0a 97       	sbiw	r24, 0x0a	; 10
    19ae:	10 f3       	brcs	.-60     	; 0x1974 <conv_flt+0x1b4>
    19b0:	14 ff       	sbrs	r17, 4
    19b2:	04 c0       	rjmp	.+8      	; 0x19bc <conv_flt+0x1fc>
    19b4:	88 24       	eor	r8, r8
    19b6:	99 24       	eor	r9, r9
    19b8:	84 1a       	sub	r8, r20
    19ba:	95 0a       	sbc	r9, r21
    19bc:	c8 0c       	add	r12, r8
    19be:	d9 1c       	adc	r13, r9
    19c0:	ef 28       	or	r14, r15
    19c2:	41 f0       	breq	.+16     	; 0x19d4 <conv_flt+0x214>
    19c4:	ed 81       	ldd	r30, Y+5	; 0x05
    19c6:	fe 81       	ldd	r31, Y+6	; 0x06
    19c8:	f7 fd       	sbrc	r31, 7
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <conv_flt+0x214>
    19cc:	b5 01       	movw	r22, r10
    19ce:	cf 01       	movw	r24, r30
    19d0:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <ungetc>
    19d4:	c3 01       	movw	r24, r6
    19d6:	b2 01       	movw	r22, r4
    19d8:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__floatunsisf>
    19dc:	d7 fe       	sbrs	r13, 7
    19de:	08 c0       	rjmp	.+16     	; 0x19f0 <conv_flt+0x230>
    19e0:	d1 94       	neg	r13
    19e2:	c1 94       	neg	r12
    19e4:	d1 08       	sbc	r13, r1
    19e6:	51 ea       	ldi	r21, 0xA1	; 161
    19e8:	85 2e       	mov	r8, r21
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	95 2e       	mov	r9, r21
    19ee:	04 c0       	rjmp	.+8      	; 0x19f8 <conv_flt+0x238>
    19f0:	49 eb       	ldi	r20, 0xB9	; 185
    19f2:	84 2e       	mov	r8, r20
    19f4:	40 e0       	ldi	r20, 0x00	; 0
    19f6:	94 2e       	mov	r9, r20
    19f8:	54 01       	movw	r10, r8
    19fa:	f8 e1       	ldi	r31, 0x18	; 24
    19fc:	af 1a       	sub	r10, r31
    19fe:	b1 08       	sbc	r11, r1
    1a00:	30 e2       	ldi	r19, 0x20	; 32
    1a02:	e3 2e       	mov	r14, r19
    1a04:	f1 2c       	mov	r15, r1
    1a06:	ce 14       	cp	r12, r14
    1a08:	df 04       	cpc	r13, r15
    1a0a:	50 f0       	brcs	.+20     	; 0x1a20 <conv_flt+0x260>
    1a0c:	f4 01       	movw	r30, r8
    1a0e:	25 91       	lpm	r18, Z+
    1a10:	35 91       	lpm	r19, Z+
    1a12:	45 91       	lpm	r20, Z+
    1a14:	54 91       	lpm	r21, Z
    1a16:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__mulsf3>
    1a1a:	ce 18       	sub	r12, r14
    1a1c:	df 08       	sbc	r13, r15
    1a1e:	f3 cf       	rjmp	.-26     	; 0x1a06 <conv_flt+0x246>
    1a20:	24 e0       	ldi	r18, 0x04	; 4
    1a22:	82 1a       	sub	r8, r18
    1a24:	91 08       	sbc	r9, r1
    1a26:	f6 94       	lsr	r15
    1a28:	e7 94       	ror	r14
    1a2a:	8a 14       	cp	r8, r10
    1a2c:	9b 04       	cpc	r9, r11
    1a2e:	59 f7       	brne	.-42     	; 0x1a06 <conv_flt+0x246>
    1a30:	17 ff       	sbrs	r17, 7
    1a32:	05 c0       	rjmp	.+10     	; 0x1a3e <conv_flt+0x27e>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	b0 58       	subi	r27, 0x80	; 128
    1a3a:	bc 01       	movw	r22, r24
    1a3c:	cd 01       	movw	r24, r26
    1a3e:	21 14       	cp	r2, r1
    1a40:	31 04       	cpc	r3, r1
    1a42:	29 f0       	breq	.+10     	; 0x1a4e <conv_flt+0x28e>
    1a44:	f1 01       	movw	r30, r2
    1a46:	60 83       	st	Z, r22
    1a48:	71 83       	std	Z+1, r23	; 0x01
    1a4a:	82 83       	std	Z+2, r24	; 0x02
    1a4c:	93 83       	std	Z+3, r25	; 0x03
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	26 96       	adiw	r28, 0x06	; 6
    1a52:	e2 e1       	ldi	r30, 0x12	; 18
    1a54:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__epilogue_restores__>

00001a58 <vfscanf>:
    1a58:	a1 e0       	ldi	r26, 0x01	; 1
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e2 e3       	ldi	r30, 0x32	; 50
    1a5e:	fd e0       	ldi	r31, 0x0D	; 13
    1a60:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__prologue_saves__+0x4>
    1a64:	6c 01       	movw	r12, r24
    1a66:	2b 01       	movw	r4, r22
    1a68:	4a 01       	movw	r8, r20
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	17 82       	std	Z+7, r1	; 0x07
    1a6e:	16 82       	std	Z+6, r1	; 0x06
    1a70:	a1 2c       	mov	r10, r1
    1a72:	f6 01       	movw	r30, r12
    1a74:	f3 80       	ldd	r15, Z+3	; 0x03
    1a76:	f2 01       	movw	r30, r4
    1a78:	f3 fc       	sbrc	r15, 3
    1a7a:	85 91       	lpm	r24, Z+
    1a7c:	f3 fe       	sbrs	r15, 3
    1a7e:	81 91       	ld	r24, Z+
    1a80:	48 2f       	mov	r20, r24
    1a82:	2f 01       	movw	r4, r30
    1a84:	88 23       	and	r24, r24
    1a86:	09 f4       	brne	.+2      	; 0x1a8a <vfscanf+0x32>
    1a88:	10 c1       	rjmp	.+544    	; 0x1caa <vfscanf+0x252>
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	49 83       	std	Y+1, r20	; 0x01
    1a8e:	0e 94 89 14 	call	0x2912	; 0x2912 <isspace>
    1a92:	49 81       	ldd	r20, Y+1	; 0x01
    1a94:	89 2b       	or	r24, r25
    1a96:	21 f0       	breq	.+8      	; 0x1aa0 <vfscanf+0x48>
    1a98:	c6 01       	movw	r24, r12
    1a9a:	0e 94 93 0a 	call	0x1526	; 0x1526 <skip_spaces>
    1a9e:	e9 cf       	rjmp	.-46     	; 0x1a72 <vfscanf+0x1a>
    1aa0:	45 32       	cpi	r20, 0x25	; 37
    1aa2:	41 f4       	brne	.+16     	; 0x1ab4 <vfscanf+0x5c>
    1aa4:	f2 01       	movw	r30, r4
    1aa6:	f3 fc       	sbrc	r15, 3
    1aa8:	45 91       	lpm	r20, Z+
    1aaa:	f3 fe       	sbrs	r15, 3
    1aac:	41 91       	ld	r20, Z+
    1aae:	2f 01       	movw	r4, r30
    1ab0:	45 32       	cpi	r20, 0x25	; 37
    1ab2:	69 f4       	brne	.+26     	; 0x1ace <vfscanf+0x76>
    1ab4:	c6 01       	movw	r24, r12
    1ab6:	49 83       	std	Y+1, r20	; 0x01
    1ab8:	0e 94 13 15 	call	0x2a26	; 0x2a26 <fgetc>
    1abc:	49 81       	ldd	r20, Y+1	; 0x01
    1abe:	97 fd       	sbrc	r25, 7
    1ac0:	f2 c0       	rjmp	.+484    	; 0x1ca6 <vfscanf+0x24e>
    1ac2:	48 17       	cp	r20, r24
    1ac4:	b1 f2       	breq	.-84     	; 0x1a72 <vfscanf+0x1a>
    1ac6:	b6 01       	movw	r22, r12
    1ac8:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <ungetc>
    1acc:	ee c0       	rjmp	.+476    	; 0x1caa <vfscanf+0x252>
    1ace:	4a 32       	cpi	r20, 0x2A	; 42
    1ad0:	39 f4       	brne	.+14     	; 0x1ae0 <vfscanf+0x88>
    1ad2:	f3 fc       	sbrc	r15, 3
    1ad4:	45 91       	lpm	r20, Z+
    1ad6:	f3 fe       	sbrs	r15, 3
    1ad8:	41 91       	ld	r20, Z+
    1ada:	2f 01       	movw	r4, r30
    1adc:	51 e0       	ldi	r21, 0x01	; 1
    1ade:	01 c0       	rjmp	.+2      	; 0x1ae2 <vfscanf+0x8a>
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	32 01       	movw	r6, r4
    1ae4:	00 e0       	ldi	r16, 0x00	; 0
    1ae6:	10 e0       	ldi	r17, 0x00	; 0
    1ae8:	20 ed       	ldi	r18, 0xD0	; 208
    1aea:	24 0f       	add	r18, r20
    1aec:	2a 30       	cpi	r18, 0x0A	; 10
    1aee:	88 f4       	brcc	.+34     	; 0x1b12 <vfscanf+0xba>
    1af0:	52 60       	ori	r21, 0x02	; 2
    1af2:	b8 01       	movw	r22, r16
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	40 e2       	ldi	r20, 0x20	; 32
    1afa:	59 83       	std	Y+1, r21	; 0x01
    1afc:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <mulacc>
    1b00:	8b 01       	movw	r16, r22
    1b02:	f3 01       	movw	r30, r6
    1b04:	f3 fc       	sbrc	r15, 3
    1b06:	45 91       	lpm	r20, Z+
    1b08:	f3 fe       	sbrs	r15, 3
    1b0a:	41 91       	ld	r20, Z+
    1b0c:	3f 01       	movw	r6, r30
    1b0e:	59 81       	ldd	r21, Y+1	; 0x01
    1b10:	eb cf       	rjmp	.-42     	; 0x1ae8 <vfscanf+0x90>
    1b12:	b5 2e       	mov	r11, r21
    1b14:	34 2f       	mov	r19, r20
    1b16:	23 01       	movw	r4, r6
    1b18:	51 ff       	sbrs	r21, 1
    1b1a:	04 c0       	rjmp	.+8      	; 0x1b24 <vfscanf+0xcc>
    1b1c:	01 15       	cp	r16, r1
    1b1e:	11 05       	cpc	r17, r1
    1b20:	19 f4       	brne	.+6      	; 0x1b28 <vfscanf+0xd0>
    1b22:	c3 c0       	rjmp	.+390    	; 0x1caa <vfscanf+0x252>
    1b24:	0f ef       	ldi	r16, 0xFF	; 255
    1b26:	1f ef       	ldi	r17, 0xFF	; 255
    1b28:	48 36       	cpi	r20, 0x68	; 104
    1b2a:	19 f0       	breq	.+6      	; 0x1b32 <vfscanf+0xda>
    1b2c:	4c 36       	cpi	r20, 0x6C	; 108
    1b2e:	59 f0       	breq	.+22     	; 0x1b46 <vfscanf+0xee>
    1b30:	13 c0       	rjmp	.+38     	; 0x1b58 <vfscanf+0x100>
    1b32:	f3 01       	movw	r30, r6
    1b34:	f3 fc       	sbrc	r15, 3
    1b36:	35 91       	lpm	r19, Z+
    1b38:	f3 fe       	sbrs	r15, 3
    1b3a:	31 91       	ld	r19, Z+
    1b3c:	2f 01       	movw	r4, r30
    1b3e:	38 36       	cpi	r19, 0x68	; 104
    1b40:	59 f4       	brne	.+22     	; 0x1b58 <vfscanf+0x100>
    1b42:	58 60       	ori	r21, 0x08	; 8
    1b44:	b5 2e       	mov	r11, r21
    1b46:	fb 2d       	mov	r31, r11
    1b48:	f4 60       	ori	r31, 0x04	; 4
    1b4a:	bf 2e       	mov	r11, r31
    1b4c:	f2 01       	movw	r30, r4
    1b4e:	f3 fc       	sbrc	r15, 3
    1b50:	35 91       	lpm	r19, Z+
    1b52:	f3 fe       	sbrs	r15, 3
    1b54:	31 91       	ld	r19, Z+
    1b56:	2f 01       	movw	r4, r30
    1b58:	33 23       	and	r19, r19
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <vfscanf+0x106>
    1b5c:	a6 c0       	rjmp	.+332    	; 0x1caa <vfscanf+0x252>
    1b5e:	63 2f       	mov	r22, r19
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	80 e7       	ldi	r24, 0x70	; 112
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	39 83       	std	Y+1, r19	; 0x01
    1b68:	0e 94 a7 14 	call	0x294e	; 0x294e <strchr_P>
    1b6c:	39 81       	ldd	r19, Y+1	; 0x01
    1b6e:	89 2b       	or	r24, r25
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <vfscanf+0x11c>
    1b72:	9b c0       	rjmp	.+310    	; 0x1caa <vfscanf+0x252>
    1b74:	b0 fc       	sbrc	r11, 0
    1b76:	07 c0       	rjmp	.+14     	; 0x1b86 <vfscanf+0x12e>
    1b78:	f4 01       	movw	r30, r8
    1b7a:	e0 80       	ld	r14, Z
    1b7c:	f1 80       	ldd	r15, Z+1	; 0x01
    1b7e:	c4 01       	movw	r24, r8
    1b80:	02 96       	adiw	r24, 0x02	; 2
    1b82:	4c 01       	movw	r8, r24
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <vfscanf+0x132>
    1b86:	e1 2c       	mov	r14, r1
    1b88:	f1 2c       	mov	r15, r1
    1b8a:	3e 36       	cpi	r19, 0x6E	; 110
    1b8c:	51 f4       	brne	.+20     	; 0x1ba2 <vfscanf+0x14a>
    1b8e:	f6 01       	movw	r30, r12
    1b90:	46 81       	ldd	r20, Z+6	; 0x06
    1b92:	57 81       	ldd	r21, Z+7	; 0x07
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	70 e0       	ldi	r23, 0x00	; 0
    1b98:	2b 2d       	mov	r18, r11
    1b9a:	c7 01       	movw	r24, r14
    1b9c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <putval>
    1ba0:	68 cf       	rjmp	.-304    	; 0x1a72 <vfscanf+0x1a>
    1ba2:	33 36       	cpi	r19, 0x63	; 99
    1ba4:	a9 f4       	brne	.+42     	; 0x1bd0 <vfscanf+0x178>
    1ba6:	b1 fc       	sbrc	r11, 1
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <vfscanf+0x156>
    1baa:	01 e0       	ldi	r16, 0x01	; 1
    1bac:	10 e0       	ldi	r17, 0x00	; 0
    1bae:	c6 01       	movw	r24, r12
    1bb0:	0e 94 13 15 	call	0x2a26	; 0x2a26 <fgetc>
    1bb4:	97 fd       	sbrc	r25, 7
    1bb6:	77 c0       	rjmp	.+238    	; 0x1ca6 <vfscanf+0x24e>
    1bb8:	e1 14       	cp	r14, r1
    1bba:	f1 04       	cpc	r15, r1
    1bbc:	29 f0       	breq	.+10     	; 0x1bc8 <vfscanf+0x170>
    1bbe:	f7 01       	movw	r30, r14
    1bc0:	80 83       	st	Z, r24
    1bc2:	c7 01       	movw	r24, r14
    1bc4:	01 96       	adiw	r24, 0x01	; 1
    1bc6:	7c 01       	movw	r14, r24
    1bc8:	01 50       	subi	r16, 0x01	; 1
    1bca:	11 09       	sbc	r17, r1
    1bcc:	81 f7       	brne	.-32     	; 0x1bae <vfscanf+0x156>
    1bce:	67 c0       	rjmp	.+206    	; 0x1c9e <vfscanf+0x246>
    1bd0:	3b 35       	cpi	r19, 0x5B	; 91
    1bd2:	59 f4       	brne	.+22     	; 0x1bea <vfscanf+0x192>
    1bd4:	92 01       	movw	r18, r4
    1bd6:	a7 01       	movw	r20, r14
    1bd8:	b8 01       	movw	r22, r16
    1bda:	c6 01       	movw	r24, r12
    1bdc:	0e 94 34 0b 	call	0x1668	; 0x1668 <conv_brk>
    1be0:	2c 01       	movw	r4, r24
    1be2:	89 2b       	or	r24, r25
    1be4:	09 f0       	breq	.+2      	; 0x1be8 <vfscanf+0x190>
    1be6:	5b c0       	rjmp	.+182    	; 0x1c9e <vfscanf+0x246>
    1be8:	55 c0       	rjmp	.+170    	; 0x1c94 <vfscanf+0x23c>
    1bea:	c6 01       	movw	r24, r12
    1bec:	39 83       	std	Y+1, r19	; 0x01
    1bee:	0e 94 93 0a 	call	0x1526	; 0x1526 <skip_spaces>
    1bf2:	39 81       	ldd	r19, Y+1	; 0x01
    1bf4:	97 fd       	sbrc	r25, 7
    1bf6:	57 c0       	rjmp	.+174    	; 0x1ca6 <vfscanf+0x24e>
    1bf8:	3f 36       	cpi	r19, 0x6F	; 111
    1bfa:	d9 f1       	breq	.+118    	; 0x1c72 <vfscanf+0x21a>
    1bfc:	40 f4       	brcc	.+16     	; 0x1c0e <vfscanf+0x1b6>
    1bfe:	34 36       	cpi	r19, 0x64	; 100
    1c00:	a1 f1       	breq	.+104    	; 0x1c6a <vfscanf+0x212>
    1c02:	39 36       	cpi	r19, 0x69	; 105
    1c04:	c9 f1       	breq	.+114    	; 0x1c78 <vfscanf+0x220>
    1c06:	38 35       	cpi	r19, 0x58	; 88
    1c08:	09 f0       	breq	.+2      	; 0x1c0c <vfscanf+0x1b4>
    1c0a:	3d c0       	rjmp	.+122    	; 0x1c86 <vfscanf+0x22e>
    1c0c:	2a c0       	rjmp	.+84     	; 0x1c62 <vfscanf+0x20a>
    1c0e:	33 37       	cpi	r19, 0x73	; 115
    1c10:	a1 f0       	breq	.+40     	; 0x1c3a <vfscanf+0x1e2>
    1c12:	18 f4       	brcc	.+6      	; 0x1c1a <vfscanf+0x1c2>
    1c14:	30 37       	cpi	r19, 0x70	; 112
    1c16:	29 f1       	breq	.+74     	; 0x1c62 <vfscanf+0x20a>
    1c18:	36 c0       	rjmp	.+108    	; 0x1c86 <vfscanf+0x22e>
    1c1a:	35 37       	cpi	r19, 0x75	; 117
    1c1c:	31 f1       	breq	.+76     	; 0x1c6a <vfscanf+0x212>
    1c1e:	38 37       	cpi	r19, 0x78	; 120
    1c20:	01 f1       	breq	.+64     	; 0x1c62 <vfscanf+0x20a>
    1c22:	31 c0       	rjmp	.+98     	; 0x1c86 <vfscanf+0x22e>
    1c24:	e1 14       	cp	r14, r1
    1c26:	f1 04       	cpc	r15, r1
    1c28:	29 f0       	breq	.+10     	; 0x1c34 <vfscanf+0x1dc>
    1c2a:	f7 01       	movw	r30, r14
    1c2c:	60 82       	st	Z, r6
    1c2e:	c7 01       	movw	r24, r14
    1c30:	01 96       	adiw	r24, 0x01	; 1
    1c32:	7c 01       	movw	r14, r24
    1c34:	01 50       	subi	r16, 0x01	; 1
    1c36:	11 09       	sbc	r17, r1
    1c38:	71 f0       	breq	.+28     	; 0x1c56 <vfscanf+0x1fe>
    1c3a:	c6 01       	movw	r24, r12
    1c3c:	0e 94 13 15 	call	0x2a26	; 0x2a26 <fgetc>
    1c40:	3c 01       	movw	r6, r24
    1c42:	97 fd       	sbrc	r25, 7
    1c44:	08 c0       	rjmp	.+16     	; 0x1c56 <vfscanf+0x1fe>
    1c46:	0e 94 89 14 	call	0x2912	; 0x2912 <isspace>
    1c4a:	89 2b       	or	r24, r25
    1c4c:	59 f3       	breq	.-42     	; 0x1c24 <vfscanf+0x1cc>
    1c4e:	b6 01       	movw	r22, r12
    1c50:	c3 01       	movw	r24, r6
    1c52:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <ungetc>
    1c56:	e1 14       	cp	r14, r1
    1c58:	f1 04       	cpc	r15, r1
    1c5a:	09 f1       	breq	.+66     	; 0x1c9e <vfscanf+0x246>
    1c5c:	f7 01       	movw	r30, r14
    1c5e:	10 82       	st	Z, r1
    1c60:	1e c0       	rjmp	.+60     	; 0x1c9e <vfscanf+0x246>
    1c62:	fb 2d       	mov	r31, r11
    1c64:	f0 64       	ori	r31, 0x40	; 64
    1c66:	bf 2e       	mov	r11, r31
    1c68:	07 c0       	rjmp	.+14     	; 0x1c78 <vfscanf+0x220>
    1c6a:	8b 2d       	mov	r24, r11
    1c6c:	80 62       	ori	r24, 0x20	; 32
    1c6e:	b8 2e       	mov	r11, r24
    1c70:	03 c0       	rjmp	.+6      	; 0x1c78 <vfscanf+0x220>
    1c72:	9b 2d       	mov	r25, r11
    1c74:	90 61       	ori	r25, 0x10	; 16
    1c76:	b9 2e       	mov	r11, r25
    1c78:	2b 2d       	mov	r18, r11
    1c7a:	a7 01       	movw	r20, r14
    1c7c:	b8 01       	movw	r22, r16
    1c7e:	c6 01       	movw	r24, r12
    1c80:	0e 94 ac 0a 	call	0x1558	; 0x1558 <conv_int>
    1c84:	05 c0       	rjmp	.+10     	; 0x1c90 <vfscanf+0x238>
    1c86:	a7 01       	movw	r20, r14
    1c88:	b8 01       	movw	r22, r16
    1c8a:	c6 01       	movw	r24, r12
    1c8c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <conv_flt>
    1c90:	81 11       	cpse	r24, r1
    1c92:	05 c0       	rjmp	.+10     	; 0x1c9e <vfscanf+0x246>
    1c94:	f6 01       	movw	r30, r12
    1c96:	83 81       	ldd	r24, Z+3	; 0x03
    1c98:	80 73       	andi	r24, 0x30	; 48
    1c9a:	29 f4       	brne	.+10     	; 0x1ca6 <vfscanf+0x24e>
    1c9c:	06 c0       	rjmp	.+12     	; 0x1caa <vfscanf+0x252>
    1c9e:	b0 fc       	sbrc	r11, 0
    1ca0:	e8 ce       	rjmp	.-560    	; 0x1a72 <vfscanf+0x1a>
    1ca2:	a3 94       	inc	r10
    1ca4:	e6 ce       	rjmp	.-564    	; 0x1a72 <vfscanf+0x1a>
    1ca6:	aa 20       	and	r10, r10
    1ca8:	19 f0       	breq	.+6      	; 0x1cb0 <vfscanf+0x258>
    1caa:	8a 2d       	mov	r24, r10
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <vfscanf+0x25c>
    1cb0:	8f ef       	ldi	r24, 0xFF	; 255
    1cb2:	9f ef       	ldi	r25, 0xFF	; 255
    1cb4:	21 96       	adiw	r28, 0x01	; 1
    1cb6:	e0 e1       	ldi	r30, 0x10	; 16
    1cb8:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__epilogue_restores__+0x4>

00001cbc <__floatunsisf>:
    1cbc:	e8 94       	clt
    1cbe:	09 c0       	rjmp	.+18     	; 0x1cd2 <__floatsisf+0x12>

00001cc0 <__floatsisf>:
    1cc0:	97 fb       	bst	r25, 7
    1cc2:	3e f4       	brtc	.+14     	; 0x1cd2 <__floatsisf+0x12>
    1cc4:	90 95       	com	r25
    1cc6:	80 95       	com	r24
    1cc8:	70 95       	com	r23
    1cca:	61 95       	neg	r22
    1ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cce:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd2:	99 23       	and	r25, r25
    1cd4:	a9 f0       	breq	.+42     	; 0x1d00 <__floatsisf+0x40>
    1cd6:	f9 2f       	mov	r31, r25
    1cd8:	96 e9       	ldi	r25, 0x96	; 150
    1cda:	bb 27       	eor	r27, r27
    1cdc:	93 95       	inc	r25
    1cde:	f6 95       	lsr	r31
    1ce0:	87 95       	ror	r24
    1ce2:	77 95       	ror	r23
    1ce4:	67 95       	ror	r22
    1ce6:	b7 95       	ror	r27
    1ce8:	f1 11       	cpse	r31, r1
    1cea:	f8 cf       	rjmp	.-16     	; 0x1cdc <__floatsisf+0x1c>
    1cec:	fa f4       	brpl	.+62     	; 0x1d2c <__floatsisf+0x6c>
    1cee:	bb 0f       	add	r27, r27
    1cf0:	11 f4       	brne	.+4      	; 0x1cf6 <__floatsisf+0x36>
    1cf2:	60 ff       	sbrs	r22, 0
    1cf4:	1b c0       	rjmp	.+54     	; 0x1d2c <__floatsisf+0x6c>
    1cf6:	6f 5f       	subi	r22, 0xFF	; 255
    1cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfa:	8f 4f       	sbci	r24, 0xFF	; 255
    1cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfe:	16 c0       	rjmp	.+44     	; 0x1d2c <__floatsisf+0x6c>
    1d00:	88 23       	and	r24, r24
    1d02:	11 f0       	breq	.+4      	; 0x1d08 <__floatsisf+0x48>
    1d04:	96 e9       	ldi	r25, 0x96	; 150
    1d06:	11 c0       	rjmp	.+34     	; 0x1d2a <__floatsisf+0x6a>
    1d08:	77 23       	and	r23, r23
    1d0a:	21 f0       	breq	.+8      	; 0x1d14 <__floatsisf+0x54>
    1d0c:	9e e8       	ldi	r25, 0x8E	; 142
    1d0e:	87 2f       	mov	r24, r23
    1d10:	76 2f       	mov	r23, r22
    1d12:	05 c0       	rjmp	.+10     	; 0x1d1e <__floatsisf+0x5e>
    1d14:	66 23       	and	r22, r22
    1d16:	71 f0       	breq	.+28     	; 0x1d34 <__floatsisf+0x74>
    1d18:	96 e8       	ldi	r25, 0x86	; 134
    1d1a:	86 2f       	mov	r24, r22
    1d1c:	70 e0       	ldi	r23, 0x00	; 0
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	2a f0       	brmi	.+10     	; 0x1d2c <__floatsisf+0x6c>
    1d22:	9a 95       	dec	r25
    1d24:	66 0f       	add	r22, r22
    1d26:	77 1f       	adc	r23, r23
    1d28:	88 1f       	adc	r24, r24
    1d2a:	da f7       	brpl	.-10     	; 0x1d22 <__floatsisf+0x62>
    1d2c:	88 0f       	add	r24, r24
    1d2e:	96 95       	lsr	r25
    1d30:	87 95       	ror	r24
    1d32:	97 f9       	bld	r25, 7
    1d34:	08 95       	ret

00001d36 <__mulsf3>:
    1d36:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__mulsf3x>
    1d3a:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__fp_round>
    1d3e:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__fp_pscA>
    1d42:	38 f0       	brcs	.+14     	; 0x1d52 <__mulsf3+0x1c>
    1d44:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__fp_pscB>
    1d48:	20 f0       	brcs	.+8      	; 0x1d52 <__mulsf3+0x1c>
    1d4a:	95 23       	and	r25, r21
    1d4c:	11 f0       	breq	.+4      	; 0x1d52 <__mulsf3+0x1c>
    1d4e:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__fp_inf>
    1d52:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__fp_nan>
    1d56:	11 24       	eor	r1, r1
    1d58:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__fp_szero>

00001d5c <__mulsf3x>:
    1d5c:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <__fp_split3>
    1d60:	70 f3       	brcs	.-36     	; 0x1d3e <__mulsf3+0x8>

00001d62 <__mulsf3_pse>:
    1d62:	95 9f       	mul	r25, r21
    1d64:	c1 f3       	breq	.-16     	; 0x1d56 <__mulsf3+0x20>
    1d66:	95 0f       	add	r25, r21
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	55 1f       	adc	r21, r21
    1d6c:	62 9f       	mul	r22, r18
    1d6e:	f0 01       	movw	r30, r0
    1d70:	72 9f       	mul	r23, r18
    1d72:	bb 27       	eor	r27, r27
    1d74:	f0 0d       	add	r31, r0
    1d76:	b1 1d       	adc	r27, r1
    1d78:	63 9f       	mul	r22, r19
    1d7a:	aa 27       	eor	r26, r26
    1d7c:	f0 0d       	add	r31, r0
    1d7e:	b1 1d       	adc	r27, r1
    1d80:	aa 1f       	adc	r26, r26
    1d82:	64 9f       	mul	r22, r20
    1d84:	66 27       	eor	r22, r22
    1d86:	b0 0d       	add	r27, r0
    1d88:	a1 1d       	adc	r26, r1
    1d8a:	66 1f       	adc	r22, r22
    1d8c:	82 9f       	mul	r24, r18
    1d8e:	22 27       	eor	r18, r18
    1d90:	b0 0d       	add	r27, r0
    1d92:	a1 1d       	adc	r26, r1
    1d94:	62 1f       	adc	r22, r18
    1d96:	73 9f       	mul	r23, r19
    1d98:	b0 0d       	add	r27, r0
    1d9a:	a1 1d       	adc	r26, r1
    1d9c:	62 1f       	adc	r22, r18
    1d9e:	83 9f       	mul	r24, r19
    1da0:	a0 0d       	add	r26, r0
    1da2:	61 1d       	adc	r22, r1
    1da4:	22 1f       	adc	r18, r18
    1da6:	74 9f       	mul	r23, r20
    1da8:	33 27       	eor	r19, r19
    1daa:	a0 0d       	add	r26, r0
    1dac:	61 1d       	adc	r22, r1
    1dae:	23 1f       	adc	r18, r19
    1db0:	84 9f       	mul	r24, r20
    1db2:	60 0d       	add	r22, r0
    1db4:	21 1d       	adc	r18, r1
    1db6:	82 2f       	mov	r24, r18
    1db8:	76 2f       	mov	r23, r22
    1dba:	6a 2f       	mov	r22, r26
    1dbc:	11 24       	eor	r1, r1
    1dbe:	9f 57       	subi	r25, 0x7F	; 127
    1dc0:	50 40       	sbci	r21, 0x00	; 0
    1dc2:	9a f0       	brmi	.+38     	; 0x1dea <__mulsf3_pse+0x88>
    1dc4:	f1 f0       	breq	.+60     	; 0x1e02 <__mulsf3_pse+0xa0>
    1dc6:	88 23       	and	r24, r24
    1dc8:	4a f0       	brmi	.+18     	; 0x1ddc <__mulsf3_pse+0x7a>
    1dca:	ee 0f       	add	r30, r30
    1dcc:	ff 1f       	adc	r31, r31
    1dce:	bb 1f       	adc	r27, r27
    1dd0:	66 1f       	adc	r22, r22
    1dd2:	77 1f       	adc	r23, r23
    1dd4:	88 1f       	adc	r24, r24
    1dd6:	91 50       	subi	r25, 0x01	; 1
    1dd8:	50 40       	sbci	r21, 0x00	; 0
    1dda:	a9 f7       	brne	.-22     	; 0x1dc6 <__mulsf3_pse+0x64>
    1ddc:	9e 3f       	cpi	r25, 0xFE	; 254
    1dde:	51 05       	cpc	r21, r1
    1de0:	80 f0       	brcs	.+32     	; 0x1e02 <__mulsf3_pse+0xa0>
    1de2:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__fp_inf>
    1de6:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__fp_szero>
    1dea:	5f 3f       	cpi	r21, 0xFF	; 255
    1dec:	e4 f3       	brlt	.-8      	; 0x1de6 <__mulsf3_pse+0x84>
    1dee:	98 3e       	cpi	r25, 0xE8	; 232
    1df0:	d4 f3       	brlt	.-12     	; 0x1de6 <__mulsf3_pse+0x84>
    1df2:	86 95       	lsr	r24
    1df4:	77 95       	ror	r23
    1df6:	67 95       	ror	r22
    1df8:	b7 95       	ror	r27
    1dfa:	f7 95       	ror	r31
    1dfc:	e7 95       	ror	r30
    1dfe:	9f 5f       	subi	r25, 0xFF	; 255
    1e00:	c1 f7       	brne	.-16     	; 0x1df2 <__mulsf3_pse+0x90>
    1e02:	fe 2b       	or	r31, r30
    1e04:	88 0f       	add	r24, r24
    1e06:	91 1d       	adc	r25, r1
    1e08:	96 95       	lsr	r25
    1e0a:	87 95       	ror	r24
    1e0c:	97 f9       	bld	r25, 7
    1e0e:	08 95       	ret

00001e10 <__fp_inf>:
    1e10:	97 f9       	bld	r25, 7
    1e12:	9f 67       	ori	r25, 0x7F	; 127
    1e14:	80 e8       	ldi	r24, 0x80	; 128
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	60 e0       	ldi	r22, 0x00	; 0
    1e1a:	08 95       	ret

00001e1c <__fp_nan>:
    1e1c:	9f ef       	ldi	r25, 0xFF	; 255
    1e1e:	80 ec       	ldi	r24, 0xC0	; 192
    1e20:	08 95       	ret

00001e22 <__fp_pscA>:
    1e22:	00 24       	eor	r0, r0
    1e24:	0a 94       	dec	r0
    1e26:	16 16       	cp	r1, r22
    1e28:	17 06       	cpc	r1, r23
    1e2a:	18 06       	cpc	r1, r24
    1e2c:	09 06       	cpc	r0, r25
    1e2e:	08 95       	ret

00001e30 <__fp_pscB>:
    1e30:	00 24       	eor	r0, r0
    1e32:	0a 94       	dec	r0
    1e34:	12 16       	cp	r1, r18
    1e36:	13 06       	cpc	r1, r19
    1e38:	14 06       	cpc	r1, r20
    1e3a:	05 06       	cpc	r0, r21
    1e3c:	08 95       	ret

00001e3e <__fp_round>:
    1e3e:	09 2e       	mov	r0, r25
    1e40:	03 94       	inc	r0
    1e42:	00 0c       	add	r0, r0
    1e44:	11 f4       	brne	.+4      	; 0x1e4a <__fp_round+0xc>
    1e46:	88 23       	and	r24, r24
    1e48:	52 f0       	brmi	.+20     	; 0x1e5e <__fp_round+0x20>
    1e4a:	bb 0f       	add	r27, r27
    1e4c:	40 f4       	brcc	.+16     	; 0x1e5e <__fp_round+0x20>
    1e4e:	bf 2b       	or	r27, r31
    1e50:	11 f4       	brne	.+4      	; 0x1e56 <__fp_round+0x18>
    1e52:	60 ff       	sbrs	r22, 0
    1e54:	04 c0       	rjmp	.+8      	; 0x1e5e <__fp_round+0x20>
    1e56:	6f 5f       	subi	r22, 0xFF	; 255
    1e58:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5e:	08 95       	ret

00001e60 <__fp_split3>:
    1e60:	57 fd       	sbrc	r21, 7
    1e62:	90 58       	subi	r25, 0x80	; 128
    1e64:	44 0f       	add	r20, r20
    1e66:	55 1f       	adc	r21, r21
    1e68:	59 f0       	breq	.+22     	; 0x1e80 <__fp_splitA+0x10>
    1e6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e6c:	71 f0       	breq	.+28     	; 0x1e8a <__fp_splitA+0x1a>
    1e6e:	47 95       	ror	r20

00001e70 <__fp_splitA>:
    1e70:	88 0f       	add	r24, r24
    1e72:	97 fb       	bst	r25, 7
    1e74:	99 1f       	adc	r25, r25
    1e76:	61 f0       	breq	.+24     	; 0x1e90 <__fp_splitA+0x20>
    1e78:	9f 3f       	cpi	r25, 0xFF	; 255
    1e7a:	79 f0       	breq	.+30     	; 0x1e9a <__fp_splitA+0x2a>
    1e7c:	87 95       	ror	r24
    1e7e:	08 95       	ret
    1e80:	12 16       	cp	r1, r18
    1e82:	13 06       	cpc	r1, r19
    1e84:	14 06       	cpc	r1, r20
    1e86:	55 1f       	adc	r21, r21
    1e88:	f2 cf       	rjmp	.-28     	; 0x1e6e <__fp_split3+0xe>
    1e8a:	46 95       	lsr	r20
    1e8c:	f1 df       	rcall	.-30     	; 0x1e70 <__fp_splitA>
    1e8e:	08 c0       	rjmp	.+16     	; 0x1ea0 <__fp_splitA+0x30>
    1e90:	16 16       	cp	r1, r22
    1e92:	17 06       	cpc	r1, r23
    1e94:	18 06       	cpc	r1, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	f1 cf       	rjmp	.-30     	; 0x1e7c <__fp_splitA+0xc>
    1e9a:	86 95       	lsr	r24
    1e9c:	71 05       	cpc	r23, r1
    1e9e:	61 05       	cpc	r22, r1
    1ea0:	08 94       	sec
    1ea2:	08 95       	ret

00001ea4 <__fp_zero>:
    1ea4:	e8 94       	clt

00001ea6 <__fp_szero>:
    1ea6:	bb 27       	eor	r27, r27
    1ea8:	66 27       	eor	r22, r22
    1eaa:	77 27       	eor	r23, r23
    1eac:	cb 01       	movw	r24, r22
    1eae:	97 f9       	bld	r25, 7
    1eb0:	08 95       	ret

00001eb2 <main>:

// --------------------------------------------------------------------------------------------------------
int main() {
#if LCD_4BIT == YES
	// initialize LCD display
	lcd_init(4, 20);
    1eb2:	64 e1       	ldi	r22, 0x14	; 20
    1eb4:	84 e0       	ldi	r24, 0x04	; 4
    1eb6:	0e 94 c2 03 	call	0x784	; 0x784 <lcd_init>
	fdev_setup_stream(&lcd_stream, lcd_putchar, 0, _FDEV_SETUP_WRITE); 
    1eba:	80 e1       	ldi	r24, 0x10	; 16
    1ebc:	91 e0       	ldi	r25, 0x01	; 1
    1ebe:	2b e1       	ldi	r18, 0x1B	; 27
    1ec0:	33 e0       	ldi	r19, 0x03	; 3
    1ec2:	30 93 19 01 	sts	0x0119, r19
    1ec6:	20 93 18 01 	sts	0x0118, r18
    1eca:	10 92 1b 01 	sts	0x011B, r1
    1ece:	10 92 1a 01 	sts	0x011A, r1
    1ed2:	c2 e0       	ldi	r28, 0x02	; 2
    1ed4:	c0 93 13 01 	sts	0x0113, r28
    1ed8:	10 92 1d 01 	sts	0x011D, r1
    1edc:	10 92 1c 01 	sts	0x011C, r1
	fprintf_P(&lcd_stream, PSTR("UNO_TPI v1.1")); 
    1ee0:	2c e5       	ldi	r18, 0x5C	; 92
    1ee2:	31 e0       	ldi	r19, 0x01	; 1
    1ee4:	3f 93       	push	r19
    1ee6:	2f 93       	push	r18
    1ee8:	9f 93       	push	r25
    1eea:	8f 93       	push	r24
    1eec:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <fprintf_P>
#endif

	// initialize uart, set baudrate, and enable rx interrupts
#if F_CPU == 16000000
	uart_init();
    1ef0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <uart_init>
		UCSR0A = _BV(U2X0);
	#elif BAUD == 76800
		UBRR0L = 12;	
		UCSR0A = 0;
	#elif BAUD == 115200
		UBRR0L = 16;	
    1ef4:	80 e1       	ldi	r24, 0x10	; 16
    1ef6:	80 93 c4 00 	sts	0x00C4, r24
		UCSR0A = _BV(U2X0);
    1efa:	c0 93 c0 00 	sts	0x00C0, r28
		UBRR0L = 0;	
		UCSR0A = 0;
	#else
		#error !BAUD value not supported by UNO_TPI.c
	#endif
	UCSR0B |= _BV(RXCIE0);		// enable receiver interrupt
    1efe:	80 91 c1 00 	lds	r24, 0x00C1
    1f02:	80 68       	ori	r24, 0x80	; 128
    1f04:	80 93 c1 00 	sts	0x00C1, r24
#else
	#error !F_CPU value not supported by UNO_TPI.c
#endif

	// Start msTimer
	TCCR2A = _BV(WGM21);						// CTC mode
    1f08:	c0 93 b0 00 	sts	0x00B0, r28
	TCCR2B = _BV(CS22) | _BV(CS20);	// clk/128 prescaling
    1f0c:	85 e0       	ldi	r24, 0x05	; 5
    1f0e:	80 93 b1 00 	sts	0x00B1, r24
	OCR2A = 125;										// 16MHz/128/125 = 1ms
    1f12:	8d e7       	ldi	r24, 0x7D	; 125
    1f14:	80 93 b3 00 	sts	0x00B3, r24
	TIMSK2 = _BV(OCIE2A);						// enable interrupt
    1f18:	c0 93 70 00 	sts	0x0070, r28

// Set up ports
	OUTPUT(READY_LED);
    1f1c:	3d 9a       	sbi	0x07, 5	; 7
	OUTPUT(ERROR_LED);
    1f1e:	3c 9a       	sbi	0x07, 4	; 7
	PULLUP_ON(BUTTON);							// toggle reset cap on/tri-state
    1f20:	39 98       	cbi	0x07, 1	; 7
    1f22:	41 9a       	sbi	0x08, 1	; 8
	OUTPUT(RESET_CAP);							// default state of reset capacitor is on
    1f24:	38 9a       	sbi	0x07, 0	; 7
	SET(RESET_CAP);									// which disables UNO reset thus UNO bootloader
    1f26:	40 9a       	sbi	0x08, 0	; 8
	SET(READY_LED);									// ready when reset cap is on
    1f28:	45 9a       	sbi	0x08, 5	; 8
	OUTPUT(TPI_RESET);							// HV programming pin
    1f2a:	22 9a       	sbi	0x04, 2	; 4
	CLEAR(TPI_RESET);								// disable HV programming (12v)
    1f2c:	2a 98       	cbi	0x05, 2	; 5

	// enable interrupts
	sei();
    1f2e:	78 94       	sei
	#define BOUNCE_PERIOD_MS 50
	#define BUTTON_DOWN 			0

	// debouncing variables
	uint16_t msElapsed;																// elapsed time in ms
	uint32_t msStamp = msNow;													// timestamp
    1f30:	20 90 21 01 	lds	r2, 0x0121
    1f34:	30 90 22 01 	lds	r3, 0x0122
    1f38:	40 90 23 01 	lds	r4, 0x0123
    1f3c:	50 90 24 01 	lds	r5, 0x0124
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
	// process command variables
	uint8_t save_byte=0;
	uint8_t command;
	uint16_t u_cmd;
	uint8_t u_offset;
	uint16_t byte_count=0;
    1f48:	00 e0       	ldi	r16, 0x00	; 0
    1f4a:	10 e0       	ldi	r17, 0x00	; 0
	#define BUTTON_DOWN 			0

	// debouncing variables
	uint16_t msElapsed;																// elapsed time in ms
	uint32_t msStamp = msNow;													// timestamp
	uint8_t debouncing = IDLE;														// debounce flag
    1f4c:	f1 2c       	mov	r15, r1
					// consume, no reply
					break;

				default:			// | Unknown command	       						|     |       |      |  ?  |      |
#if LCD_4BIT == YES
					fprintf_P(&lcd_stream, PSTR("\n? %%%02X"), (uint8_t) command);
    1f4e:	c0 e1       	ldi	r28, 0x10	; 16
    1f50:	d1 e0       	ldi	r29, 0x01	; 1
					total_bytes_written = 0;
					total_bytes_read = 0;
					if(tpi_enter_programming_mode()==TPI_OK)
						uart_writeX('\r');
#if LCD_4BIT == YES
						fprintf_P(&lcd_stream, PSTR("\n: prog %s"),target_avr.name); 
    1f52:	aa e2       	ldi	r26, 0x2A	; 42
    1f54:	aa 2e       	mov	r10, r26
    1f56:	a1 e0       	ldi	r26, 0x01	; 1
    1f58:	ba 2e       	mov	r11, r26
    1f5a:	b1 e5       	ldi	r27, 0x51	; 81
    1f5c:	8b 2e       	mov	r8, r27
    1f5e:	b1 e0       	ldi	r27, 0x01	; 1
    1f60:	9b 2e       	mov	r9, r27
	uint16_t byte_count=0;
	uint8_t mem_type;
	uint8_t fuse;
	uint8_t lock;
	while(true){
		if(error && in_programming_mode){
    1f62:	80 91 3e 01 	lds	r24, 0x013E
    1f66:	88 23       	and	r24, r24
    1f68:	29 f0       	breq	.+10     	; 0x1f74 <main+0xc2>
    1f6a:	80 91 08 01 	lds	r24, 0x0108
    1f6e:	81 11       	cpse	r24, r1
			tpi_leave_programming_mode();		// reset on error
    1f70:	0e 94 80 05 	call	0xb00	; 0xb00 <tpi_leave_programming_mode>
		}
		if(qout!=qin){		// received character in queue?
    1f74:	90 91 09 01 	lds	r25, 0x0109
    1f78:	80 91 20 01 	lds	r24, 0x0120
    1f7c:	98 17       	cp	r25, r24
    1f7e:	09 f4       	brne	.+2      	; 0x1f82 <main+0xd0>
    1f80:	4e c3       	rjmp	.+1692   	; 0x261e <main+0x76c>
			command = uart_read_q();
    1f82:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>

											//  Commands                           	| Host writes | Host reads |      |
											//  --------                           	+-----+-------+------+-----+      |
											//                                     	| ID  | data  | data |     | Note |
			switch(command){
    1f86:	86 35       	cpi	r24, 0x56	; 86
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <main+0xda>
    1f8a:	bf c2       	rjmp	.+1406   	; 0x250a <main+0x658>
    1f8c:	08 f0       	brcs	.+2      	; 0x1f90 <main+0xde>
    1f8e:	4c c0       	rjmp	.+152    	; 0x2028 <main+0x176>
    1f90:	85 34       	cpi	r24, 0x45	; 69
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <main+0xe4>
    1f94:	2b c3       	rjmp	.+1622   	; 0x25ec <main+0x73a>
    1f96:	10 f5       	brcc	.+68     	; 0x1fdc <main+0x12a>
    1f98:	81 34       	cpi	r24, 0x41	; 65
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <main+0xec>
    1f9c:	aa c0       	rjmp	.+340    	; 0x20f2 <main+0x240>
    1f9e:	38 f4       	brcc	.+14     	; 0x1fae <main+0xfc>
    1fa0:	8b 31       	cpi	r24, 0x1B	; 27
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <main+0xf4>
    1fa4:	3c c3       	rjmp	.+1656   	; 0x261e <main+0x76c>
    1fa6:	8e 32       	cpi	r24, 0x2E	; 46
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <main+0xfa>
    1faa:	b9 c2       	rjmp	.+1394   	; 0x251e <main+0x66c>
    1fac:	25 c3       	rjmp	.+1610   	; 0x25f8 <main+0x746>
    1fae:	82 34       	cpi	r24, 0x42	; 66
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <main+0x102>
    1fb2:	51 c1       	rjmp	.+674    	; 0x2256 <main+0x3a4>
    1fb4:	83 34       	cpi	r24, 0x43	; 67
    1fb6:	09 f0       	breq	.+2      	; 0x1fba <main+0x108>
    1fb8:	1f c3       	rjmp	.+1598   	; 0x25f8 <main+0x746>
#endif
					total_bytes_written ++;
					break;
			
				case 'C':			// | Write program memory, high byte   	| 'C' |    dd |      | 13d |   3  |
					write_tpi(SST_POSTINC);
    1fba:	84 e6       	ldi	r24, 0x64	; 100
    1fbc:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
					write_tpi(uart_read_q());
    1fc0:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    1fc4:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
					address+=2; // auto-increment on high byte only
    1fc8:	80 91 0e 01 	lds	r24, 0x010E
    1fcc:	90 91 0f 01 	lds	r25, 0x010F
    1fd0:	02 96       	adiw	r24, 0x02	; 2
    1fd2:	90 93 0f 01 	sts	0x010F, r25
    1fd6:	80 93 0e 01 	sts	0x010E, r24
					while(nvm_busy());
    1fda:	ca c0       	rjmp	.+404    	; 0x2170 <main+0x2be>
			command = uart_read_q();

											//  Commands                           	| Host writes | Host reads |      |
											//  --------                           	+-----+-------+------+-----+      |
											//                                     	| ID  | data  | data |     | Note |
			switch(command){
    1fdc:	80 35       	cpi	r24, 0x50	; 80
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <main+0x130>
    1fe0:	5e c0       	rjmp	.+188    	; 0x209e <main+0x1ec>
    1fe2:	c0 f4       	brcc	.+48     	; 0x2014 <main+0x162>
    1fe4:	86 34       	cpi	r24, 0x46	; 70
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <main+0x138>
    1fe8:	23 c2       	rjmp	.+1094   	; 0x2430 <main+0x57e>
    1fea:	8c 34       	cpi	r24, 0x4C	; 76
    1fec:	09 f0       	breq	.+2      	; 0x1ff0 <main+0x13e>
    1fee:	04 c3       	rjmp	.+1544   	; 0x25f8 <main+0x746>
						fprintf_P(&lcd_stream, PSTR("\n: prog %s"),target_avr.name); 
#endif
					break;
		
				case 'L':			// | Leave programming mode            	| 'L' |       |      | 13d |   5  |
					tpi_leave_programming_mode();
    1ff0:	0e 94 80 05 	call	0xb00	; 0xb00 <tpi_leave_programming_mode>
					uart_writeX('\r');
    1ff4:	8d e0       	ldi	r24, 0x0D	; 13
    1ff6:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
#if LCD_4BIT == YES
					fprintf_P(&lcd_stream, PSTR("\n: %d bytes"), total_bytes_written);
    1ffa:	80 91 26 01 	lds	r24, 0x0126
    1ffe:	8f 93       	push	r24
    2000:	80 91 25 01 	lds	r24, 0x0125
    2004:	8f 93       	push	r24
    2006:	85 e4       	ldi	r24, 0x45	; 69
    2008:	91 e0       	ldi	r25, 0x01	; 1
    200a:	9f 93       	push	r25
    200c:	8f 93       	push	r24
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	6a c0       	rjmp	.+212    	; 0x20e8 <main+0x236>
			command = uart_read_q();

											//  Commands                           	| Host writes | Host reads |      |
											//  --------                           	+-----+-------+------+-----+      |
											//                                     	| ID  | data  | data |     | Note |
			switch(command){
    2014:	83 35       	cpi	r24, 0x53	; 83
    2016:	09 f4       	brne	.+2      	; 0x201a <main+0x168>
    2018:	75 c2       	rjmp	.+1258   	; 0x2504 <main+0x652>
    201a:	84 35       	cpi	r24, 0x54	; 84
    201c:	09 f4       	brne	.+2      	; 0x2020 <main+0x16e>
    201e:	38 c2       	rjmp	.+1136   	; 0x2490 <main+0x5de>
    2020:	82 35       	cpi	r24, 0x52	; 82
    2022:	09 f0       	breq	.+2      	; 0x2026 <main+0x174>
    2024:	e9 c2       	rjmp	.+1490   	; 0x25f8 <main+0x746>
    2026:	d3 c0       	rjmp	.+422    	; 0x21ce <main+0x31c>
    2028:	8c 36       	cpi	r24, 0x6C	; 108
    202a:	09 f4       	brne	.+2      	; 0x202e <main+0x17c>
    202c:	04 c2       	rjmp	.+1032   	; 0x2436 <main+0x584>
    202e:	00 f5       	brcc	.+64     	; 0x2070 <main+0x1be>
    2030:	83 36       	cpi	r24, 0x63	; 99
    2032:	09 f4       	brne	.+2      	; 0x2036 <main+0x184>
    2034:	77 c0       	rjmp	.+238    	; 0x2124 <main+0x272>
    2036:	38 f4       	brcc	.+14     	; 0x2046 <main+0x194>
    2038:	81 36       	cpi	r24, 0x61	; 97
    203a:	09 f4       	brne	.+2      	; 0x203e <main+0x18c>
    203c:	58 c0       	rjmp	.+176    	; 0x20ee <main+0x23c>
    203e:	82 36       	cpi	r24, 0x62	; 98
    2040:	09 f4       	brne	.+2      	; 0x2044 <main+0x192>
    2042:	fb c0       	rjmp	.+502    	; 0x223a <main+0x388>
    2044:	d9 c2       	rjmp	.+1458   	; 0x25f8 <main+0x746>
    2046:	86 36       	cpi	r24, 0x66	; 102
    2048:	09 f4       	brne	.+2      	; 0x204c <main+0x19a>
    204a:	ca c1       	rjmp	.+916    	; 0x23e0 <main+0x52e>
    204c:	87 36       	cpi	r24, 0x67	; 103
    204e:	09 f4       	brne	.+2      	; 0x2052 <main+0x1a0>
    2050:	66 c1       	rjmp	.+716    	; 0x231e <main+0x46c>
    2052:	85 36       	cpi	r24, 0x65	; 101
    2054:	09 f0       	breq	.+2      	; 0x2058 <main+0x1a6>
    2056:	d0 c2       	rjmp	.+1440   	; 0x25f8 <main+0x746>
#endif
					total_bytes_read += 2;
				break;
			
				case 'e':			// | Chip erase                        	| 'e' |       |      | 13d |      |
					write_nvm_address(NVM_PROG_MEM_START);
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e4       	ldi	r25, 0x40	; 64
    205c:	0e 94 39 05 	call	0xa72	; 0xa72 <write_nvm_address>
					write_nvm_command(NVMCMD_CHIP_ERASE);
    2060:	80 e1       	ldi	r24, 0x10	; 16
    2062:	0e 94 2f 05 	call	0xa5e	; 0xa5e <write_nvm_command>
					write_nvm_word(0xFFFF);
    2066:	8f ef       	ldi	r24, 0xFF	; 255
    2068:	9f ef       	ldi	r25, 0xFF	; 255
    206a:	0e 94 5a 05 	call	0xab4	; 0xab4 <write_nvm_word>
					while(nvm_busy());
    206e:	2d c0       	rjmp	.+90     	; 0x20ca <main+0x218>
			command = uart_read_q();

											//  Commands                           	| Host writes | Host reads |      |
											//  --------                           	+-----+-------+------+-----+      |
											//                                     	| ID  | data  | data |     | Note |
			switch(command){
    2070:	83 37       	cpi	r24, 0x73	; 115
    2072:	09 f4       	brne	.+2      	; 0x2076 <main+0x1c4>
    2074:	10 c2       	rjmp	.+1056   	; 0x2496 <main+0x5e4>
    2076:	48 f4       	brcc	.+18     	; 0x208a <main+0x1d8>
    2078:	80 37       	cpi	r24, 0x70	; 112
    207a:	09 f4       	brne	.+2      	; 0x207e <main+0x1cc>
    207c:	4e c2       	rjmp	.+1180   	; 0x251a <main+0x668>
    207e:	82 37       	cpi	r24, 0x72	; 114
    2080:	09 f0       	breq	.+2      	; 0x2084 <main+0x1d2>
    2082:	ba c2       	rjmp	.+1396   	; 0x25f8 <main+0x746>
					fprintf_P(&lcd_stream, PSTR("\n> lock %02X"), lock);
#endif
					break;
					
				case 'r':   		// | Read lock bits										| 'r' |       |   dd |     |  14  |
					write_nvm_address(NVM_LOCK_BITS_START);
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	9f e3       	ldi	r25, 0x3F	; 63
    2088:	fe c1       	rjmp	.+1020   	; 0x2486 <main+0x5d4>
			command = uart_read_q();

											//  Commands                           	| Host writes | Host reads |      |
											//  --------                           	+-----+-------+------+-----+      |
											//                                     	| ID  | data  | data |     | Note |
			switch(command){
    208a:	86 37       	cpi	r24, 0x76	; 118
    208c:	09 f4       	brne	.+2      	; 0x2090 <main+0x1de>
    208e:	40 c2       	rjmp	.+1152   	; 0x2510 <main+0x65e>
    2090:	80 3f       	cpi	r24, 0xF0	; 240
    2092:	09 f4       	brne	.+2      	; 0x2096 <main+0x1e4>
    2094:	c4 c2       	rjmp	.+1416   	; 0x261e <main+0x76c>
    2096:	84 37       	cpi	r24, 0x74	; 116
    2098:	09 f4       	brne	.+2      	; 0x209c <main+0x1ea>
    209a:	2a c2       	rjmp	.+1108   	; 0x24f0 <main+0x63e>
    209c:	ad c2       	rjmp	.+1370   	; 0x25f8 <main+0x746>
				case 'P':			// | Enter programming mode            	| 'P' |       |      | 13d |   1  |
					total_bytes_written = 0;
    209e:	10 92 26 01 	sts	0x0126, r1
    20a2:	10 92 25 01 	sts	0x0125, r1
					total_bytes_read = 0;
    20a6:	10 92 1f 01 	sts	0x011F, r1
    20aa:	10 92 1e 01 	sts	0x011E, r1
					if(tpi_enter_programming_mode()==TPI_OK)
    20ae:	0e 94 e7 05 	call	0xbce	; 0xbce <tpi_enter_programming_mode>
    20b2:	81 11       	cpse	r24, r1
    20b4:	03 c0       	rjmp	.+6      	; 0x20bc <main+0x20a>
						uart_writeX('\r');
    20b6:	8d e0       	ldi	r24, 0x0D	; 13
    20b8:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
#if LCD_4BIT == YES
						fprintf_P(&lcd_stream, PSTR("\n: prog %s"),target_avr.name); 
    20bc:	bf 92       	push	r11
    20be:	af 92       	push	r10
    20c0:	9f 92       	push	r9
    20c2:	8f 92       	push	r8
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	0f c0       	rjmp	.+30     	; 0x20e8 <main+0x236>
			
				case 'e':			// | Chip erase                        	| 'e' |       |      | 13d |      |
					write_nvm_address(NVM_PROG_MEM_START);
					write_nvm_command(NVMCMD_CHIP_ERASE);
					write_nvm_word(0xFFFF);
					while(nvm_busy());
    20ca:	0e 94 75 05 	call	0xaea	; 0xaea <nvm_busy>
    20ce:	81 11       	cpse	r24, r1
    20d0:	fc cf       	rjmp	.-8      	; 0x20ca <main+0x218>
					uart_writeX('\r');
    20d2:	8d e0       	ldi	r24, 0x0D	; 13
    20d4:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
#if LCD_4BIT == YES
					fprintf_P(&lcd_stream, PSTR("\n> erase"), byte_count);
    20d8:	1f 93       	push	r17
    20da:	0f 93       	push	r16
    20dc:	aa e2       	ldi	r26, 0x2A	; 42
    20de:	b1 e0       	ldi	r27, 0x01	; 1
					lock = uart_read_q();
					write_nvm_word(lock);
					while(nvm_busy());
					uart_writeX('\r');
#if LCD_4BIT == YES
					fprintf_P(&lcd_stream, PSTR("\n> lock %02X"), lock);
    20e0:	bf 93       	push	r27
    20e2:	af 93       	push	r26
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
		
				case 'L':			// | Leave programming mode            	| 'L' |       |      | 13d |   5  |
					tpi_leave_programming_mode();
					uart_writeX('\r');
#if LCD_4BIT == YES
					fprintf_P(&lcd_stream, PSTR("\n: %d bytes"), total_bytes_written);
    20e8:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <fprintf_P>
    20ec:	92 c2       	rjmp	.+1316   	; 0x2612 <main+0x760>
#endif
					break;
		
				case 'a':			// | Report autoincrement address      	| 'a' |       | 	 | 'Y' |      |
					uart_writeX('Y');
    20ee:	89 e5       	ldi	r24, 0x59	; 89
    20f0:	80 c2       	rjmp	.+1280   	; 0x25f2 <main+0x740>
					break;
		
				case 'A':			// | Set address                       	| 'A' | ah al |      | 13d |   2  |
					// word address for flash
					address=(((uart_read_q()<<8)|uart_read_q())<<1)+target_avr.flash_offset;
    20f2:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    20f6:	d8 2e       	mov	r13, r24
    20f8:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    20fc:	2d 2d       	mov	r18, r13
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	32 2f       	mov	r19, r18
    2102:	22 27       	eor	r18, r18
    2104:	28 2b       	or	r18, r24
    2106:	22 0f       	add	r18, r18
    2108:	33 1f       	adc	r19, r19
    210a:	80 91 38 01 	lds	r24, 0x0138
    210e:	90 91 39 01 	lds	r25, 0x0139
    2112:	82 0f       	add	r24, r18
    2114:	93 1f       	adc	r25, r19
    2116:	90 93 0f 01 	sts	0x010F, r25
    211a:	80 93 0e 01 	sts	0x010E, r24
					write_nvm_address(address);
    211e:	0e 94 39 05 	call	0xa72	; 0xa72 <write_nvm_address>
    2122:	66 c2       	rjmp	.+1228   	; 0x25f0 <main+0x73e>
					uart_writeX('\r');
					break;
		
				case 'c':			// | Write program memory, low byte    	| 'c' |    dd |      | 13d |   3  |
					write_nvm_command(NVMCMD_MEMORY_WRITE);
    2124:	8d e1       	ldi	r24, 0x1D	; 29
    2126:	0e 94 2f 05 	call	0xa5e	; 0xa5e <write_nvm_command>
					write_tpi(SST_POSTINC);
    212a:	84 e6       	ldi	r24, 0x64	; 100
    212c:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
					write_tpi(uart_read_q());
    2130:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    2134:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
					uart_writeX('\r');
    2138:	8d e0       	ldi	r24, 0x0D	; 13
    213a:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
#if LCD_4BIT == YES
					if(total_bytes_written == 0) fprintf_P(&lcd_stream, PSTR("\n> "));
    213e:	80 91 25 01 	lds	r24, 0x0125
    2142:	90 91 26 01 	lds	r25, 0x0126
    2146:	89 2b       	or	r24, r25
    2148:	61 f4       	brne	.+24     	; 0x2162 <main+0x2b0>
    214a:	a1 e4       	ldi	r26, 0x41	; 65
    214c:	b1 e0       	ldi	r27, 0x01	; 1
    214e:	bf 93       	push	r27
    2150:	af 93       	push	r26
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <fprintf_P>
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
					fprintf_P(&lcd_stream, PSTR("+"));
    2162:	af e3       	ldi	r26, 0x3F	; 63
    2164:	b1 e0       	ldi	r27, 0x01	; 1
    2166:	bf 93       	push	r27
    2168:	af 93       	push	r26
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	1f c0       	rjmp	.+62     	; 0x21ae <main+0x2fc>
			
				case 'C':			// | Write program memory, high byte   	| 'C' |    dd |      | 13d |   3  |
					write_tpi(SST_POSTINC);
					write_tpi(uart_read_q());
					address+=2; // auto-increment on high byte only
					while(nvm_busy());
    2170:	0e 94 75 05 	call	0xaea	; 0xaea <nvm_busy>
    2174:	81 11       	cpse	r24, r1
    2176:	fc cf       	rjmp	.-8      	; 0x2170 <main+0x2be>
					uart_writeX('\r');
    2178:	8d e0       	ldi	r24, 0x0D	; 13
    217a:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
#if LCD_4BIT == YES
					if(total_bytes_written == 0) fprintf_P(&lcd_stream, PSTR("\n> "));
    217e:	80 91 25 01 	lds	r24, 0x0125
    2182:	90 91 26 01 	lds	r25, 0x0126
    2186:	89 2b       	or	r24, r25
    2188:	61 f4       	brne	.+24     	; 0x21a2 <main+0x2f0>
    218a:	8b e3       	ldi	r24, 0x3B	; 59
    218c:	91 e0       	ldi	r25, 0x01	; 1
    218e:	9f 93       	push	r25
    2190:	8f 93       	push	r24
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <fprintf_P>
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
					fprintf_P(&lcd_stream, PSTR("+"));
    21a2:	89 e3       	ldi	r24, 0x39	; 57
    21a4:	91 e0       	ldi	r25, 0x01	; 1
    21a6:	9f 93       	push	r25
    21a8:	8f 93       	push	r24
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <fprintf_P>
#endif
					total_bytes_written ++;
    21b2:	80 91 25 01 	lds	r24, 0x0125
    21b6:	90 91 26 01 	lds	r25, 0x0126
    21ba:	01 96       	adiw	r24, 0x01	; 1
    21bc:	90 93 26 01 	sts	0x0126, r25
    21c0:	80 93 25 01 	sts	0x0125, r24
					break;
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	28 c2       	rjmp	.+1104   	; 0x261e <main+0x76c>
		
				case 'R':			// | Read program memory               	| 'R' |       |dd(dd)|     |   4  |
					write_nvm_command(NVMCMD_MEMORY_WRITE);
    21ce:	8d e1       	ldi	r24, 0x1D	; 29
    21d0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <write_nvm_command>
					save_byte = read_nvm_byte(); 
    21d4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <read_nvm_byte>
    21d8:	d8 2e       	mov	r13, r24
					uart_writeX(read_nvm_byte()); // high byte first
    21da:	0e 94 54 05 	call	0xaa8	; 0xaa8 <read_nvm_byte>
    21de:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
					uart_writeX(save_byte); // then low byte
    21e2:	8d 2d       	mov	r24, r13
    21e4:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
					address+=2;  // auto-increment
    21e8:	80 91 0e 01 	lds	r24, 0x010E
    21ec:	90 91 0f 01 	lds	r25, 0x010F
    21f0:	02 96       	adiw	r24, 0x02	; 2
    21f2:	90 93 0f 01 	sts	0x010F, r25
    21f6:	80 93 0e 01 	sts	0x010E, r24
#if LCD_4BIT == YES
					if(total_bytes_read == 0) fprintf_P(&lcd_stream, PSTR("\n< "));
    21fa:	80 91 1e 01 	lds	r24, 0x011E
    21fe:	90 91 1f 01 	lds	r25, 0x011F
    2202:	89 2b       	or	r24, r25
    2204:	61 f4       	brne	.+24     	; 0x221e <main+0x36c>
    2206:	85 e3       	ldi	r24, 0x35	; 53
    2208:	91 e0       	ldi	r25, 0x01	; 1
    220a:	9f 93       	push	r25
    220c:	8f 93       	push	r24
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <fprintf_P>
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
					fprintf_P(&lcd_stream, PSTR("-"));
    221e:	83 e3       	ldi	r24, 0x33	; 51
    2220:	91 e0       	ldi	r25, 0x01	; 1
    2222:	9f 93       	push	r25
    2224:	8f 93       	push	r24
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <fprintf_P>
#endif
					total_bytes_read += 2;
    222e:	80 91 1e 01 	lds	r24, 0x011E
    2232:	90 91 1f 01 	lds	r25, 0x011F
    2236:	02 96       	adiw	r24, 0x02	; 2
    2238:	c1 c0       	rjmp	.+386    	; 0x23bc <main+0x50a>
					fprintf_P(&lcd_stream, PSTR("\n> erase"), byte_count);
#endif
					break;
		
				case 'b':   		// | check block support							| 'b' |       |dd dd |  Y  |      |
					uart_writeX('Y');
    223a:	89 e5       	ldi	r24, 0x59	; 89
    223c:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
					if(get_signature()==TPI_OK){
    2240:	0e 94 61 06 	call	0xcc2	; 0xcc2 <get_signature>
    2244:	81 11       	cpse	r24, r1
    2246:	eb c1       	rjmp	.+982    	; 0x261e <main+0x76c>
						uart_writeX((target_avr.page_count>>8)&0xFF);
    2248:	80 91 3d 01 	lds	r24, 0x013D
    224c:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
						uart_writeX(target_avr.page_count&0xFF);
    2250:	80 91 3c 01 	lds	r24, 0x013C
    2254:	ce c1       	rjmp	.+924    	; 0x25f2 <main+0x740>
					}
					break;

				case 'B':	  		// | flash or eeprom block write		| 'B' |dd(dd) |      | 13d |      |
					// get the byte count for this block
					byte_count = ((uart_read_q()<<8) | uart_read_q());
    2256:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    225a:	08 2f       	mov	r16, r24
    225c:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    2260:	10 e0       	ldi	r17, 0x00	; 0
    2262:	10 2f       	mov	r17, r16
    2264:	00 27       	eor	r16, r16
    2266:	08 2b       	or	r16, r24
					// is it for flash or eeprom?
					mem_type = uart_read_q();
    2268:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
					if(mem_type == MEMORY_TYPE_FLASH){
    226c:	86 34       	cpi	r24, 0x46	; 70
    226e:	e9 f5       	brne	.+122    	; 0x22ea <main+0x438>
						write_nvm_command(NVMCMD_MEMORY_WRITE);
    2270:	8d e1       	ldi	r24, 0x1D	; 29
    2272:	0e 94 2f 05 	call	0xa5e	; 0xa5e <write_nvm_command>
						for(uint16_t i=0;i<byte_count;i+=2){
    2276:	c1 2c       	mov	r12, r1
    2278:	d1 2c       	mov	r13, r1
    227a:	c0 16       	cp	r12, r16
    227c:	d1 06       	cpc	r13, r17
    227e:	f8 f4       	brcc	.+62     	; 0x22be <main+0x40c>
							// write low byte
							write_tpi(SST_POSTINC);
    2280:	84 e6       	ldi	r24, 0x64	; 100
    2282:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
							write_tpi(uart_read_q());
    2286:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    228a:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
							// write high byte
							write_tpi(SST_POSTINC);
    228e:	84 e6       	ldi	r24, 0x64	; 100
    2290:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
							write_tpi(uart_read_q());
    2294:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    2298:	0e 94 bc 04 	call	0x978	; 0x978 <write_tpi>
							address++; // auto-increment on high byte only
    229c:	80 91 0e 01 	lds	r24, 0x010E
    22a0:	90 91 0f 01 	lds	r25, 0x010F
    22a4:	01 96       	adiw	r24, 0x01	; 1
    22a6:	90 93 0f 01 	sts	0x010F, r25
    22aa:	80 93 0e 01 	sts	0x010E, r24
							while(nvm_busy());
    22ae:	0e 94 75 05 	call	0xaea	; 0xaea <nvm_busy>
    22b2:	81 11       	cpse	r24, r1
    22b4:	fc cf       	rjmp	.-8      	; 0x22ae <main+0x3fc>
					byte_count = ((uart_read_q()<<8) | uart_read_q());
					// is it for flash or eeprom?
					mem_type = uart_read_q();
					if(mem_type == MEMORY_TYPE_FLASH){
						write_nvm_command(NVMCMD_MEMORY_WRITE);
						for(uint16_t i=0;i<byte_count;i+=2){
    22b6:	82 e0       	ldi	r24, 0x02	; 2
    22b8:	c8 0e       	add	r12, r24
    22ba:	d1 1c       	adc	r13, r1
    22bc:	de cf       	rjmp	.-68     	; 0x227a <main+0x3c8>
							for(uint16_t i=0;i<byte_count;i++){
								uart_read_q();
							}
						}
					// tell host we're ready for next block
					uart_write('\r');
    22be:	8d e0       	ldi	r24, 0x0D	; 13
    22c0:	0e 94 8b 01 	call	0x316	; 0x316 <uart_write>
#if LCD_4BIT == YES
					if(total_bytes_written == 0) fprintf_P(&lcd_stream, PSTR("\n> "));
    22c4:	80 91 25 01 	lds	r24, 0x0125
    22c8:	90 91 26 01 	lds	r25, 0x0126
    22cc:	89 2b       	or	r24, r25
    22ce:	c1 f4       	brne	.+48     	; 0x2300 <main+0x44e>
    22d0:	86 e2       	ldi	r24, 0x26	; 38
    22d2:	91 e0       	ldi	r25, 0x01	; 1
    22d4:	9f 93       	push	r25
    22d6:	8f 93       	push	r24
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <fprintf_P>
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	0b c0       	rjmp	.+22     	; 0x2300 <main+0x44e>
    22ea:	c1 2c       	mov	r12, r1
    22ec:	d1 2c       	mov	r13, r1
							address++; // auto-increment on high byte only
							while(nvm_busy());
							}
						}else{ 
							// no eeprom on TPI tiny's, ignore
							for(uint16_t i=0;i<byte_count;i++){
    22ee:	c0 16       	cp	r12, r16
    22f0:	d1 06       	cpc	r13, r17
    22f2:	29 f3       	breq	.-54     	; 0x22be <main+0x40c>
								uart_read_q();
    22f4:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
							address++; // auto-increment on high byte only
							while(nvm_busy());
							}
						}else{ 
							// no eeprom on TPI tiny's, ignore
							for(uint16_t i=0;i<byte_count;i++){
    22f8:	9f ef       	ldi	r25, 0xFF	; 255
    22fa:	c9 1a       	sub	r12, r25
    22fc:	d9 0a       	sbc	r13, r25
    22fe:	f7 cf       	rjmp	.-18     	; 0x22ee <main+0x43c>
						}
					// tell host we're ready for next block
					uart_write('\r');
#if LCD_4BIT == YES
					if(total_bytes_written == 0) fprintf_P(&lcd_stream, PSTR("\n> "));
					fprintf_P(&lcd_stream, PSTR("+"));
    2300:	84 e2       	ldi	r24, 0x24	; 36
    2302:	91 e0       	ldi	r25, 0x01	; 1
    2304:	9f 93       	push	r25
    2306:	8f 93       	push	r24
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <fprintf_P>
#endif
					total_bytes_written += byte_count;
    2310:	80 91 25 01 	lds	r24, 0x0125
    2314:	90 91 26 01 	lds	r25, 0x0126
    2318:	80 0f       	add	r24, r16
    231a:	91 1f       	adc	r25, r17
    231c:	4f cf       	rjmp	.-354    	; 0x21bc <main+0x30a>
					break;
			
				case 'g':				// | flash or eeprom block read			| 'g' |       |dd(dd)|     |      |
					// get byte count to read for this block
					byte_count=(uart_read_q()<<8)|uart_read_q();
    231e:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    2322:	08 2f       	mov	r16, r24
    2324:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    2328:	10 e0       	ldi	r17, 0x00	; 0
    232a:	10 2f       	mov	r17, r16
    232c:	00 27       	eor	r16, r16
    232e:	08 2b       	or	r16, r24
					// get memory type - flash or eeprom
					if(uart_read_q()==MEMORY_TYPE_FLASH){
    2330:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    2334:	86 34       	cpi	r24, 0x46	; 70
    2336:	09 f0       	breq	.+2      	; 0x233a <main+0x488>
    2338:	46 c0       	rjmp	.+140    	; 0x23c6 <main+0x514>
						write_nvm_command(NVMCMD_MEMORY_WRITE);
    233a:	8d e1       	ldi	r24, 0x1D	; 29
    233c:	0e 94 2f 05 	call	0xa5e	; 0xa5e <write_nvm_command>
						for(uint16_t i=0;i<byte_count;i+=2){
							// read and send all the bytes for this block
							uart_writeX(read_nvm_byte()); // low byte
							uart_writeX(read_nvm_byte()); // high byte
							// and auto-increment flash word address	
							address+=(byte_count>>1);
    2340:	38 01       	movw	r6, r16
    2342:	76 94       	lsr	r7
    2344:	67 94       	ror	r6
					// get byte count to read for this block
					byte_count=(uart_read_q()<<8)|uart_read_q();
					// get memory type - flash or eeprom
					if(uart_read_q()==MEMORY_TYPE_FLASH){
						write_nvm_command(NVMCMD_MEMORY_WRITE);
						for(uint16_t i=0;i<byte_count;i+=2){
    2346:	c1 2c       	mov	r12, r1
    2348:	d1 2c       	mov	r13, r1
    234a:	c0 16       	cp	r12, r16
    234c:	d1 06       	cpc	r13, r17
    234e:	b0 f4       	brcc	.+44     	; 0x237c <main+0x4ca>
							// read and send all the bytes for this block
							uart_writeX(read_nvm_byte()); // low byte
    2350:	0e 94 54 05 	call	0xaa8	; 0xaa8 <read_nvm_byte>
    2354:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
							uart_writeX(read_nvm_byte()); // high byte
    2358:	0e 94 54 05 	call	0xaa8	; 0xaa8 <read_nvm_byte>
    235c:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
							// and auto-increment flash word address	
							address+=(byte_count>>1);
    2360:	80 91 0e 01 	lds	r24, 0x010E
    2364:	90 91 0f 01 	lds	r25, 0x010F
    2368:	86 0d       	add	r24, r6
    236a:	97 1d       	adc	r25, r7
    236c:	90 93 0f 01 	sts	0x010F, r25
    2370:	80 93 0e 01 	sts	0x010E, r24
					// get byte count to read for this block
					byte_count=(uart_read_q()<<8)|uart_read_q();
					// get memory type - flash or eeprom
					if(uart_read_q()==MEMORY_TYPE_FLASH){
						write_nvm_command(NVMCMD_MEMORY_WRITE);
						for(uint16_t i=0;i<byte_count;i+=2){
    2374:	52 e0       	ldi	r21, 0x02	; 2
    2376:	c5 0e       	add	r12, r21
    2378:	d1 1c       	adc	r13, r1
    237a:	e7 cf       	rjmp	.-50     	; 0x234a <main+0x498>
							uart_writeX(read_nvm_byte()); // high byte
							// and auto-increment flash word address	
							address+=(byte_count>>1);
						}
#if LCD_4BIT == YES
						if(total_bytes_read == 0) fprintf_P(&lcd_stream, PSTR("\n< "));
    237c:	80 91 1e 01 	lds	r24, 0x011E
    2380:	90 91 1f 01 	lds	r25, 0x011F
    2384:	89 2b       	or	r24, r25
    2386:	61 f4       	brne	.+24     	; 0x23a0 <main+0x4ee>
    2388:	a0 e2       	ldi	r26, 0x20	; 32
    238a:	b1 e0       	ldi	r27, 0x01	; 1
    238c:	bf 93       	push	r27
    238e:	af 93       	push	r26
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <fprintf_P>
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
						fprintf_P(&lcd_stream, PSTR("-"));
    23a0:	ae e1       	ldi	r26, 0x1E	; 30
    23a2:	b1 e0       	ldi	r27, 0x01	; 1
    23a4:	bf 93       	push	r27
    23a6:	af 93       	push	r26
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <fprintf_P>
#endif
						total_bytes_read += byte_count;
    23b0:	80 91 1e 01 	lds	r24, 0x011E
    23b4:	90 91 1f 01 	lds	r25, 0x011F
    23b8:	80 0f       	add	r24, r16
    23ba:	91 1f       	adc	r25, r17
    23bc:	90 93 1f 01 	sts	0x011F, r25
    23c0:	80 93 1e 01 	sts	0x011E, r24
    23c4:	ff ce       	rjmp	.-514    	; 0x21c4 <main+0x312>
    23c6:	c1 2c       	mov	r12, r1
    23c8:	d1 2c       	mov	r13, r1
					}else{
						// byte address given for eeprom
						for(uint16_t i=0;i<byte_count;i++){
    23ca:	c0 16       	cp	r12, r16
    23cc:	d1 06       	cpc	r13, r17
    23ce:	09 f4       	brne	.+2      	; 0x23d2 <main+0x520>
    23d0:	26 c1       	rjmp	.+588    	; 0x261e <main+0x76c>
							// no eeprom on TPI tiny's
							uart_write(0x00);
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	0e 94 8b 01 	call	0x316	; 0x316 <uart_write>
						fprintf_P(&lcd_stream, PSTR("-"));
#endif
						total_bytes_read += byte_count;
					}else{
						// byte address given for eeprom
						for(uint16_t i=0;i<byte_count;i++){
    23d8:	8f ef       	ldi	r24, 0xFF	; 255
    23da:	c8 1a       	sub	r12, r24
    23dc:	d8 0a       	sbc	r13, r24
    23de:	f5 cf       	rjmp	.-22     	; 0x23ca <main+0x518>
						}
					}
					break;
				case 'f':			// | Write fuse bits                		| 'f' |    dd |      | 13d |  11  |
					// erase first
					write_nvm_command((uint8_t)NVMCMD_SECTION_ERASE);
    23e0:	84 e1       	ldi	r24, 0x14	; 20
    23e2:	0e 94 2f 05 	call	0xa5e	; 0xa5e <write_nvm_command>
					write_nvm_address(CONF_BITS_START);
    23e6:	80 e4       	ldi	r24, 0x40	; 64
    23e8:	9f e3       	ldi	r25, 0x3F	; 63
    23ea:	0e 94 39 05 	call	0xa72	; 0xa72 <write_nvm_address>
					write_nvm_word(0xFFFF);
    23ee:	8f ef       	ldi	r24, 0xFF	; 255
    23f0:	9f ef       	ldi	r25, 0xFF	; 255
    23f2:	0e 94 5a 05 	call	0xab4	; 0xab4 <write_nvm_word>
					while(nvm_busy());
    23f6:	0e 94 75 05 	call	0xaea	; 0xaea <nvm_busy>
    23fa:	81 11       	cpse	r24, r1
    23fc:	fc cf       	rjmp	.-8      	; 0x23f6 <main+0x544>
					// then write new value
					write_nvm_command(NVMCMD_MEMORY_WRITE);
    23fe:	8d e1       	ldi	r24, 0x1D	; 29
    2400:	0e 94 2f 05 	call	0xa5e	; 0xa5e <write_nvm_command>
					write_nvm_address(CONF_BITS_START);
    2404:	80 e4       	ldi	r24, 0x40	; 64
    2406:	9f e3       	ldi	r25, 0x3F	; 63
    2408:	0e 94 39 05 	call	0xa72	; 0xa72 <write_nvm_address>
					fuse = uart_read_q();
    240c:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    2410:	d8 2e       	mov	r13, r24
					write_nvm_word(fuse);
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	0e 94 5a 05 	call	0xab4	; 0xab4 <write_nvm_word>
					while(nvm_busy());
    2418:	0e 94 75 05 	call	0xaea	; 0xaea <nvm_busy>
    241c:	81 11       	cpse	r24, r1
    241e:	fc cf       	rjmp	.-8      	; 0x2418 <main+0x566>
					uart_writeX('\r');
    2420:	8d e0       	ldi	r24, 0x0D	; 13
    2422:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
#if LCD_4BIT == YES
					fprintf_P(&lcd_stream, PSTR("\n> fuse %02X"), fuse);
    2426:	1f 92       	push	r1
    2428:	df 92       	push	r13
    242a:	a1 e1       	ldi	r26, 0x11	; 17
    242c:	b1 e0       	ldi	r27, 0x01	; 1
    242e:	58 ce       	rjmp	.-848    	; 0x20e0 <main+0x22e>
#endif
					break;
				case 'F':			// | Read fuse bits			      					| 'F' |       |   dd |     |  11  |
					write_nvm_address(CONF_BITS_START);
    2430:	80 e4       	ldi	r24, 0x40	; 64
    2432:	9f e3       	ldi	r25, 0x3F	; 63
    2434:	28 c0       	rjmp	.+80     	; 0x2486 <main+0x5d4>
					uart_writeX(read_nvm_byte());
					break;
				case 'l':   		// | Write lock bits      						| 'l' |    dd |      | 13d |  14  |
					// erase first
					write_nvm_command((uint8_t)NVMCMD_SECTION_ERASE);
    2436:	84 e1       	ldi	r24, 0x14	; 20
    2438:	0e 94 2f 05 	call	0xa5e	; 0xa5e <write_nvm_command>
					write_nvm_address(NVM_LOCK_BITS_START);
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	9f e3       	ldi	r25, 0x3F	; 63
    2440:	0e 94 39 05 	call	0xa72	; 0xa72 <write_nvm_address>
					write_nvm_word(0xFFFF);
    2444:	8f ef       	ldi	r24, 0xFF	; 255
    2446:	9f ef       	ldi	r25, 0xFF	; 255
    2448:	0e 94 5a 05 	call	0xab4	; 0xab4 <write_nvm_word>
					while(nvm_busy());
    244c:	0e 94 75 05 	call	0xaea	; 0xaea <nvm_busy>
    2450:	81 11       	cpse	r24, r1
    2452:	fc cf       	rjmp	.-8      	; 0x244c <main+0x59a>
					// then write new value
					write_nvm_command(NVMCMD_MEMORY_WRITE);
    2454:	8d e1       	ldi	r24, 0x1D	; 29
    2456:	0e 94 2f 05 	call	0xa5e	; 0xa5e <write_nvm_command>
					write_nvm_address(NVM_LOCK_BITS_START);
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	9f e3       	ldi	r25, 0x3F	; 63
    245e:	0e 94 39 05 	call	0xa72	; 0xa72 <write_nvm_address>
					lock = uart_read_q();
    2462:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    2466:	d8 2e       	mov	r13, r24
					write_nvm_word(lock);
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	0e 94 5a 05 	call	0xab4	; 0xab4 <write_nvm_word>
					while(nvm_busy());
    246e:	0e 94 75 05 	call	0xaea	; 0xaea <nvm_busy>
    2472:	81 11       	cpse	r24, r1
    2474:	fc cf       	rjmp	.-8      	; 0x246e <main+0x5bc>
					uart_writeX('\r');
    2476:	8d e0       	ldi	r24, 0x0D	; 13
    2478:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
#if LCD_4BIT == YES
					fprintf_P(&lcd_stream, PSTR("\n> lock %02X"), lock);
    247c:	1f 92       	push	r1
    247e:	df 92       	push	r13
    2480:	a4 e0       	ldi	r26, 0x04	; 4
    2482:	b1 e0       	ldi	r27, 0x01	; 1
    2484:	2d ce       	rjmp	.-934    	; 0x20e0 <main+0x22e>
#endif
					break;
					
				case 'r':   		// | Read lock bits										| 'r' |       |   dd |     |  14  |
					write_nvm_address(NVM_LOCK_BITS_START);
    2486:	0e 94 39 05 	call	0xa72	; 0xa72 <write_nvm_address>
					uart_writeX(read_nvm_byte());
    248a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <read_nvm_byte>
    248e:	b1 c0       	rjmp	.+354    	; 0x25f2 <main+0x740>
					break;
				case 'T':			// | Select device type                	| 'T' |    dd |      | 13d |   6  |
					// read and ignore since we already know our
					// device type.
					uart_read_q(); 
    2490:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    2494:	ad c0       	rjmp	.+346    	; 0x25f0 <main+0x73e>
					uart_writeX('\r');
					break;
		
				case 's':			// | Read signature bytes              	| 's' |       | 3*dd |     |      |
					if(get_signature()==TPI_OK){
    2496:	0e 94 61 06 	call	0xcc2	; 0xcc2 <get_signature>
    249a:	81 11       	cpse	r24, r1
    249c:	0c c0       	rjmp	.+24     	; 0x24b6 <main+0x604>
						uart_writeX(target_avr.signature[2]);
    249e:	80 91 36 01 	lds	r24, 0x0136
    24a2:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
						uart_writeX(target_avr.signature[1]);
    24a6:	80 91 35 01 	lds	r24, 0x0135
    24aa:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
						uart_writeX(target_avr.signature[0]);
    24ae:	80 91 34 01 	lds	r24, 0x0134
    24b2:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
					}
#if LCD_4BIT == YES
					fprintf_P(&lcd_stream, PSTR("\n< sig  %02X%02X%02X"),
    24b6:	80 91 34 01 	lds	r24, 0x0134
    24ba:	1f 92       	push	r1
    24bc:	8f 93       	push	r24
    24be:	80 91 35 01 	lds	r24, 0x0135
    24c2:	1f 92       	push	r1
    24c4:	8f 93       	push	r24
    24c6:	80 91 36 01 	lds	r24, 0x0136
    24ca:	1f 92       	push	r1
    24cc:	8f 93       	push	r24
    24ce:	af ee       	ldi	r26, 0xEF	; 239
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	bf 93       	push	r27
    24d4:	af 93       	push	r26
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <fprintf_P>
						target_avr.signature[2],
						target_avr.signature[1],
						target_avr.signature[0]); 
#endif
					break;
    24de:	8d b7       	in	r24, 0x3d	; 61
    24e0:	9e b7       	in	r25, 0x3e	; 62
    24e2:	0a 96       	adiw	r24, 0x0a	; 10
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	9e bf       	out	0x3e, r25	; 62
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	8d bf       	out	0x3d, r24	; 61
    24ee:	97 c0       	rjmp	.+302    	; 0x261e <main+0x76c>
		
				case 't':			// | Return supported device codes     	| 't' |       | n*dd | 00d |   7  |
					// only give the one attached
					if(get_signature()==TPI_OK){
    24f0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <get_signature>
    24f4:	81 11       	cpse	r24, r1
    24f6:	93 c0       	rjmp	.+294    	; 0x261e <main+0x76c>
						uart_writeX(target_avr.device_code);
    24f8:	80 91 37 01 	lds	r24, 0x0137
    24fc:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
						uart_writeX(0x00);
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	77 c0       	rjmp	.+238    	; 0x25f2 <main+0x740>
					}
					break;
		
				case 'S':			// | Return software identifier        	| 'S' |       | s[7] |     |   8  |
					uart_write_PSTR(PSTR(PROGRAMMER_ID));
    2504:	87 ee       	ldi	r24, 0xE7	; 231
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	05 c0       	rjmp	.+10     	; 0x2514 <main+0x662>
					break;
		
				case 'V':			// | Return sofware version            	| 'V' |       |dd dd |     |   9  |
					uart_write_PSTR(PSTR(SOFTWARE_VERSION));
    250a:	84 ee       	ldi	r24, 0xE4	; 228
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	02 c0       	rjmp	.+4      	; 0x2514 <main+0x662>
					break;
		
				case 'v':			// | Return hardware version           	| 'v' |       |dd dd |     |   9  |
					uart_write_PSTR(PSTR(HARDWARE_VERSION));
    2510:	81 ee       	ldi	r24, 0xE1	; 225
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	0e 94 a5 04 	call	0x94a	; 0x94a <uart_write_PSTR>
					break;
    2518:	82 c0       	rjmp	.+260    	; 0x261e <main+0x76c>
				case'p':			// | Return programmer type            	| 'p' |       |   dd |     |  10  |
					uart_writeX('S');
    251a:	83 e5       	ldi	r24, 0x53	; 83
    251c:	6a c0       	rjmp	.+212    	; 0x25f2 <main+0x740>
					break;
		
				case '.':			// | New universal command	       			| '.' |  4*dd |   dd | 13d |      |
					// Used for non-blocked read/write memories
					u_cmd = (uart_read_q()<<8) | uart_read_q();
    251e:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    2522:	d8 2e       	mov	r13, r24
    2524:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    2528:	2d 2d       	mov	r18, r13
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	32 2f       	mov	r19, r18
    252e:	22 27       	eor	r18, r18
    2530:	d9 01       	movw	r26, r18
    2532:	a8 2b       	or	r26, r24
    2534:	cd 01       	movw	r24, r26
					switch(u_cmd){
    2536:	81 15       	cp	r24, r1
    2538:	b0 e5       	ldi	r27, 0x50	; 80
    253a:	9b 07       	cpc	r25, r27
    253c:	d9 f0       	breq	.+54     	; 0x2574 <main+0x6c2>
    253e:	60 f4       	brcc	.+24     	; 0x2558 <main+0x6a6>
    2540:	81 15       	cp	r24, r1
    2542:	40 e3       	ldi	r20, 0x30	; 48
    2544:	94 07       	cpc	r25, r20
    2546:	09 f4       	brne	.+2      	; 0x254a <main+0x698>
    2548:	3f c0       	rjmp	.+126    	; 0x25c8 <main+0x716>
    254a:	81 15       	cp	r24, r1
    254c:	98 43       	sbci	r25, 0x38	; 56
    254e:	09 f0       	breq	.+2      	; 0x2552 <main+0x6a0>
    2550:	4b c0       	rjmp	.+150    	; 0x25e8 <main+0x736>
#if LCD_4BIT == YES
							fprintf_P(&lcd_stream, PSTR("\n> lock %02X"), lock);
#endif
							break;
						case 0x3800: // read calibration
							universal_read_fuse(CALIB_BITS_START);
    2552:	80 e8       	ldi	r24, 0x80	; 128
    2554:	9f e3       	ldi	r25, 0x3F	; 63
    2556:	35 c0       	rjmp	.+106    	; 0x25c2 <main+0x710>
					break;
		
				case '.':			// | New universal command	       			| '.' |  4*dd |   dd | 13d |      |
					// Used for non-blocked read/write memories
					u_cmd = (uart_read_q()<<8) | uart_read_q();
					switch(u_cmd){
    2558:	88 3a       	cpi	r24, 0xA8	; 168
    255a:	ac ea       	ldi	r26, 0xAC	; 172
    255c:	9a 07       	cpc	r25, r26
    255e:	69 f0       	breq	.+26     	; 0x257a <main+0x6c8>
    2560:	80 3e       	cpi	r24, 0xE0	; 224
    2562:	bc ea       	ldi	r27, 0xAC	; 172
    2564:	9b 07       	cpc	r25, r27
    2566:	d1 f0       	breq	.+52     	; 0x259c <main+0x6ea>
    2568:	81 15       	cp	r24, r1
    256a:	98 45       	sbci	r25, 0x58	; 88
    256c:	e9 f5       	brne	.+122    	; 0x25e8 <main+0x736>
#if LCD_4BIT == YES
							fprintf_P(&lcd_stream, PSTR("\n> fuse %02X"), fuse);
#endif
							break;
						case 0x5800: // read lock
							universal_read_fuse(NVM_LOCK_BITS_START);
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	9f e3       	ldi	r25, 0x3F	; 63
    2572:	27 c0       	rjmp	.+78     	; 0x25c2 <main+0x710>
				case '.':			// | New universal command	       			| '.' |  4*dd |   dd | 13d |      |
					// Used for non-blocked read/write memories
					u_cmd = (uart_read_q()<<8) | uart_read_q();
					switch(u_cmd){
						case 0x5000: // read fuse
							universal_read_fuse(CONF_BITS_START);
    2574:	80 e4       	ldi	r24, 0x40	; 64
    2576:	9f e3       	ldi	r25, 0x3F	; 63
    2578:	24 c0       	rjmp	.+72     	; 0x25c2 <main+0x710>
							break;
						case 0xACA8: // write fuse
							uart_read_q();
    257a:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
							fuse = uart_read_q();
    257e:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    2582:	d8 2e       	mov	r13, r24
							universal_write_fuse(CONF_BITS_START, fuse);
    2584:	68 2f       	mov	r22, r24
    2586:	80 e4       	ldi	r24, 0x40	; 64
    2588:	9f e3       	ldi	r25, 0x3F	; 63
    258a:	0e 94 c0 06 	call	0xd80	; 0xd80 <universal_write_fuse>
#if LCD_4BIT == YES
							fprintf_P(&lcd_stream, PSTR("\n> fuse %02X"), fuse);
    258e:	1f 92       	push	r1
    2590:	df 92       	push	r13
    2592:	84 ed       	ldi	r24, 0xD4	; 212
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	9f 93       	push	r25
    2598:	8f 93       	push	r24
    259a:	a4 cd       	rjmp	.-1208   	; 0x20e4 <main+0x232>
							break;
						case 0x5800: // read lock
							universal_read_fuse(NVM_LOCK_BITS_START);
							break;
						case 0xACE0: // write lock
							uart_read_q();
    259c:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
							lock = uart_read_q();
    25a0:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    25a4:	d8 2e       	mov	r13, r24
							universal_write_fuse(NVM_LOCK_BITS_START, lock);
    25a6:	68 2f       	mov	r22, r24
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	9f e3       	ldi	r25, 0x3F	; 63
    25ac:	0e 94 c0 06 	call	0xd80	; 0xd80 <universal_write_fuse>
#if LCD_4BIT == YES
							fprintf_P(&lcd_stream, PSTR("\n> lock %02X"), lock);
    25b0:	1f 92       	push	r1
    25b2:	df 92       	push	r13
    25b4:	87 ec       	ldi	r24, 0xC7	; 199
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	9f 93       	push	r25
    25ba:	8f 93       	push	r24
    25bc:	df 93       	push	r29
    25be:	cf 93       	push	r28
    25c0:	93 cd       	rjmp	.-1242   	; 0x20e8 <main+0x236>
#endif
							break;
						case 0x3800: // read calibration
							universal_read_fuse(CALIB_BITS_START);
    25c2:	0e 94 aa 06 	call	0xd54	; 0xd54 <universal_read_fuse>
							break;
    25c6:	2b c0       	rjmp	.+86     	; 0x261e <main+0x76c>
						case 0x3000: // read signature
							u_offset = uart_read_q();
    25c8:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
    25cc:	d8 2e       	mov	r13, r24
							uart_read_q();
    25ce:	0e 94 65 04 	call	0x8ca	; 0x8ca <uart_read_q>
							write_nvm_address(DEV_ID_START + u_offset);
    25d2:	8d 2d       	mov	r24, r13
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	80 54       	subi	r24, 0x40	; 64
    25d8:	90 4c       	sbci	r25, 0xC0	; 192
    25da:	0e 94 39 05 	call	0xa72	; 0xa72 <write_nvm_address>
							uart_writeX(read_nvm_byte());
    25de:	0e 94 54 05 	call	0xaa8	; 0xaa8 <read_nvm_byte>
    25e2:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
    25e6:	04 c0       	rjmp	.+8      	; 0x25f0 <main+0x73e>
							uart_writeX('\r');
							break;
						default:
							uart_writeX('?');
    25e8:	8f e3       	ldi	r24, 0x3F	; 63
    25ea:	03 c0       	rjmp	.+6      	; 0x25f2 <main+0x740>
					}
					break;

				case 'E':			// | Exit bootloader		       					| 'E' |       |      | 13d |      |
					// avrdude gives an error message if we don't do this
					tpi_leave_programming_mode();
    25ec:	0e 94 80 05 	call	0xb00	; 0xb00 <tpi_leave_programming_mode>
					uart_writeX('\r');
    25f0:	8d e0       	ldi	r24, 0x0D	; 13
    25f2:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
					break;
    25f6:	13 c0       	rjmp	.+38     	; 0x261e <main+0x76c>
					// consume, no reply
					break;

				default:			// | Unknown command	       						|     |       |      |  ?  |      |
#if LCD_4BIT == YES
					fprintf_P(&lcd_stream, PSTR("\n? %%%02X"), (uint8_t) command);
    25f8:	1f 92       	push	r1
    25fa:	8f 93       	push	r24
    25fc:	ad eb       	ldi	r26, 0xBD	; 189
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	bf 93       	push	r27
    2602:	af 93       	push	r26
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <fprintf_P>
#endif
					uart_writeX('?');
    260c:	8f e3       	ldi	r24, 0x3F	; 63
    260e:	0e 94 9e 04 	call	0x93c	; 0x93c <uart_writeX>
					break;
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
			}
		}

		if(!in_programming_mode){													// only check button when inactive
    261e:	80 91 08 01 	lds	r24, 0x0108
    2622:	81 11       	cpse	r24, r1
    2624:	9e cc       	rjmp	.-1732   	; 0x1f62 <main+0xb0>
			msElapsed = msNow - msStamp;										// calc elapsed time
    2626:	80 91 21 01 	lds	r24, 0x0121
    262a:	90 91 22 01 	lds	r25, 0x0122
    262e:	a0 91 23 01 	lds	r26, 0x0123
    2632:	b0 91 24 01 	lds	r27, 0x0124
    2636:	82 19       	sub	r24, r2
    2638:	93 09       	sbc	r25, r3
			if(READ(BUTTON) == BUTTON_DOWN){								// button's down
    263a:	31 99       	sbic	0x06, 1	; 6
    263c:	1f c0       	rjmp	.+62     	; 0x267c <main+0x7ca>
				if(debouncing == IDLE){												// if not debouncing
    263e:	f1 10       	cpse	r15, r1
    2640:	0b c0       	rjmp	.+22     	; 0x2658 <main+0x7a6>
					msStamp = msNow;														// time stamp
    2642:	20 90 21 01 	lds	r2, 0x0121
    2646:	30 90 22 01 	lds	r3, 0x0122
    264a:	40 90 23 01 	lds	r4, 0x0123
    264e:	50 90 24 01 	lds	r5, 0x0124
					debouncing = PRESSED;												// and start debounce
    2652:	ff 24       	eor	r15, r15
    2654:	f3 94       	inc	r15
    2656:	85 cc       	rjmp	.-1782   	; 0x1f62 <main+0xb0>
				} else {
					if(debouncing == PRESSED){									// still debouncing
    2658:	a1 e0       	ldi	r26, 0x01	; 1
    265a:	fa 12       	cpse	r15, r26
    265c:	82 cc       	rjmp	.-1788   	; 0x1f62 <main+0xb0>
						if(msElapsed > BOUNCE_PERIOD_MS){					// button's still down and debounce time elapsed
    265e:	c3 97       	sbiw	r24, 0x33	; 51
    2660:	08 f4       	brcc	.+2      	; 0x2664 <main+0x7b2>
    2662:	7f cc       	rjmp	.-1794   	; 0x1f62 <main+0xb0>
							if(READ(READY_LED)){
    2664:	35 9b       	sbis	0x06, 5	; 6
    2666:	04 c0       	rjmp	.+8      	; 0x2670 <main+0x7be>
								INPUT(RESET_CAP);											// allow UNO DTR reset
    2668:	38 98       	cbi	0x07, 0	; 7
								CLEAR(RESET_CAP);											
    266a:	40 98       	cbi	0x08, 0	; 8
								CLEAR(READY_LED);
    266c:	45 98       	cbi	0x08, 5	; 8
    266e:	03 c0       	rjmp	.+6      	; 0x2676 <main+0x7c4>
							} else {
								OUTPUT(RESET_CAP);										// override UNO DTR reset
    2670:	38 9a       	sbi	0x07, 0	; 7
								SET(RESET_CAP);												
    2672:	40 9a       	sbi	0x08, 0	; 8
								SET(READY_LED);
    2674:	45 9a       	sbi	0x08, 5	; 8
							}
							debouncing = WAIT;											// wait for button up
    2676:	92 e0       	ldi	r25, 0x02	; 2
    2678:	f9 2e       	mov	r15, r25
    267a:	73 cc       	rjmp	.-1818   	; 0x1f62 <main+0xb0>
						}
					}
				}
			} else {																				// button's up
				if(debouncing == WAIT){												// if not debouncing
    267c:	b2 e0       	ldi	r27, 0x02	; 2
    267e:	fb 12       	cpse	r15, r27
    2680:	0b c0       	rjmp	.+22     	; 0x2698 <main+0x7e6>
					msStamp = msNow;														// time stamp
    2682:	20 90 21 01 	lds	r2, 0x0121
    2686:	30 90 22 01 	lds	r3, 0x0122
    268a:	40 90 23 01 	lds	r4, 0x0123
    268e:	50 90 24 01 	lds	r5, 0x0124
					debouncing = RELEASED;											// and start debounce
    2692:	83 e0       	ldi	r24, 0x03	; 3
    2694:	f8 2e       	mov	r15, r24
    2696:	65 cc       	rjmp	.-1846   	; 0x1f62 <main+0xb0>
				} else {
					if(debouncing == RELEASED){									// still debouncing
    2698:	23 e0       	ldi	r18, 0x03	; 3
    269a:	f2 12       	cpse	r15, r18
    269c:	62 cc       	rjmp	.-1852   	; 0x1f62 <main+0xb0>
						if(msElapsed > BOUNCE_PERIOD_MS){					// button's still up and debounce time elapsed
    269e:	c3 97       	sbiw	r24, 0x33	; 51
    26a0:	08 f4       	brcc	.+2      	; 0x26a4 <main+0x7f2>
    26a2:	5f cc       	rjmp	.-1858   	; 0x1f62 <main+0xb0>
							debouncing = IDLE;											// wait for button down again
							msNow = 0;															// reset time to prevent overflow
    26a4:	10 92 21 01 	sts	0x0121, r1
    26a8:	10 92 22 01 	sts	0x0122, r1
    26ac:	10 92 23 01 	sts	0x0123, r1
    26b0:	10 92 24 01 	sts	0x0124, r1
					msStamp = msNow;														// time stamp
					debouncing = RELEASED;											// and start debounce
				} else {
					if(debouncing == RELEASED){									// still debouncing
						if(msElapsed > BOUNCE_PERIOD_MS){					// button's still up and debounce time elapsed
							debouncing = IDLE;											// wait for button down again
    26b4:	f1 2c       	mov	r15, r1
    26b6:	55 cc       	rjmp	.-1878   	; 0x1f62 <main+0xb0>

000026b8 <__prologue_saves__>:
    26b8:	2f 92       	push	r2
    26ba:	3f 92       	push	r3
    26bc:	4f 92       	push	r4
    26be:	5f 92       	push	r5
    26c0:	6f 92       	push	r6
    26c2:	7f 92       	push	r7
    26c4:	8f 92       	push	r8
    26c6:	9f 92       	push	r9
    26c8:	af 92       	push	r10
    26ca:	bf 92       	push	r11
    26cc:	cf 92       	push	r12
    26ce:	df 92       	push	r13
    26d0:	ef 92       	push	r14
    26d2:	ff 92       	push	r15
    26d4:	0f 93       	push	r16
    26d6:	1f 93       	push	r17
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	ca 1b       	sub	r28, r26
    26e2:	db 0b       	sbc	r29, r27
    26e4:	0f b6       	in	r0, 0x3f	; 63
    26e6:	f8 94       	cli
    26e8:	de bf       	out	0x3e, r29	; 62
    26ea:	0f be       	out	0x3f, r0	; 63
    26ec:	cd bf       	out	0x3d, r28	; 61
    26ee:	09 94       	ijmp

000026f0 <__epilogue_restores__>:
    26f0:	2a 88       	ldd	r2, Y+18	; 0x12
    26f2:	39 88       	ldd	r3, Y+17	; 0x11
    26f4:	48 88       	ldd	r4, Y+16	; 0x10
    26f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    26f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    26fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    26fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    26fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    2700:	aa 84       	ldd	r10, Y+10	; 0x0a
    2702:	b9 84       	ldd	r11, Y+9	; 0x09
    2704:	c8 84       	ldd	r12, Y+8	; 0x08
    2706:	df 80       	ldd	r13, Y+7	; 0x07
    2708:	ee 80       	ldd	r14, Y+6	; 0x06
    270a:	fd 80       	ldd	r15, Y+5	; 0x05
    270c:	0c 81       	ldd	r16, Y+4	; 0x04
    270e:	1b 81       	ldd	r17, Y+3	; 0x03
    2710:	aa 81       	ldd	r26, Y+2	; 0x02
    2712:	b9 81       	ldd	r27, Y+1	; 0x01
    2714:	ce 0f       	add	r28, r30
    2716:	d1 1d       	adc	r29, r1
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	cd bf       	out	0x3d, r28	; 61
    2722:	ed 01       	movw	r28, r26
    2724:	08 95       	ret

00002726 <__ashrdi3>:
    2726:	97 fb       	bst	r25, 7
    2728:	10 f8       	bld	r1, 0

0000272a <__lshrdi3>:
    272a:	16 94       	lsr	r1
    272c:	00 08       	sbc	r0, r0
    272e:	0f 93       	push	r16
    2730:	08 30       	cpi	r16, 0x08	; 8
    2732:	98 f0       	brcs	.+38     	; 0x275a <__lshrdi3+0x30>
    2734:	08 50       	subi	r16, 0x08	; 8
    2736:	23 2f       	mov	r18, r19
    2738:	34 2f       	mov	r19, r20
    273a:	45 2f       	mov	r20, r21
    273c:	56 2f       	mov	r21, r22
    273e:	67 2f       	mov	r22, r23
    2740:	78 2f       	mov	r23, r24
    2742:	89 2f       	mov	r24, r25
    2744:	90 2d       	mov	r25, r0
    2746:	f4 cf       	rjmp	.-24     	; 0x2730 <__lshrdi3+0x6>
    2748:	05 94       	asr	r0
    274a:	97 95       	ror	r25
    274c:	87 95       	ror	r24
    274e:	77 95       	ror	r23
    2750:	67 95       	ror	r22
    2752:	57 95       	ror	r21
    2754:	47 95       	ror	r20
    2756:	37 95       	ror	r19
    2758:	27 95       	ror	r18
    275a:	0a 95       	dec	r16
    275c:	aa f7       	brpl	.-22     	; 0x2748 <__lshrdi3+0x1e>
    275e:	0f 91       	pop	r16
    2760:	08 95       	ret

00002762 <__ftoa_engine>:
    2762:	28 30       	cpi	r18, 0x08	; 8
    2764:	08 f0       	brcs	.+2      	; 0x2768 <__ftoa_engine+0x6>
    2766:	27 e0       	ldi	r18, 0x07	; 7
    2768:	33 27       	eor	r19, r19
    276a:	da 01       	movw	r26, r20
    276c:	99 0f       	add	r25, r25
    276e:	31 1d       	adc	r19, r1
    2770:	87 fd       	sbrc	r24, 7
    2772:	91 60       	ori	r25, 0x01	; 1
    2774:	00 96       	adiw	r24, 0x00	; 0
    2776:	61 05       	cpc	r22, r1
    2778:	71 05       	cpc	r23, r1
    277a:	39 f4       	brne	.+14     	; 0x278a <__ftoa_engine+0x28>
    277c:	32 60       	ori	r19, 0x02	; 2
    277e:	2e 5f       	subi	r18, 0xFE	; 254
    2780:	3d 93       	st	X+, r19
    2782:	30 e3       	ldi	r19, 0x30	; 48
    2784:	2a 95       	dec	r18
    2786:	e1 f7       	brne	.-8      	; 0x2780 <__ftoa_engine+0x1e>
    2788:	08 95       	ret
    278a:	9f 3f       	cpi	r25, 0xFF	; 255
    278c:	30 f0       	brcs	.+12     	; 0x279a <__ftoa_engine+0x38>
    278e:	80 38       	cpi	r24, 0x80	; 128
    2790:	71 05       	cpc	r23, r1
    2792:	61 05       	cpc	r22, r1
    2794:	09 f0       	breq	.+2      	; 0x2798 <__ftoa_engine+0x36>
    2796:	3c 5f       	subi	r19, 0xFC	; 252
    2798:	3c 5f       	subi	r19, 0xFC	; 252
    279a:	3d 93       	st	X+, r19
    279c:	91 30       	cpi	r25, 0x01	; 1
    279e:	08 f0       	brcs	.+2      	; 0x27a2 <__ftoa_engine+0x40>
    27a0:	80 68       	ori	r24, 0x80	; 128
    27a2:	91 1d       	adc	r25, r1
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	1f 93       	push	r17
    27aa:	0f 93       	push	r16
    27ac:	ff 92       	push	r15
    27ae:	ef 92       	push	r14
    27b0:	19 2f       	mov	r17, r25
    27b2:	98 7f       	andi	r25, 0xF8	; 248
    27b4:	96 95       	lsr	r25
    27b6:	e9 2f       	mov	r30, r25
    27b8:	96 95       	lsr	r25
    27ba:	96 95       	lsr	r25
    27bc:	e9 0f       	add	r30, r25
    27be:	ff 27       	eor	r31, r31
    27c0:	ed 5e       	subi	r30, 0xED	; 237
    27c2:	fd 4f       	sbci	r31, 0xFD	; 253
    27c4:	99 27       	eor	r25, r25
    27c6:	33 27       	eor	r19, r19
    27c8:	ee 24       	eor	r14, r14
    27ca:	ff 24       	eor	r15, r15
    27cc:	a7 01       	movw	r20, r14
    27ce:	e7 01       	movw	r28, r14
    27d0:	05 90       	lpm	r0, Z+
    27d2:	08 94       	sec
    27d4:	07 94       	ror	r0
    27d6:	28 f4       	brcc	.+10     	; 0x27e2 <__ftoa_engine+0x80>
    27d8:	36 0f       	add	r19, r22
    27da:	e7 1e       	adc	r14, r23
    27dc:	f8 1e       	adc	r15, r24
    27de:	49 1f       	adc	r20, r25
    27e0:	51 1d       	adc	r21, r1
    27e2:	66 0f       	add	r22, r22
    27e4:	77 1f       	adc	r23, r23
    27e6:	88 1f       	adc	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	06 94       	lsr	r0
    27ec:	a1 f7       	brne	.-24     	; 0x27d6 <__ftoa_engine+0x74>
    27ee:	05 90       	lpm	r0, Z+
    27f0:	07 94       	ror	r0
    27f2:	28 f4       	brcc	.+10     	; 0x27fe <__ftoa_engine+0x9c>
    27f4:	e7 0e       	add	r14, r23
    27f6:	f8 1e       	adc	r15, r24
    27f8:	49 1f       	adc	r20, r25
    27fa:	56 1f       	adc	r21, r22
    27fc:	c1 1d       	adc	r28, r1
    27fe:	77 0f       	add	r23, r23
    2800:	88 1f       	adc	r24, r24
    2802:	99 1f       	adc	r25, r25
    2804:	66 1f       	adc	r22, r22
    2806:	06 94       	lsr	r0
    2808:	a1 f7       	brne	.-24     	; 0x27f2 <__ftoa_engine+0x90>
    280a:	05 90       	lpm	r0, Z+
    280c:	07 94       	ror	r0
    280e:	28 f4       	brcc	.+10     	; 0x281a <__ftoa_engine+0xb8>
    2810:	f8 0e       	add	r15, r24
    2812:	49 1f       	adc	r20, r25
    2814:	56 1f       	adc	r21, r22
    2816:	c7 1f       	adc	r28, r23
    2818:	d1 1d       	adc	r29, r1
    281a:	88 0f       	add	r24, r24
    281c:	99 1f       	adc	r25, r25
    281e:	66 1f       	adc	r22, r22
    2820:	77 1f       	adc	r23, r23
    2822:	06 94       	lsr	r0
    2824:	a1 f7       	brne	.-24     	; 0x280e <__ftoa_engine+0xac>
    2826:	05 90       	lpm	r0, Z+
    2828:	07 94       	ror	r0
    282a:	20 f4       	brcc	.+8      	; 0x2834 <__ftoa_engine+0xd2>
    282c:	49 0f       	add	r20, r25
    282e:	56 1f       	adc	r21, r22
    2830:	c7 1f       	adc	r28, r23
    2832:	d8 1f       	adc	r29, r24
    2834:	99 0f       	add	r25, r25
    2836:	66 1f       	adc	r22, r22
    2838:	77 1f       	adc	r23, r23
    283a:	88 1f       	adc	r24, r24
    283c:	06 94       	lsr	r0
    283e:	a9 f7       	brne	.-22     	; 0x282a <__ftoa_engine+0xc8>
    2840:	84 91       	lpm	r24, Z
    2842:	10 95       	com	r17
    2844:	17 70       	andi	r17, 0x07	; 7
    2846:	41 f0       	breq	.+16     	; 0x2858 <__ftoa_engine+0xf6>
    2848:	d6 95       	lsr	r29
    284a:	c7 95       	ror	r28
    284c:	57 95       	ror	r21
    284e:	47 95       	ror	r20
    2850:	f7 94       	ror	r15
    2852:	e7 94       	ror	r14
    2854:	1a 95       	dec	r17
    2856:	c1 f7       	brne	.-16     	; 0x2848 <__ftoa_engine+0xe6>
    2858:	e9 eb       	ldi	r30, 0xB9	; 185
    285a:	f1 e0       	ldi	r31, 0x01	; 1
    285c:	68 94       	set
    285e:	15 90       	lpm	r1, Z+
    2860:	15 91       	lpm	r17, Z+
    2862:	35 91       	lpm	r19, Z+
    2864:	65 91       	lpm	r22, Z+
    2866:	95 91       	lpm	r25, Z+
    2868:	05 90       	lpm	r0, Z+
    286a:	7f e2       	ldi	r23, 0x2F	; 47
    286c:	73 95       	inc	r23
    286e:	e1 18       	sub	r14, r1
    2870:	f1 0a       	sbc	r15, r17
    2872:	43 0b       	sbc	r20, r19
    2874:	56 0b       	sbc	r21, r22
    2876:	c9 0b       	sbc	r28, r25
    2878:	d0 09       	sbc	r29, r0
    287a:	c0 f7       	brcc	.-16     	; 0x286c <__ftoa_engine+0x10a>
    287c:	e1 0c       	add	r14, r1
    287e:	f1 1e       	adc	r15, r17
    2880:	43 1f       	adc	r20, r19
    2882:	56 1f       	adc	r21, r22
    2884:	c9 1f       	adc	r28, r25
    2886:	d0 1d       	adc	r29, r0
    2888:	7e f4       	brtc	.+30     	; 0x28a8 <__ftoa_engine+0x146>
    288a:	70 33       	cpi	r23, 0x30	; 48
    288c:	11 f4       	brne	.+4      	; 0x2892 <__ftoa_engine+0x130>
    288e:	8a 95       	dec	r24
    2890:	e6 cf       	rjmp	.-52     	; 0x285e <__ftoa_engine+0xfc>
    2892:	e8 94       	clt
    2894:	01 50       	subi	r16, 0x01	; 1
    2896:	30 f0       	brcs	.+12     	; 0x28a4 <__ftoa_engine+0x142>
    2898:	08 0f       	add	r16, r24
    289a:	0a f4       	brpl	.+2      	; 0x289e <__ftoa_engine+0x13c>
    289c:	00 27       	eor	r16, r16
    289e:	02 17       	cp	r16, r18
    28a0:	08 f4       	brcc	.+2      	; 0x28a4 <__ftoa_engine+0x142>
    28a2:	20 2f       	mov	r18, r16
    28a4:	23 95       	inc	r18
    28a6:	02 2f       	mov	r16, r18
    28a8:	7a 33       	cpi	r23, 0x3A	; 58
    28aa:	28 f0       	brcs	.+10     	; 0x28b6 <__ftoa_engine+0x154>
    28ac:	79 e3       	ldi	r23, 0x39	; 57
    28ae:	7d 93       	st	X+, r23
    28b0:	2a 95       	dec	r18
    28b2:	e9 f7       	brne	.-6      	; 0x28ae <__ftoa_engine+0x14c>
    28b4:	10 c0       	rjmp	.+32     	; 0x28d6 <__ftoa_engine+0x174>
    28b6:	7d 93       	st	X+, r23
    28b8:	2a 95       	dec	r18
    28ba:	89 f6       	brne	.-94     	; 0x285e <__ftoa_engine+0xfc>
    28bc:	06 94       	lsr	r0
    28be:	97 95       	ror	r25
    28c0:	67 95       	ror	r22
    28c2:	37 95       	ror	r19
    28c4:	17 95       	ror	r17
    28c6:	17 94       	ror	r1
    28c8:	e1 18       	sub	r14, r1
    28ca:	f1 0a       	sbc	r15, r17
    28cc:	43 0b       	sbc	r20, r19
    28ce:	56 0b       	sbc	r21, r22
    28d0:	c9 0b       	sbc	r28, r25
    28d2:	d0 09       	sbc	r29, r0
    28d4:	98 f0       	brcs	.+38     	; 0x28fc <__ftoa_engine+0x19a>
    28d6:	23 95       	inc	r18
    28d8:	7e 91       	ld	r23, -X
    28da:	73 95       	inc	r23
    28dc:	7a 33       	cpi	r23, 0x3A	; 58
    28de:	08 f0       	brcs	.+2      	; 0x28e2 <__ftoa_engine+0x180>
    28e0:	70 e3       	ldi	r23, 0x30	; 48
    28e2:	7c 93       	st	X, r23
    28e4:	20 13       	cpse	r18, r16
    28e6:	b8 f7       	brcc	.-18     	; 0x28d6 <__ftoa_engine+0x174>
    28e8:	7e 91       	ld	r23, -X
    28ea:	70 61       	ori	r23, 0x10	; 16
    28ec:	7d 93       	st	X+, r23
    28ee:	30 f0       	brcs	.+12     	; 0x28fc <__ftoa_engine+0x19a>
    28f0:	83 95       	inc	r24
    28f2:	71 e3       	ldi	r23, 0x31	; 49
    28f4:	7d 93       	st	X+, r23
    28f6:	70 e3       	ldi	r23, 0x30	; 48
    28f8:	2a 95       	dec	r18
    28fa:	e1 f7       	brne	.-8      	; 0x28f4 <__ftoa_engine+0x192>
    28fc:	11 24       	eor	r1, r1
    28fe:	ef 90       	pop	r14
    2900:	ff 90       	pop	r15
    2902:	0f 91       	pop	r16
    2904:	1f 91       	pop	r17
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	99 27       	eor	r25, r25
    290c:	87 fd       	sbrc	r24, 7
    290e:	90 95       	com	r25
    2910:	08 95       	ret

00002912 <isspace>:
    2912:	91 11       	cpse	r25, r1
    2914:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__ctype_isfalse>
    2918:	80 32       	cpi	r24, 0x20	; 32
    291a:	19 f0       	breq	.+6      	; 0x2922 <isspace+0x10>
    291c:	89 50       	subi	r24, 0x09	; 9
    291e:	85 50       	subi	r24, 0x05	; 5
    2920:	c8 f7       	brcc	.-14     	; 0x2914 <isspace+0x2>
    2922:	08 95       	ret

00002924 <tolower>:
    2924:	91 11       	cpse	r25, r1
    2926:	08 95       	ret
    2928:	81 54       	subi	r24, 0x41	; 65
    292a:	8a 51       	subi	r24, 0x1A	; 26
    292c:	08 f4       	brcc	.+2      	; 0x2930 <tolower+0xc>
    292e:	80 5e       	subi	r24, 0xE0	; 224
    2930:	85 5a       	subi	r24, 0xA5	; 165
    2932:	08 95       	ret

00002934 <memcmp_P>:
    2934:	fb 01       	movw	r30, r22
    2936:	dc 01       	movw	r26, r24
    2938:	04 c0       	rjmp	.+8      	; 0x2942 <memcmp_P+0xe>
    293a:	8d 91       	ld	r24, X+
    293c:	05 90       	lpm	r0, Z+
    293e:	80 19       	sub	r24, r0
    2940:	21 f4       	brne	.+8      	; 0x294a <memcmp_P+0x16>
    2942:	41 50       	subi	r20, 0x01	; 1
    2944:	50 40       	sbci	r21, 0x00	; 0
    2946:	c8 f7       	brcc	.-14     	; 0x293a <memcmp_P+0x6>
    2948:	88 1b       	sub	r24, r24
    294a:	99 0b       	sbc	r25, r25
    294c:	08 95       	ret

0000294e <strchr_P>:
    294e:	fc 01       	movw	r30, r24
    2950:	05 90       	lpm	r0, Z+
    2952:	06 16       	cp	r0, r22
    2954:	21 f0       	breq	.+8      	; 0x295e <strchr_P+0x10>
    2956:	00 20       	and	r0, r0
    2958:	d9 f7       	brne	.-10     	; 0x2950 <strchr_P+0x2>
    295a:	c0 01       	movw	r24, r0
    295c:	08 95       	ret
    295e:	31 97       	sbiw	r30, 0x01	; 1
    2960:	cf 01       	movw	r24, r30
    2962:	08 95       	ret

00002964 <strnlen_P>:
    2964:	fc 01       	movw	r30, r24
    2966:	05 90       	lpm	r0, Z+
    2968:	61 50       	subi	r22, 0x01	; 1
    296a:	70 40       	sbci	r23, 0x00	; 0
    296c:	01 10       	cpse	r0, r1
    296e:	d8 f7       	brcc	.-10     	; 0x2966 <strnlen_P+0x2>
    2970:	80 95       	com	r24
    2972:	90 95       	com	r25
    2974:	8e 0f       	add	r24, r30
    2976:	9f 1f       	adc	r25, r31
    2978:	08 95       	ret

0000297a <strnlen>:
    297a:	fc 01       	movw	r30, r24
    297c:	61 50       	subi	r22, 0x01	; 1
    297e:	70 40       	sbci	r23, 0x00	; 0
    2980:	01 90       	ld	r0, Z+
    2982:	01 10       	cpse	r0, r1
    2984:	d8 f7       	brcc	.-10     	; 0x297c <strnlen+0x2>
    2986:	80 95       	com	r24
    2988:	90 95       	com	r25
    298a:	8e 0f       	add	r24, r30
    298c:	9f 1f       	adc	r25, r31
    298e:	08 95       	ret

00002990 <fdevopen>:
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	00 97       	sbiw	r24, 0x00	; 0
    299a:	31 f4       	brne	.+12     	; 0x29a8 <fdevopen+0x18>
    299c:	61 15       	cp	r22, r1
    299e:	71 05       	cpc	r23, r1
    29a0:	19 f4       	brne	.+6      	; 0x29a8 <fdevopen+0x18>
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	3a c0       	rjmp	.+116    	; 0x2a1c <fdevopen+0x8c>
    29a8:	8b 01       	movw	r16, r22
    29aa:	ec 01       	movw	r28, r24
    29ac:	6e e0       	ldi	r22, 0x0E	; 14
    29ae:	70 e0       	ldi	r23, 0x00	; 0
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <calloc>
    29b8:	fc 01       	movw	r30, r24
    29ba:	89 2b       	or	r24, r25
    29bc:	91 f3       	breq	.-28     	; 0x29a2 <fdevopen+0x12>
    29be:	80 e8       	ldi	r24, 0x80	; 128
    29c0:	83 83       	std	Z+3, r24	; 0x03
    29c2:	01 15       	cp	r16, r1
    29c4:	11 05       	cpc	r17, r1
    29c6:	71 f0       	breq	.+28     	; 0x29e4 <fdevopen+0x54>
    29c8:	13 87       	std	Z+11, r17	; 0x0b
    29ca:	02 87       	std	Z+10, r16	; 0x0a
    29cc:	81 e8       	ldi	r24, 0x81	; 129
    29ce:	83 83       	std	Z+3, r24	; 0x03
    29d0:	80 91 d1 01 	lds	r24, 0x01D1
    29d4:	90 91 d2 01 	lds	r25, 0x01D2
    29d8:	89 2b       	or	r24, r25
    29da:	21 f4       	brne	.+8      	; 0x29e4 <fdevopen+0x54>
    29dc:	f0 93 d2 01 	sts	0x01D2, r31
    29e0:	e0 93 d1 01 	sts	0x01D1, r30
    29e4:	20 97       	sbiw	r28, 0x00	; 0
    29e6:	c9 f0       	breq	.+50     	; 0x2a1a <fdevopen+0x8a>
    29e8:	d1 87       	std	Z+9, r29	; 0x09
    29ea:	c0 87       	std	Z+8, r28	; 0x08
    29ec:	83 81       	ldd	r24, Z+3	; 0x03
    29ee:	82 60       	ori	r24, 0x02	; 2
    29f0:	83 83       	std	Z+3, r24	; 0x03
    29f2:	80 91 d3 01 	lds	r24, 0x01D3
    29f6:	90 91 d4 01 	lds	r25, 0x01D4
    29fa:	89 2b       	or	r24, r25
    29fc:	71 f4       	brne	.+28     	; 0x2a1a <fdevopen+0x8a>
    29fe:	f0 93 d4 01 	sts	0x01D4, r31
    2a02:	e0 93 d3 01 	sts	0x01D3, r30
    2a06:	80 91 d5 01 	lds	r24, 0x01D5
    2a0a:	90 91 d6 01 	lds	r25, 0x01D6
    2a0e:	89 2b       	or	r24, r25
    2a10:	21 f4       	brne	.+8      	; 0x2a1a <fdevopen+0x8a>
    2a12:	f0 93 d6 01 	sts	0x01D6, r31
    2a16:	e0 93 d5 01 	sts	0x01D5, r30
    2a1a:	cf 01       	movw	r24, r30
    2a1c:	df 91       	pop	r29
    2a1e:	cf 91       	pop	r28
    2a20:	1f 91       	pop	r17
    2a22:	0f 91       	pop	r16
    2a24:	08 95       	ret

00002a26 <fgetc>:
    2a26:	cf 93       	push	r28
    2a28:	df 93       	push	r29
    2a2a:	ec 01       	movw	r28, r24
    2a2c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a2e:	20 ff       	sbrs	r18, 0
    2a30:	33 c0       	rjmp	.+102    	; 0x2a98 <fgetc+0x72>
    2a32:	26 ff       	sbrs	r18, 6
    2a34:	0a c0       	rjmp	.+20     	; 0x2a4a <fgetc+0x24>
    2a36:	2f 7b       	andi	r18, 0xBF	; 191
    2a38:	2b 83       	std	Y+3, r18	; 0x03
    2a3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a3e:	01 96       	adiw	r24, 0x01	; 1
    2a40:	9f 83       	std	Y+7, r25	; 0x07
    2a42:	8e 83       	std	Y+6, r24	; 0x06
    2a44:	8a 81       	ldd	r24, Y+2	; 0x02
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	29 c0       	rjmp	.+82     	; 0x2a9c <fgetc+0x76>
    2a4a:	22 ff       	sbrs	r18, 2
    2a4c:	0f c0       	rjmp	.+30     	; 0x2a6c <fgetc+0x46>
    2a4e:	e8 81       	ld	r30, Y
    2a50:	f9 81       	ldd	r31, Y+1	; 0x01
    2a52:	80 81       	ld	r24, Z
    2a54:	08 2e       	mov	r0, r24
    2a56:	00 0c       	add	r0, r0
    2a58:	99 0b       	sbc	r25, r25
    2a5a:	00 97       	sbiw	r24, 0x00	; 0
    2a5c:	19 f4       	brne	.+6      	; 0x2a64 <fgetc+0x3e>
    2a5e:	20 62       	ori	r18, 0x20	; 32
    2a60:	2b 83       	std	Y+3, r18	; 0x03
    2a62:	1a c0       	rjmp	.+52     	; 0x2a98 <fgetc+0x72>
    2a64:	31 96       	adiw	r30, 0x01	; 1
    2a66:	f9 83       	std	Y+1, r31	; 0x01
    2a68:	e8 83       	st	Y, r30
    2a6a:	0e c0       	rjmp	.+28     	; 0x2a88 <fgetc+0x62>
    2a6c:	ea 85       	ldd	r30, Y+10	; 0x0a
    2a6e:	fb 85       	ldd	r31, Y+11	; 0x0b
    2a70:	09 95       	icall
    2a72:	97 ff       	sbrs	r25, 7
    2a74:	09 c0       	rjmp	.+18     	; 0x2a88 <fgetc+0x62>
    2a76:	2b 81       	ldd	r18, Y+3	; 0x03
    2a78:	01 96       	adiw	r24, 0x01	; 1
    2a7a:	11 f0       	breq	.+4      	; 0x2a80 <fgetc+0x5a>
    2a7c:	80 e2       	ldi	r24, 0x20	; 32
    2a7e:	01 c0       	rjmp	.+2      	; 0x2a82 <fgetc+0x5c>
    2a80:	80 e1       	ldi	r24, 0x10	; 16
    2a82:	82 2b       	or	r24, r18
    2a84:	8b 83       	std	Y+3, r24	; 0x03
    2a86:	08 c0       	rjmp	.+16     	; 0x2a98 <fgetc+0x72>
    2a88:	2e 81       	ldd	r18, Y+6	; 0x06
    2a8a:	3f 81       	ldd	r19, Y+7	; 0x07
    2a8c:	2f 5f       	subi	r18, 0xFF	; 255
    2a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a90:	3f 83       	std	Y+7, r19	; 0x07
    2a92:	2e 83       	std	Y+6, r18	; 0x06
    2a94:	99 27       	eor	r25, r25
    2a96:	02 c0       	rjmp	.+4      	; 0x2a9c <fgetc+0x76>
    2a98:	8f ef       	ldi	r24, 0xFF	; 255
    2a9a:	9f ef       	ldi	r25, 0xFF	; 255
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	08 95       	ret

00002aa2 <fprintf_P>:
    2aa2:	a0 e0       	ldi	r26, 0x00	; 0
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	e7 e5       	ldi	r30, 0x57	; 87
    2aa8:	f5 e1       	ldi	r31, 0x15	; 21
    2aaa:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__prologue_saves__+0x1c>
    2aae:	0f 81       	ldd	r16, Y+7	; 0x07
    2ab0:	18 85       	ldd	r17, Y+8	; 0x08
    2ab2:	f8 01       	movw	r30, r16
    2ab4:	83 81       	ldd	r24, Z+3	; 0x03
    2ab6:	88 60       	ori	r24, 0x08	; 8
    2ab8:	83 83       	std	Z+3, r24	; 0x03
    2aba:	ae 01       	movw	r20, r28
    2abc:	45 5f       	subi	r20, 0xF5	; 245
    2abe:	5f 4f       	sbci	r21, 0xFF	; 255
    2ac0:	69 85       	ldd	r22, Y+9	; 0x09
    2ac2:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ac4:	c8 01       	movw	r24, r16
    2ac6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <vfprintf>
    2aca:	f8 01       	movw	r30, r16
    2acc:	23 81       	ldd	r18, Z+3	; 0x03
    2ace:	27 7f       	andi	r18, 0xF7	; 247
    2ad0:	23 83       	std	Z+3, r18	; 0x03
    2ad2:	e4 e0       	ldi	r30, 0x04	; 4
    2ad4:	0c 94 86 13 	jmp	0x270c	; 0x270c <__epilogue_restores__+0x1c>

00002ad8 <fputc>:
    2ad8:	0f 93       	push	r16
    2ada:	1f 93       	push	r17
    2adc:	cf 93       	push	r28
    2ade:	df 93       	push	r29
    2ae0:	fb 01       	movw	r30, r22
    2ae2:	23 81       	ldd	r18, Z+3	; 0x03
    2ae4:	21 fd       	sbrc	r18, 1
    2ae6:	03 c0       	rjmp	.+6      	; 0x2aee <fputc+0x16>
    2ae8:	8f ef       	ldi	r24, 0xFF	; 255
    2aea:	9f ef       	ldi	r25, 0xFF	; 255
    2aec:	28 c0       	rjmp	.+80     	; 0x2b3e <fputc+0x66>
    2aee:	22 ff       	sbrs	r18, 2
    2af0:	16 c0       	rjmp	.+44     	; 0x2b1e <fputc+0x46>
    2af2:	46 81       	ldd	r20, Z+6	; 0x06
    2af4:	57 81       	ldd	r21, Z+7	; 0x07
    2af6:	24 81       	ldd	r18, Z+4	; 0x04
    2af8:	35 81       	ldd	r19, Z+5	; 0x05
    2afa:	42 17       	cp	r20, r18
    2afc:	53 07       	cpc	r21, r19
    2afe:	44 f4       	brge	.+16     	; 0x2b10 <fputc+0x38>
    2b00:	a0 81       	ld	r26, Z
    2b02:	b1 81       	ldd	r27, Z+1	; 0x01
    2b04:	9d 01       	movw	r18, r26
    2b06:	2f 5f       	subi	r18, 0xFF	; 255
    2b08:	3f 4f       	sbci	r19, 0xFF	; 255
    2b0a:	31 83       	std	Z+1, r19	; 0x01
    2b0c:	20 83       	st	Z, r18
    2b0e:	8c 93       	st	X, r24
    2b10:	26 81       	ldd	r18, Z+6	; 0x06
    2b12:	37 81       	ldd	r19, Z+7	; 0x07
    2b14:	2f 5f       	subi	r18, 0xFF	; 255
    2b16:	3f 4f       	sbci	r19, 0xFF	; 255
    2b18:	37 83       	std	Z+7, r19	; 0x07
    2b1a:	26 83       	std	Z+6, r18	; 0x06
    2b1c:	10 c0       	rjmp	.+32     	; 0x2b3e <fputc+0x66>
    2b1e:	eb 01       	movw	r28, r22
    2b20:	09 2f       	mov	r16, r25
    2b22:	18 2f       	mov	r17, r24
    2b24:	00 84       	ldd	r0, Z+8	; 0x08
    2b26:	f1 85       	ldd	r31, Z+9	; 0x09
    2b28:	e0 2d       	mov	r30, r0
    2b2a:	09 95       	icall
    2b2c:	89 2b       	or	r24, r25
    2b2e:	e1 f6       	brne	.-72     	; 0x2ae8 <fputc+0x10>
    2b30:	8e 81       	ldd	r24, Y+6	; 0x06
    2b32:	9f 81       	ldd	r25, Y+7	; 0x07
    2b34:	01 96       	adiw	r24, 0x01	; 1
    2b36:	9f 83       	std	Y+7, r25	; 0x07
    2b38:	8e 83       	std	Y+6, r24	; 0x06
    2b3a:	81 2f       	mov	r24, r17
    2b3c:	90 2f       	mov	r25, r16
    2b3e:	df 91       	pop	r29
    2b40:	cf 91       	pop	r28
    2b42:	1f 91       	pop	r17
    2b44:	0f 91       	pop	r16
    2b46:	08 95       	ret

00002b48 <ungetc>:
    2b48:	fb 01       	movw	r30, r22
    2b4a:	23 81       	ldd	r18, Z+3	; 0x03
    2b4c:	20 ff       	sbrs	r18, 0
    2b4e:	12 c0       	rjmp	.+36     	; 0x2b74 <ungetc+0x2c>
    2b50:	26 fd       	sbrc	r18, 6
    2b52:	10 c0       	rjmp	.+32     	; 0x2b74 <ungetc+0x2c>
    2b54:	8f 3f       	cpi	r24, 0xFF	; 255
    2b56:	3f ef       	ldi	r19, 0xFF	; 255
    2b58:	93 07       	cpc	r25, r19
    2b5a:	61 f0       	breq	.+24     	; 0x2b74 <ungetc+0x2c>
    2b5c:	82 83       	std	Z+2, r24	; 0x02
    2b5e:	2f 7d       	andi	r18, 0xDF	; 223
    2b60:	20 64       	ori	r18, 0x40	; 64
    2b62:	23 83       	std	Z+3, r18	; 0x03
    2b64:	26 81       	ldd	r18, Z+6	; 0x06
    2b66:	37 81       	ldd	r19, Z+7	; 0x07
    2b68:	21 50       	subi	r18, 0x01	; 1
    2b6a:	31 09       	sbc	r19, r1
    2b6c:	37 83       	std	Z+7, r19	; 0x07
    2b6e:	26 83       	std	Z+6, r18	; 0x06
    2b70:	99 27       	eor	r25, r25
    2b72:	08 95       	ret
    2b74:	8f ef       	ldi	r24, 0xFF	; 255
    2b76:	9f ef       	ldi	r25, 0xFF	; 255
    2b78:	08 95       	ret

00002b7a <__ultoa_invert>:
    2b7a:	fa 01       	movw	r30, r20
    2b7c:	aa 27       	eor	r26, r26
    2b7e:	28 30       	cpi	r18, 0x08	; 8
    2b80:	51 f1       	breq	.+84     	; 0x2bd6 <__ultoa_invert+0x5c>
    2b82:	20 31       	cpi	r18, 0x10	; 16
    2b84:	81 f1       	breq	.+96     	; 0x2be6 <__ultoa_invert+0x6c>
    2b86:	e8 94       	clt
    2b88:	6f 93       	push	r22
    2b8a:	6e 7f       	andi	r22, 0xFE	; 254
    2b8c:	6e 5f       	subi	r22, 0xFE	; 254
    2b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b90:	8f 4f       	sbci	r24, 0xFF	; 255
    2b92:	9f 4f       	sbci	r25, 0xFF	; 255
    2b94:	af 4f       	sbci	r26, 0xFF	; 255
    2b96:	b1 e0       	ldi	r27, 0x01	; 1
    2b98:	3e d0       	rcall	.+124    	; 0x2c16 <__ultoa_invert+0x9c>
    2b9a:	b4 e0       	ldi	r27, 0x04	; 4
    2b9c:	3c d0       	rcall	.+120    	; 0x2c16 <__ultoa_invert+0x9c>
    2b9e:	67 0f       	add	r22, r23
    2ba0:	78 1f       	adc	r23, r24
    2ba2:	89 1f       	adc	r24, r25
    2ba4:	9a 1f       	adc	r25, r26
    2ba6:	a1 1d       	adc	r26, r1
    2ba8:	68 0f       	add	r22, r24
    2baa:	79 1f       	adc	r23, r25
    2bac:	8a 1f       	adc	r24, r26
    2bae:	91 1d       	adc	r25, r1
    2bb0:	a1 1d       	adc	r26, r1
    2bb2:	6a 0f       	add	r22, r26
    2bb4:	71 1d       	adc	r23, r1
    2bb6:	81 1d       	adc	r24, r1
    2bb8:	91 1d       	adc	r25, r1
    2bba:	a1 1d       	adc	r26, r1
    2bbc:	20 d0       	rcall	.+64     	; 0x2bfe <__ultoa_invert+0x84>
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <__ultoa_invert+0x48>
    2bc0:	68 94       	set
    2bc2:	3f 91       	pop	r19
    2bc4:	2a e0       	ldi	r18, 0x0A	; 10
    2bc6:	26 9f       	mul	r18, r22
    2bc8:	11 24       	eor	r1, r1
    2bca:	30 19       	sub	r19, r0
    2bcc:	30 5d       	subi	r19, 0xD0	; 208
    2bce:	31 93       	st	Z+, r19
    2bd0:	de f6       	brtc	.-74     	; 0x2b88 <__ultoa_invert+0xe>
    2bd2:	cf 01       	movw	r24, r30
    2bd4:	08 95       	ret
    2bd6:	46 2f       	mov	r20, r22
    2bd8:	47 70       	andi	r20, 0x07	; 7
    2bda:	40 5d       	subi	r20, 0xD0	; 208
    2bdc:	41 93       	st	Z+, r20
    2bde:	b3 e0       	ldi	r27, 0x03	; 3
    2be0:	0f d0       	rcall	.+30     	; 0x2c00 <__ultoa_invert+0x86>
    2be2:	c9 f7       	brne	.-14     	; 0x2bd6 <__ultoa_invert+0x5c>
    2be4:	f6 cf       	rjmp	.-20     	; 0x2bd2 <__ultoa_invert+0x58>
    2be6:	46 2f       	mov	r20, r22
    2be8:	4f 70       	andi	r20, 0x0F	; 15
    2bea:	40 5d       	subi	r20, 0xD0	; 208
    2bec:	4a 33       	cpi	r20, 0x3A	; 58
    2bee:	18 f0       	brcs	.+6      	; 0x2bf6 <__ultoa_invert+0x7c>
    2bf0:	49 5d       	subi	r20, 0xD9	; 217
    2bf2:	31 fd       	sbrc	r19, 1
    2bf4:	40 52       	subi	r20, 0x20	; 32
    2bf6:	41 93       	st	Z+, r20
    2bf8:	02 d0       	rcall	.+4      	; 0x2bfe <__ultoa_invert+0x84>
    2bfa:	a9 f7       	brne	.-22     	; 0x2be6 <__ultoa_invert+0x6c>
    2bfc:	ea cf       	rjmp	.-44     	; 0x2bd2 <__ultoa_invert+0x58>
    2bfe:	b4 e0       	ldi	r27, 0x04	; 4
    2c00:	a6 95       	lsr	r26
    2c02:	97 95       	ror	r25
    2c04:	87 95       	ror	r24
    2c06:	77 95       	ror	r23
    2c08:	67 95       	ror	r22
    2c0a:	ba 95       	dec	r27
    2c0c:	c9 f7       	brne	.-14     	; 0x2c00 <__ultoa_invert+0x86>
    2c0e:	00 97       	sbiw	r24, 0x00	; 0
    2c10:	61 05       	cpc	r22, r1
    2c12:	71 05       	cpc	r23, r1
    2c14:	08 95       	ret
    2c16:	9b 01       	movw	r18, r22
    2c18:	ac 01       	movw	r20, r24
    2c1a:	0a 2e       	mov	r0, r26
    2c1c:	06 94       	lsr	r0
    2c1e:	57 95       	ror	r21
    2c20:	47 95       	ror	r20
    2c22:	37 95       	ror	r19
    2c24:	27 95       	ror	r18
    2c26:	ba 95       	dec	r27
    2c28:	c9 f7       	brne	.-14     	; 0x2c1c <__ultoa_invert+0xa2>
    2c2a:	62 0f       	add	r22, r18
    2c2c:	73 1f       	adc	r23, r19
    2c2e:	84 1f       	adc	r24, r20
    2c30:	95 1f       	adc	r25, r21
    2c32:	a0 1d       	adc	r26, r0
    2c34:	08 95       	ret

00002c36 <calloc>:
    2c36:	0f 93       	push	r16
    2c38:	1f 93       	push	r17
    2c3a:	cf 93       	push	r28
    2c3c:	df 93       	push	r29
    2c3e:	86 9f       	mul	r24, r22
    2c40:	80 01       	movw	r16, r0
    2c42:	87 9f       	mul	r24, r23
    2c44:	10 0d       	add	r17, r0
    2c46:	96 9f       	mul	r25, r22
    2c48:	10 0d       	add	r17, r0
    2c4a:	11 24       	eor	r1, r1
    2c4c:	c8 01       	movw	r24, r16
    2c4e:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <malloc>
    2c52:	ec 01       	movw	r28, r24
    2c54:	00 97       	sbiw	r24, 0x00	; 0
    2c56:	29 f0       	breq	.+10     	; 0x2c62 <calloc+0x2c>
    2c58:	a8 01       	movw	r20, r16
    2c5a:	60 e0       	ldi	r22, 0x00	; 0
    2c5c:	70 e0       	ldi	r23, 0x00	; 0
    2c5e:	0e 94 67 17 	call	0x2ece	; 0x2ece <memset>
    2c62:	ce 01       	movw	r24, r28
    2c64:	df 91       	pop	r29
    2c66:	cf 91       	pop	r28
    2c68:	1f 91       	pop	r17
    2c6a:	0f 91       	pop	r16
    2c6c:	08 95       	ret

00002c6e <malloc>:
    2c6e:	cf 93       	push	r28
    2c70:	df 93       	push	r29
    2c72:	82 30       	cpi	r24, 0x02	; 2
    2c74:	91 05       	cpc	r25, r1
    2c76:	10 f4       	brcc	.+4      	; 0x2c7c <malloc+0xe>
    2c78:	82 e0       	ldi	r24, 0x02	; 2
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	e0 91 d9 01 	lds	r30, 0x01D9
    2c80:	f0 91 da 01 	lds	r31, 0x01DA
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	c0 e0       	ldi	r28, 0x00	; 0
    2c8a:	d0 e0       	ldi	r29, 0x00	; 0
    2c8c:	30 97       	sbiw	r30, 0x00	; 0
    2c8e:	11 f1       	breq	.+68     	; 0x2cd4 <malloc+0x66>
    2c90:	40 81       	ld	r20, Z
    2c92:	51 81       	ldd	r21, Z+1	; 0x01
    2c94:	48 17       	cp	r20, r24
    2c96:	59 07       	cpc	r21, r25
    2c98:	c0 f0       	brcs	.+48     	; 0x2cca <malloc+0x5c>
    2c9a:	48 17       	cp	r20, r24
    2c9c:	59 07       	cpc	r21, r25
    2c9e:	61 f4       	brne	.+24     	; 0x2cb8 <malloc+0x4a>
    2ca0:	82 81       	ldd	r24, Z+2	; 0x02
    2ca2:	93 81       	ldd	r25, Z+3	; 0x03
    2ca4:	20 97       	sbiw	r28, 0x00	; 0
    2ca6:	19 f0       	breq	.+6      	; 0x2cae <malloc+0x40>
    2ca8:	9b 83       	std	Y+3, r25	; 0x03
    2caa:	8a 83       	std	Y+2, r24	; 0x02
    2cac:	2b c0       	rjmp	.+86     	; 0x2d04 <malloc+0x96>
    2cae:	90 93 da 01 	sts	0x01DA, r25
    2cb2:	80 93 d9 01 	sts	0x01D9, r24
    2cb6:	26 c0       	rjmp	.+76     	; 0x2d04 <malloc+0x96>
    2cb8:	21 15       	cp	r18, r1
    2cba:	31 05       	cpc	r19, r1
    2cbc:	19 f0       	breq	.+6      	; 0x2cc4 <malloc+0x56>
    2cbe:	42 17       	cp	r20, r18
    2cc0:	53 07       	cpc	r21, r19
    2cc2:	18 f4       	brcc	.+6      	; 0x2cca <malloc+0x5c>
    2cc4:	9a 01       	movw	r18, r20
    2cc6:	be 01       	movw	r22, r28
    2cc8:	df 01       	movw	r26, r30
    2cca:	ef 01       	movw	r28, r30
    2ccc:	02 80       	ldd	r0, Z+2	; 0x02
    2cce:	f3 81       	ldd	r31, Z+3	; 0x03
    2cd0:	e0 2d       	mov	r30, r0
    2cd2:	dc cf       	rjmp	.-72     	; 0x2c8c <malloc+0x1e>
    2cd4:	21 15       	cp	r18, r1
    2cd6:	31 05       	cpc	r19, r1
    2cd8:	09 f1       	breq	.+66     	; 0x2d1c <malloc+0xae>
    2cda:	28 1b       	sub	r18, r24
    2cdc:	39 0b       	sbc	r19, r25
    2cde:	24 30       	cpi	r18, 0x04	; 4
    2ce0:	31 05       	cpc	r19, r1
    2ce2:	90 f4       	brcc	.+36     	; 0x2d08 <malloc+0x9a>
    2ce4:	12 96       	adiw	r26, 0x02	; 2
    2ce6:	8d 91       	ld	r24, X+
    2ce8:	9c 91       	ld	r25, X
    2cea:	13 97       	sbiw	r26, 0x03	; 3
    2cec:	61 15       	cp	r22, r1
    2cee:	71 05       	cpc	r23, r1
    2cf0:	21 f0       	breq	.+8      	; 0x2cfa <malloc+0x8c>
    2cf2:	fb 01       	movw	r30, r22
    2cf4:	93 83       	std	Z+3, r25	; 0x03
    2cf6:	82 83       	std	Z+2, r24	; 0x02
    2cf8:	04 c0       	rjmp	.+8      	; 0x2d02 <malloc+0x94>
    2cfa:	90 93 da 01 	sts	0x01DA, r25
    2cfe:	80 93 d9 01 	sts	0x01D9, r24
    2d02:	fd 01       	movw	r30, r26
    2d04:	32 96       	adiw	r30, 0x02	; 2
    2d06:	44 c0       	rjmp	.+136    	; 0x2d90 <malloc+0x122>
    2d08:	fd 01       	movw	r30, r26
    2d0a:	e2 0f       	add	r30, r18
    2d0c:	f3 1f       	adc	r31, r19
    2d0e:	81 93       	st	Z+, r24
    2d10:	91 93       	st	Z+, r25
    2d12:	22 50       	subi	r18, 0x02	; 2
    2d14:	31 09       	sbc	r19, r1
    2d16:	2d 93       	st	X+, r18
    2d18:	3c 93       	st	X, r19
    2d1a:	3a c0       	rjmp	.+116    	; 0x2d90 <malloc+0x122>
    2d1c:	20 91 d7 01 	lds	r18, 0x01D7
    2d20:	30 91 d8 01 	lds	r19, 0x01D8
    2d24:	23 2b       	or	r18, r19
    2d26:	41 f4       	brne	.+16     	; 0x2d38 <malloc+0xca>
    2d28:	20 91 04 01 	lds	r18, 0x0104
    2d2c:	30 91 05 01 	lds	r19, 0x0105
    2d30:	30 93 d8 01 	sts	0x01D8, r19
    2d34:	20 93 d7 01 	sts	0x01D7, r18
    2d38:	20 91 02 01 	lds	r18, 0x0102
    2d3c:	30 91 03 01 	lds	r19, 0x0103
    2d40:	21 15       	cp	r18, r1
    2d42:	31 05       	cpc	r19, r1
    2d44:	41 f4       	brne	.+16     	; 0x2d56 <malloc+0xe8>
    2d46:	2d b7       	in	r18, 0x3d	; 61
    2d48:	3e b7       	in	r19, 0x3e	; 62
    2d4a:	40 91 06 01 	lds	r20, 0x0106
    2d4e:	50 91 07 01 	lds	r21, 0x0107
    2d52:	24 1b       	sub	r18, r20
    2d54:	35 0b       	sbc	r19, r21
    2d56:	e0 91 d7 01 	lds	r30, 0x01D7
    2d5a:	f0 91 d8 01 	lds	r31, 0x01D8
    2d5e:	e2 17       	cp	r30, r18
    2d60:	f3 07       	cpc	r31, r19
    2d62:	a0 f4       	brcc	.+40     	; 0x2d8c <malloc+0x11e>
    2d64:	2e 1b       	sub	r18, r30
    2d66:	3f 0b       	sbc	r19, r31
    2d68:	28 17       	cp	r18, r24
    2d6a:	39 07       	cpc	r19, r25
    2d6c:	78 f0       	brcs	.+30     	; 0x2d8c <malloc+0x11e>
    2d6e:	ac 01       	movw	r20, r24
    2d70:	4e 5f       	subi	r20, 0xFE	; 254
    2d72:	5f 4f       	sbci	r21, 0xFF	; 255
    2d74:	24 17       	cp	r18, r20
    2d76:	35 07       	cpc	r19, r21
    2d78:	48 f0       	brcs	.+18     	; 0x2d8c <malloc+0x11e>
    2d7a:	4e 0f       	add	r20, r30
    2d7c:	5f 1f       	adc	r21, r31
    2d7e:	50 93 d8 01 	sts	0x01D8, r21
    2d82:	40 93 d7 01 	sts	0x01D7, r20
    2d86:	81 93       	st	Z+, r24
    2d88:	91 93       	st	Z+, r25
    2d8a:	02 c0       	rjmp	.+4      	; 0x2d90 <malloc+0x122>
    2d8c:	e0 e0       	ldi	r30, 0x00	; 0
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	cf 01       	movw	r24, r30
    2d92:	df 91       	pop	r29
    2d94:	cf 91       	pop	r28
    2d96:	08 95       	ret

00002d98 <free>:
    2d98:	0f 93       	push	r16
    2d9a:	1f 93       	push	r17
    2d9c:	cf 93       	push	r28
    2d9e:	df 93       	push	r29
    2da0:	00 97       	sbiw	r24, 0x00	; 0
    2da2:	09 f4       	brne	.+2      	; 0x2da6 <free+0xe>
    2da4:	8c c0       	rjmp	.+280    	; 0x2ebe <free+0x126>
    2da6:	fc 01       	movw	r30, r24
    2da8:	32 97       	sbiw	r30, 0x02	; 2
    2daa:	13 82       	std	Z+3, r1	; 0x03
    2dac:	12 82       	std	Z+2, r1	; 0x02
    2dae:	00 91 d9 01 	lds	r16, 0x01D9
    2db2:	10 91 da 01 	lds	r17, 0x01DA
    2db6:	01 15       	cp	r16, r1
    2db8:	11 05       	cpc	r17, r1
    2dba:	81 f4       	brne	.+32     	; 0x2ddc <free+0x44>
    2dbc:	20 81       	ld	r18, Z
    2dbe:	31 81       	ldd	r19, Z+1	; 0x01
    2dc0:	82 0f       	add	r24, r18
    2dc2:	93 1f       	adc	r25, r19
    2dc4:	20 91 d7 01 	lds	r18, 0x01D7
    2dc8:	30 91 d8 01 	lds	r19, 0x01D8
    2dcc:	28 17       	cp	r18, r24
    2dce:	39 07       	cpc	r19, r25
    2dd0:	79 f5       	brne	.+94     	; 0x2e30 <free+0x98>
    2dd2:	f0 93 d8 01 	sts	0x01D8, r31
    2dd6:	e0 93 d7 01 	sts	0x01D7, r30
    2dda:	71 c0       	rjmp	.+226    	; 0x2ebe <free+0x126>
    2ddc:	d8 01       	movw	r26, r16
    2dde:	40 e0       	ldi	r20, 0x00	; 0
    2de0:	50 e0       	ldi	r21, 0x00	; 0
    2de2:	ae 17       	cp	r26, r30
    2de4:	bf 07       	cpc	r27, r31
    2de6:	50 f4       	brcc	.+20     	; 0x2dfc <free+0x64>
    2de8:	12 96       	adiw	r26, 0x02	; 2
    2dea:	2d 91       	ld	r18, X+
    2dec:	3c 91       	ld	r19, X
    2dee:	13 97       	sbiw	r26, 0x03	; 3
    2df0:	ad 01       	movw	r20, r26
    2df2:	21 15       	cp	r18, r1
    2df4:	31 05       	cpc	r19, r1
    2df6:	09 f1       	breq	.+66     	; 0x2e3a <free+0xa2>
    2df8:	d9 01       	movw	r26, r18
    2dfa:	f3 cf       	rjmp	.-26     	; 0x2de2 <free+0x4a>
    2dfc:	9d 01       	movw	r18, r26
    2dfe:	da 01       	movw	r26, r20
    2e00:	33 83       	std	Z+3, r19	; 0x03
    2e02:	22 83       	std	Z+2, r18	; 0x02
    2e04:	60 81       	ld	r22, Z
    2e06:	71 81       	ldd	r23, Z+1	; 0x01
    2e08:	86 0f       	add	r24, r22
    2e0a:	97 1f       	adc	r25, r23
    2e0c:	82 17       	cp	r24, r18
    2e0e:	93 07       	cpc	r25, r19
    2e10:	69 f4       	brne	.+26     	; 0x2e2c <free+0x94>
    2e12:	ec 01       	movw	r28, r24
    2e14:	28 81       	ld	r18, Y
    2e16:	39 81       	ldd	r19, Y+1	; 0x01
    2e18:	26 0f       	add	r18, r22
    2e1a:	37 1f       	adc	r19, r23
    2e1c:	2e 5f       	subi	r18, 0xFE	; 254
    2e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e20:	31 83       	std	Z+1, r19	; 0x01
    2e22:	20 83       	st	Z, r18
    2e24:	8a 81       	ldd	r24, Y+2	; 0x02
    2e26:	9b 81       	ldd	r25, Y+3	; 0x03
    2e28:	93 83       	std	Z+3, r25	; 0x03
    2e2a:	82 83       	std	Z+2, r24	; 0x02
    2e2c:	45 2b       	or	r20, r21
    2e2e:	29 f4       	brne	.+10     	; 0x2e3a <free+0xa2>
    2e30:	f0 93 da 01 	sts	0x01DA, r31
    2e34:	e0 93 d9 01 	sts	0x01D9, r30
    2e38:	42 c0       	rjmp	.+132    	; 0x2ebe <free+0x126>
    2e3a:	13 96       	adiw	r26, 0x03	; 3
    2e3c:	fc 93       	st	X, r31
    2e3e:	ee 93       	st	-X, r30
    2e40:	12 97       	sbiw	r26, 0x02	; 2
    2e42:	ed 01       	movw	r28, r26
    2e44:	49 91       	ld	r20, Y+
    2e46:	59 91       	ld	r21, Y+
    2e48:	9e 01       	movw	r18, r28
    2e4a:	24 0f       	add	r18, r20
    2e4c:	35 1f       	adc	r19, r21
    2e4e:	e2 17       	cp	r30, r18
    2e50:	f3 07       	cpc	r31, r19
    2e52:	71 f4       	brne	.+28     	; 0x2e70 <free+0xd8>
    2e54:	80 81       	ld	r24, Z
    2e56:	91 81       	ldd	r25, Z+1	; 0x01
    2e58:	84 0f       	add	r24, r20
    2e5a:	95 1f       	adc	r25, r21
    2e5c:	02 96       	adiw	r24, 0x02	; 2
    2e5e:	11 96       	adiw	r26, 0x01	; 1
    2e60:	9c 93       	st	X, r25
    2e62:	8e 93       	st	-X, r24
    2e64:	82 81       	ldd	r24, Z+2	; 0x02
    2e66:	93 81       	ldd	r25, Z+3	; 0x03
    2e68:	13 96       	adiw	r26, 0x03	; 3
    2e6a:	9c 93       	st	X, r25
    2e6c:	8e 93       	st	-X, r24
    2e6e:	12 97       	sbiw	r26, 0x02	; 2
    2e70:	e0 e0       	ldi	r30, 0x00	; 0
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	d8 01       	movw	r26, r16
    2e76:	12 96       	adiw	r26, 0x02	; 2
    2e78:	8d 91       	ld	r24, X+
    2e7a:	9c 91       	ld	r25, X
    2e7c:	13 97       	sbiw	r26, 0x03	; 3
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	19 f0       	breq	.+6      	; 0x2e88 <free+0xf0>
    2e82:	f8 01       	movw	r30, r16
    2e84:	8c 01       	movw	r16, r24
    2e86:	f6 cf       	rjmp	.-20     	; 0x2e74 <free+0xdc>
    2e88:	8d 91       	ld	r24, X+
    2e8a:	9c 91       	ld	r25, X
    2e8c:	98 01       	movw	r18, r16
    2e8e:	2e 5f       	subi	r18, 0xFE	; 254
    2e90:	3f 4f       	sbci	r19, 0xFF	; 255
    2e92:	82 0f       	add	r24, r18
    2e94:	93 1f       	adc	r25, r19
    2e96:	20 91 d7 01 	lds	r18, 0x01D7
    2e9a:	30 91 d8 01 	lds	r19, 0x01D8
    2e9e:	28 17       	cp	r18, r24
    2ea0:	39 07       	cpc	r19, r25
    2ea2:	69 f4       	brne	.+26     	; 0x2ebe <free+0x126>
    2ea4:	30 97       	sbiw	r30, 0x00	; 0
    2ea6:	29 f4       	brne	.+10     	; 0x2eb2 <free+0x11a>
    2ea8:	10 92 da 01 	sts	0x01DA, r1
    2eac:	10 92 d9 01 	sts	0x01D9, r1
    2eb0:	02 c0       	rjmp	.+4      	; 0x2eb6 <free+0x11e>
    2eb2:	13 82       	std	Z+3, r1	; 0x03
    2eb4:	12 82       	std	Z+2, r1	; 0x02
    2eb6:	10 93 d8 01 	sts	0x01D8, r17
    2eba:	00 93 d7 01 	sts	0x01D7, r16
    2ebe:	df 91       	pop	r29
    2ec0:	cf 91       	pop	r28
    2ec2:	1f 91       	pop	r17
    2ec4:	0f 91       	pop	r16
    2ec6:	08 95       	ret

00002ec8 <__ctype_isfalse>:
    2ec8:	99 27       	eor	r25, r25
    2eca:	88 27       	eor	r24, r24

00002ecc <__ctype_istrue>:
    2ecc:	08 95       	ret

00002ece <memset>:
    2ece:	dc 01       	movw	r26, r24
    2ed0:	01 c0       	rjmp	.+2      	; 0x2ed4 <memset+0x6>
    2ed2:	6d 93       	st	X+, r22
    2ed4:	41 50       	subi	r20, 0x01	; 1
    2ed6:	50 40       	sbci	r21, 0x00	; 0
    2ed8:	e0 f7       	brcc	.-8      	; 0x2ed2 <memset+0x4>
    2eda:	08 95       	ret

00002edc <_exit>:
    2edc:	f8 94       	cli

00002ede <__stop_program>:
    2ede:	ff cf       	rjmp	.-2      	; 0x2ede <__stop_program>
